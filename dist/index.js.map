{"version":3,"sources":["../src/actions/transfer.ts","../../../node_modules/.pnpm/zod@3.24.1/node_modules/zod/lib/index.mjs","../src/providers/wallet.ts","../src/enviroment.ts","../src/utils/util.ts","../src/actions/createWallet.ts","../src/actions/loadWallet.ts","../src/actions/evaaBorrow.ts","../src/actions/evaaSupply.ts","../src/actions/evaaWithdraw.ts","../src/actions/evaaRepay.ts","../src/actions/evaaPositions.ts","../src/actions/stake.ts","../src/providers/staking.ts","../src/services/staking/platformFactory.ts","../src/services/staking/config/platformConfig.ts","../src/services/staking/strategies/tonWhales.ts","../src/services/staking/strategies/hipo.ts","../src/services/staking/strategies/hipo/sdk/Constants.ts","../src/services/staking/strategies/hipo/sdk/Helpers.ts","../src/services/staking/strategies/hipo/sdk/Treasury.ts","../src/services/staking/strategies/hipo/sdk/Parent.ts","../src/services/staking/strategies/hipo/sdk/Wallet.ts","../src/utils/formatting.ts","../src/actions/unstake.ts","../src/actions/getPoolInfo.ts","../src/actions/batchTransfer.ts","../src/actions/auctionInteraction.ts","../src/services/nft-marketplace/listingFactory.ts","../src/actions/createListing.ts","../src/actions/buyListing.ts","../src/services/nft-marketplace/listingTransactions.ts","../src/utils/NFTItem.ts","../src/services/nft-marketplace/interfaces/listings.ts","../src/services/nft-marketplace/listingData.ts","../src/actions/createAuction.ts","../src/actions/bidListing.ts","../src/actions/cancelListing.ts","../src/actions/transferNFT.ts","../src/actions/mintNFT.ts","../src/utils/NFTCollection.ts","../src/actions/getCollectionData.ts","../src/actions/updateNFTMetadata.ts","../src/actions/tokenPrice.ts","../src/providers/tokenProvider.ts","../src/providers/tonConnect.ts","../src/actions/tonConnect.ts","../src/actions/tonConnectTransaction.ts","../src/index.ts"],"sourcesContent":["import {\n    elizaLogger,\n    composeContext,\n    type Content,\n    type HandlerCallback,\n    ModelClass,\n    generateObject,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { z } from \"zod\";\nimport {\n    initWalletProvider,\n    type WalletProvider,\n    nativeWalletProvider,\n} from \"../providers/wallet\";\nimport { internal } from \"@ton/ton\";\nimport { base64ToHex, sleep } from \"../utils/util\";\n\nexport interface TransferContent extends Content {\n    recipient: string;\n    amount: string | number;\n}\n\nfunction isTransferContent(content: Content): content is TransferContent {\n    console.log(\"Content for transfer\", content);\n    return (\n        typeof content.recipient === \"string\" &&\n        (typeof content.amount === \"string\" ||\n            typeof content.amount === \"number\")\n    );\n}\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"recipient\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\",\n    \"amount\": \"1\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token transfer:\n- Recipient wallet address\n- Amount to transfer\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\n// Add interface for contract methods\ninterface TonWalletContract {\n    getSeqno: () => Promise<number>;\n}\n\ninterface ActionOptions {\n    [key: string]: unknown;\n}\n\nexport class TransferAction {\n    private walletProvider: WalletProvider;\n\n    constructor(walletProvider: WalletProvider) {\n        this.walletProvider = walletProvider;\n    }\n\n    async transfer(params: TransferContent): Promise<string> {\n        console.log(\n            `Transferring: ${params.amount} tokens to (${params.recipient})`,\n        );\n        // { recipient: 'xx', amount: '0\\\\.3'}\n\n        const walletClient = this.walletProvider.getWalletClient();\n        const contract = walletClient.open(this.walletProvider.wallet);\n\n        try {\n            // Create a transfer\n            const seqno: number = await contract.getSeqno();\n            await sleep(1500);\n            const transfer = contract.createTransfer({\n                seqno,\n                secretKey: this.walletProvider.keypair.secretKey,\n                messages: [\n                    internal({\n                        value: params.amount.toString().replace(/\\\\/g, \"\"),\n                        to: params.recipient,\n                        body: \"eliza ton wallet plugin\",\n                        bounce: false,\n                    }),\n                ],\n            });\n            await sleep(1500);\n            await contract.send(transfer);\n            console.log(\"Transaction sent, still waiting for confirmation...\");\n            await sleep(1500);\n            //this.waitForTransaction(seqno, contract);\n            const state = await walletClient.getContractState(\n                this.walletProvider.wallet.address,\n            );\n            const { lt: _, hash: lastHash } = state.lastTransaction;\n            return base64ToHex(lastHash);\n        } catch (error) {\n            throw new Error(`Transfer failed: ${error.message}`);\n        }\n    }\n\n    async waitForTransaction(seqno: number, contract: TonWalletContract) {\n        let currentSeqno = seqno;\n        const startTime = Date.now();\n        const TIMEOUT = 120000; // 2 minutes\n\n        while (currentSeqno === seqno) {\n            if (Date.now() - startTime > TIMEOUT) {\n                throw new Error(\"Transaction confirmation timed out after 2 minutes\");\n            }\n            await sleep(2000);\n            currentSeqno = await contract.getSeqno();\n        }\n        console.log(\"transaction confirmed!\");\n    }\n}\n\nconst buildTransferDetails = async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n): Promise<TransferContent> => {\n    const walletInfo = await nativeWalletProvider.get(runtime, message, state);\n    state.walletInfo = walletInfo;\n\n    // Initialize or update state\n    let currentState = state;\n    if (!currentState) {\n        currentState = (await runtime.composeState(message)) as State;\n    } else {\n        currentState = await runtime.updateRecentMessageState(currentState);\n    }\n\n    // Define the schema for the expected output\n    const transferSchema = z.object({\n        recipient: z.string(),\n        amount: z.union([z.string(), z.number()]),\n    });\n\n    // Compose transfer context\n    const transferContext = composeContext({\n        state,\n        template: transferTemplate,\n    });\n\n    // Generate transfer content with the schema\n    const content = await generateObject({\n        runtime,\n        context: transferContext,\n        schema: transferSchema,\n        modelClass: ModelClass.SMALL,\n    });\n\n    let transferContent: TransferContent = content.object as TransferContent;\n\n    if (transferContent === undefined) {\n        transferContent = content as unknown as TransferContent;\n    }\n\n    return transferContent;\n};\n\nexport default {\n    name: \"SEND_TON_TOKEN\",\n    similes: [\"SEND_TON\", \"SEND_TON_TOKENS\"],\n    description:\n        \"Call this action to send TON tokens to another wallet address. Supports sending any amount of TON to any valid TON wallet address. Transaction will be signed and broadcast to the TON blockchain.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: ActionOptions,\n        callback?: HandlerCallback,\n    ) => {\n        elizaLogger.log(\"Starting SEND_TOKEN handler...\");\n\n        const transferDetails = await buildTransferDetails(\n            runtime,\n            message,\n            state,\n        );\n\n        // Validate transfer content\n        if (!isTransferContent(transferDetails)) {\n            console.error(\"Invalid content for TRANSFER_TOKEN action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process transfer request. Invalid content provided.\",\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            // TODO check token balance before transfer\n            const walletProvider = await initWalletProvider(runtime);\n            const action = new TransferAction(walletProvider);\n            const hash = await action.transfer(transferDetails);\n\n            if (callback) {\n                callback({\n                    // TODO wait for transaction to complete\n                    text: `Successfully transferred ${transferDetails.amount} TON to ${transferDetails.recipient}, Transaction: ${hash}`,\n                    content: {\n                        success: true,\n                        hash: hash,\n                        amount: transferDetails.amount,\n                        recipient: transferDetails.recipient,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            console.error(\"Error during token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    template: transferTemplate,\n    // eslint-disable-next-line\n    validate: async (_runtime: IAgentRuntime) => {\n        //console.log(\"Validating TON transfer from user:\", message.userId);\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 1 TON tokens to EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\",\n                    action: \"SEND_TON_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll send 1 TON tokens now...\",\n                    action: \"SEND_TON_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully sent 1 TON tokens to EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4, Transaction: c8ee4a2c1bd070005e6cd31b32270aa461c69b927c3f4c28b293c80786f78b43\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 0.5 TON to EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N\",\n                    action: \"SEND_TON_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Processing transfer of 0.5 TON...\",\n                    action: \"SEND_TON_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully sent 0.5 TON to EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N, Transaction: c8ee4a2c1bd070005e6cd31b32270aa461c69b927c3f4c28b293c80786f78b43\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Please move 2.5 TON to EQByzSQE5Mf_UBf5YYVF_fRhP_oZwM_h7mGAymWBjxkY5yVm\",\n                    action: \"SEND_TON_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Initiating transfer of 2.5 TON...\",\n                    action: \"SEND_TON_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully sent 2.5 TON to EQByzSQE5Mf_UBf5YYVF_fRhP_oZwM_h7mGAymWBjxkY5yVm, Transaction: c8ee4a2c1bd070005e6cd31b32270aa461c69b927c3f4c28b293c80786f78b43\",\n                },\n            },\n        ],\n    ],\n};\n","var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\nfunction custom(check, params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            if (!check(data)) {\n                const p = typeof params === \"function\"\n                    ? params(data)\n                    : typeof params === \"string\"\n                        ? { message: params }\n                        : params;\n                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                const p2 = typeof p === \"string\" ? { message: p } : p;\n                ctx.addIssue({ code: \"custom\", ...p2, fatal: _fatal });\n            }\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, datetimeRegex, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n","import type {\n    IAgentRuntime,\n    ICacheManager,\n    Memory,\n    Provider,\n    State,\n} from \"@elizaos/core\";\n\nimport { TonClient, WalletContractV4 } from \"@ton/ton\";\nimport {\n    type KeyPair,\n    mnemonicToWalletKey,\n    mnemonicNew\n} from \"@ton/crypto\";\n\nimport NodeCache from \"node-cache\";\nimport * as path from \"node:path\";  // Changed to use node: protocol\nimport BigNumber from \"bignumber.js\";\nimport { CONFIG_KEYS } from \"../enviroment\";\n\nimport crypto from \"node:crypto\";\n\n// New import for file operations:\nimport fs from \"node:fs\";\n\nconst PROVIDER_CONFIG = {\n    MAINNET_RPC: process.env.TON_RPC_URL ?? \"https://toncenter.com/api/v2/jsonRPC\",\n    RPC_API_KEY: process.env.TON_RPC_API_KEY ?? \"\",\n    STONFI_TON_USD_POOL: \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\",\n    CHAIN_NAME_IN_DEXSCREENER: \"ton\",\n    // USD_DECIMAL=10^6\n    MAX_RETRIES: 3,\n    RETRY_DELAY: 2000,\n    // 10^9\n    TON_DECIMAL: BigInt(1000000000),\n};\n\ninterface WalletPortfolio {\n    totalUsd: string;\n    totalNativeToken: string;\n}\n\ninterface Prices {\n    nativeToken: { usd: BigNumber };\n}\n\n// Helper functions to encrypt and decrypt text using AES-256-CBC:\nfunction encrypt(text: string, password: string): string {\n    const iv = crypto.randomBytes(16);\n    const key = crypto.scryptSync(password, 'salt', 32);\n    const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);\n    let encrypted = cipher.update(text, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    return iv.toString('hex') + ':' + encrypted;\n}\n\nfunction decrypt(encrypted: string, password: string): string {\n    const [ivHex, encryptedText] = encrypted.split(':');\n    const iv = Buffer.from(ivHex, 'hex');\n    const key = crypto.scryptSync(password, 'salt', 32);\n    const decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);\n    let decrypted = decipher.update(encryptedText, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n}\n\nexport class WalletProvider {\n    keypair: KeyPair;\n    wallet: WalletContractV4;\n    private cache: NodeCache;\n    private cacheKey = \"ton/wallet\";\n    private rpcApiKey: string;\n\n    constructor(\n        // mnemonic: string,\n        keypair: KeyPair,\n        private endpoint: string,\n        private cacheManager: ICacheManager,\n    ) {\n        this.keypair = keypair;\n        this.cache = new NodeCache({ stdTTL: 300 });\n        this.wallet = WalletContractV4.create({\n            workchain: 0,\n            publicKey: keypair.publicKey,\n        });\n        this.rpcApiKey = process.env.TON_RPC_API_KEY || PROVIDER_CONFIG.RPC_API_KEY;\n    }\n\n    // thanks to plugin-sui\n    private async readFromCache<T>(key: string): Promise<T | null> {\n        const cached = await this.cacheManager.get<T>(\n            path.join(this.cacheKey, key),\n        );\n        return cached;\n    }\n\n    private async writeToCache<T>(key: string, data: T): Promise<void> {\n        await this.cacheManager.set(path.join(this.cacheKey, key), data, {\n            expires: Date.now() + 5 * 60 * 1000,\n        });\n    }\n\n    private async getCachedData<T>(key: string): Promise<T | null> {\n        // Check in-memory cache first\n        const cachedData = this.cache.get<T>(key);\n        if (cachedData) {\n            return cachedData;\n        }\n\n        // Check file-based cache\n        const fileCachedData = await this.readFromCache<T>(key);\n        if (fileCachedData) {\n            // Populate in-memory cache\n            this.cache.set(key, fileCachedData);\n            return fileCachedData;\n        }\n\n        return null;\n    }\n\n    private async setCachedData<T>(cacheKey: string, data: T): Promise<void> {\n        // Set in-memory cache\n        this.cache.set(cacheKey, data);\n\n        // Write to file-based cache\n        await this.writeToCache(cacheKey, data);\n    }\n\n    private async fetchPricesWithRetry() {\n        let lastError: Error;\n\n        for (let i = 0; i < PROVIDER_CONFIG.MAX_RETRIES; i++) {\n            try {\n                const response = await fetch(\n                    `https://api.dexscreener.com/latest/dex/pairs/${PROVIDER_CONFIG.CHAIN_NAME_IN_DEXSCREENER}/${PROVIDER_CONFIG.STONFI_TON_USD_POOL}`,\n                );\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(\n                        `HTTP error! status: ${response.status}, message: ${errorText}`,\n                    );\n                }\n\n                const data = await response.json();\n                return data;\n            } catch (error) {\n                console.error(`Attempt ${i + 1} failed:`, error);\n                lastError = error;\n                if (i < PROVIDER_CONFIG.MAX_RETRIES - 1) {\n                    const delay = PROVIDER_CONFIG.RETRY_DELAY * (2 ** i);  // Changed Math.pow to ** operator\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    // Removed unnecessary continue\n                }\n            }\n        }\n\n        console.error(\n            \"All attempts failed. Throwing the last error:\",\n            lastError,\n        );\n        throw lastError;\n    }\n\n    async fetchPrices(): Promise<Prices> {\n        try {\n            const cacheKey = \"prices\";\n            const cachedValue = await this.getCachedData<Prices>(cacheKey);\n\n            if (cachedValue) {\n                console.log(\"Cache hit for fetchPrices\");\n                return cachedValue;\n            }\n            console.log(\"Cache miss for fetchPrices\");\n\n            const priceData = await this.fetchPricesWithRetry().catch(\n                (error) => {\n                    console.error(\n                        `Error fetching ${PROVIDER_CONFIG.CHAIN_NAME_IN_DEXSCREENER.toUpperCase()} price:`,\n                        error,\n                    );\n                    throw error;\n                },\n            );\n            const prices: Prices = {\n                nativeToken: { usd: new BigNumber(priceData.pair.priceUsd).dividedBy(new BigNumber(priceData.pair.priceNative)) },\n            };\n            this.setCachedData(cacheKey, prices);\n            return prices;\n        } catch (error) {\n            console.error(\"Error fetching prices:\", error);\n            throw error;\n        }\n    }\n\n    private formatPortfolio(\n        runtime: IAgentRuntime,\n        portfolio: WalletPortfolio,\n    ): string {\n        let output = `${runtime.character.name}\\n`;\n        output += `Wallet Address: ${this.getAddress()}\\n`;\n\n        const totalUsdFormatted = new BigNumber(portfolio.totalUsd).toFixed(2);\n        const totalNativeTokenFormatted = new BigNumber(\n            portfolio.totalNativeToken,\n        ).toFixed(4);\n\n        output += `Total Value: $${totalUsdFormatted} (${totalNativeTokenFormatted} ${PROVIDER_CONFIG.CHAIN_NAME_IN_DEXSCREENER.toUpperCase()})\\n`;\n\n        return output;\n    }\n\n    private async fetchPortfolioValue(): Promise<WalletPortfolio> {\n        try {\n            const cacheKey = `portfolio-${this.getAddress()}`;\n            const cachedValue =\n                await this.getCachedData<WalletPortfolio>(cacheKey);\n\n            if (cachedValue) {\n                console.log(\"Cache hit for fetchPortfolioValue\", cachedValue);\n                return cachedValue;\n            }\n            console.log(\"Cache miss for fetchPortfolioValue\");\n\n            const prices = await this.fetchPrices().catch((error) => {\n                console.error(\n                    `Error fetching ${PROVIDER_CONFIG.CHAIN_NAME_IN_DEXSCREENER.toUpperCase()} price:`,\n                    error,\n                );\n                throw error;\n            });\n            const nativeTokenBalance = await this.getWalletBalance().catch(\n                (error) => {\n                    console.error(\n                        `Error fetching ${PROVIDER_CONFIG.CHAIN_NAME_IN_DEXSCREENER.toUpperCase()} amount:`,\n                        error,\n                    );\n                    throw error;\n                },\n            );\n\n            const amount =\n                Number(nativeTokenBalance) /\n                Number(PROVIDER_CONFIG.TON_DECIMAL);\n            const totalUsd = new BigNumber(amount.toString()).times(\n                prices.nativeToken.usd,\n            );\n\n            const portfolio = {\n                totalUsd: totalUsd.toString(),\n                totalNativeToken: amount.toFixed(4).toString(),\n            };\n\n            this.setCachedData(cacheKey, portfolio);\n            return portfolio;\n        } catch (error) {\n            console.error(\"Error fetching portfolio:\", error);\n            throw error;\n        }\n    }\n\n    async getFormattedPortfolio(runtime: IAgentRuntime): Promise<string> {\n        try {\n            const portfolio = await this.fetchPortfolioValue();\n            return this.formatPortfolio(runtime, portfolio);\n        } catch (error) {\n            console.error(\"Error generating portfolio report:\", error);\n            return \"Unable to fetch wallet information. Please try again later.\";\n        }\n    }\n\n    getAddress(): string {\n        const formattedAddress = this.wallet.address.toString({\n            bounceable: false,\n            urlSafe: true,\n        });\n        return formattedAddress;\n    }\n\n    getWalletClient(): TonClient {\n        const client = new TonClient({\n            endpoint: this.endpoint,\n            apiKey: this.rpcApiKey,\n        });\n        return client;\n    }\n\n    async getWalletBalance(): Promise<bigint | null> {\n        try {\n            const client = this.getWalletClient();\n            const balance = await client.getBalance(this.wallet.address);\n            return balance;\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    /**\n     * Generates a new wallet on demand.\n     * Returns the WalletProvider instance along with the mnemonic (for backup).\n     * The mnemonic should be stored securely by the AI agent.\n     * Additionally, the wallet's keypair is exported as an encrypted backup\n     * using the provided password, and stored in a file.\n     */\n    static async generateNew(rpcUrl: string, password: string, cacheManager: ICacheManager): Promise<{ walletProvider: WalletProvider; mnemonic: string[] }> {\n        const mnemonic = await mnemonicNew(24, password);\n        const keypair = await mnemonicToWalletKey(mnemonic, password);\n        const walletProvider = new WalletProvider(keypair, rpcUrl, cacheManager);\n\n        // Export the wallet keys as encrypted JSON string using the provided password\n        const encryptedKeyBackup = await walletProvider.exportWallet(password);\n\n        // Define a backup directory and file name\n        const backupDir = path.join(process.cwd(), \"ton_wallet_backups\");\n        if (!fs.existsSync(backupDir)) {\n            fs.mkdirSync(backupDir, { recursive: true });\n        }\n        const fileName = `${walletProvider.getAddress()}_wallet_backup.json`;\n        const filePath = path.join(backupDir, fileName);\n\n        // Write the encrypted key backup to file\n        fs.writeFileSync(filePath, encryptedKeyBackup, { encoding: \"utf-8\" });\n        console.log(`Wallet backup saved to ${filePath}`);\n\n        return { walletProvider, mnemonic };\n    }\n\n    /**\n     * Imports a wallet from an encrypted backup file.\n     * Reads the backup file content, decrypts it using the provided password, and returns a WalletProvider instance.\n     */\n    static async importWalletFromFile(runtime: IAgentRuntime, walletAddress: string, password: string): Promise<WalletProvider> {\n        // Define a backup directory and file name\n        const backupDir = path.join(process.cwd(), \"ton_wallet_backups\");\n        if (!fs.existsSync(backupDir)) {\n            fs.mkdirSync(backupDir, { recursive: true });\n        }\n        const fileName = `${walletAddress}_wallet_backup.json`;\n        const filePath = path.join(backupDir, fileName);\n\n        if (!fs.existsSync(filePath)) {\n            throw new Error(`Wallet backup file does not exist at: ${filePath}`);\n        }\n        const encryptedData = fs.readFileSync(filePath, { encoding: \"utf-8\" });\n        const walletProvider = await WalletProvider.importWallet(encryptedData, password, runtime);\n        return walletProvider;\n    }\n\n    /**\n     * Exports the wallet's keypair as an encrypted JSON string.\n     */\n    async exportWallet(password: string): Promise<string> {\n        // Serialize the keypair (private keys should never be logged or shown directly)\n        const keyData = JSON.stringify({\n            publicKey: Buffer.from(this.keypair.publicKey).toString('hex'),\n            secretKey: Buffer.from(this.keypair.secretKey).toString('hex'),\n        });\n        return encrypt(keyData, password);\n    }\n\n    /**\n     * Imports a wallet from its encrypted backup.\n     */\n    static async importWallet(\n        encryptedData: string,\n        password: string,\n        runtime: IAgentRuntime\n    ): Promise<WalletProvider> {\n        const decrypted = decrypt(encryptedData, password);\n        const keyData = JSON.parse(decrypted);\n        const keypair: KeyPair = {\n            publicKey: Buffer.from(keyData.publicKey, 'hex'),\n            secretKey: Buffer.from(keyData.secretKey, 'hex'),\n        };\n        const rpcUrl = runtime.getSetting(\"TON_RPC_URL\") || PROVIDER_CONFIG.MAINNET_RPC;\n        return new WalletProvider(keypair, rpcUrl, runtime.cacheManager);\n    }\n\n}\n\nexport const initWalletProvider = async (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(CONFIG_KEYS.TON_PRIVATE_KEY);\n    // Removed unnecessary else clause\n    if (!privateKey) {\n        throw new Error(`${CONFIG_KEYS.TON_PRIVATE_KEY} is missing`);\n    }\n\n    const mnemonics = privateKey.split(\" \");\n    if (mnemonics.length < 2) {\n        throw new Error(`${CONFIG_KEYS.TON_PRIVATE_KEY} mnemonic seems invalid`);\n    }\n\n    const rpcUrl =\n        runtime.getSetting(\"TON_RPC_URL\") || PROVIDER_CONFIG.MAINNET_RPC;\n\n    const keypair = await mnemonicToWalletKey(mnemonics);\n    return new WalletProvider(keypair, rpcUrl, runtime.cacheManager);\n};\n\nexport const nativeWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        // eslint-disable-next-line\n        _message: Memory,\n        // eslint-disable-next-line\n        _state?: State,\n    ): Promise<string | null> {\n        try {\n            const walletProvider = await initWalletProvider(runtime);\n            const formattedPortfolio =\n                await walletProvider.getFormattedPortfolio(runtime);\n            console.log(formattedPortfolio);\n            return formattedPortfolio;\n        } catch (error) {\n            console.error(\n                `Error in ${PROVIDER_CONFIG.CHAIN_NAME_IN_DEXSCREENER.toUpperCase()} wallet provider:`,\n                error,\n            );\n            return null;\n        }\n    },\n};\n","import type { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const CONFIG_KEYS = {\n  TON_PRIVATE_KEY: \"TON_PRIVATE_KEY\",\n  TON_RPC_URL: \"TON_RPC_URL\",\n  TON_RPC_API_KEY: \"TON_RPC_API_KEY\",\n  TON_EXPLORER_URL: \"TON_EXPLORER_URL\",\n  TON_MANIFEST_URL: \"TON_MANIFEST_URL\",\n  TON_BRIDGE_URL: \"TON_BRIDGE_URL\",\n};\n\nexport const envSchema = z.object({\n  TON_PRIVATE_KEY: z.string().min(1, \"Ton private key is required\"),\n  TON_RPC_URL: z.string(),\n  TON_RPC_API_KEY: z.string(),\n  TON_EXPLORER_URL: z.string(),\n  TON_MANIFEST_URL: z.string(),\n  TON_BRIDGE_URL: z.string(),\n});\n\nexport type EnvConfig = z.infer<typeof envSchema>;\n\nexport async function validateEnvConfig(\n  runtime: IAgentRuntime\n): Promise<EnvConfig> {\n  try {\n    const config = {\n      TON_PRIVATE_KEY:\n        runtime.getSetting(CONFIG_KEYS.TON_PRIVATE_KEY) ||\n        process.env.TON_PRIVATE_KEY,\n      TON_RPC_URL:\n        runtime.getSetting(CONFIG_KEYS.TON_RPC_URL) || process.env.TON_RPC_URL,\n      TON_RPC_API_KEY:\n        runtime.getSetting(CONFIG_KEYS.TON_RPC_API_KEY) ||\n        process.env.TON_RPC_API_KEY,\n      TON_EXPLORER_URL:\n        runtime.getSetting(CONFIG_KEYS.TON_EXPLORER_URL) ||\n        process.env.TON_EXPLORER_URL,\n      TON_MANIFEST_URL:\n        runtime.getSetting(CONFIG_KEYS.TON_MANIFEST_URL) ||\n        process.env.TON_MANIFEST_URL,\n      TON_BRIDGE_URL:\n        runtime.getSetting(CONFIG_KEYS.TON_BRIDGE_URL) ||\n        process.env.TON_BRIDGE_URL,\n    };\n\n    return envSchema.parse(config);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessages = error.errors\n        .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n        .join(\"\\n\");\n      throw new Error(`Ton configuration validation failed:\\n${errorMessages}`);\n    }\n    throw error;\n  }\n}\n","import { Address, beginCell, Cell, internal, SendMode } from \"@ton/ton\";\nimport pinataSDK from \"@pinata/sdk\";\n\nimport { readdirSync } from \"fs\";\nimport { writeFile, readFile } from \"fs/promises\";\nimport path from \"path\";\nimport { WalletProvider } from \"../providers/wallet\";\n// import { MintParams } from \"./NFTCollection\";\nexport const sleep = async (ms: number) => {\n    await new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport const base64ToHex = (base64: string) => {\n    return Buffer.from(base64, \"base64\").toString(\"hex\");\n};\n\nexport function bufferToChunks(buff: Buffer, chunkSize: number) {\n    const chunks: Buffer[] = [];\n    while (buff.byteLength > 0) {\n      chunks.push(buff.subarray(0, chunkSize));\n      buff = buff.subarray(chunkSize);\n    }\n    return chunks;\n  }\n\n export  function makeSnakeCell(data: Buffer): Cell {\n    const chunks = bufferToChunks(data, 127);\n\n    if (chunks.length === 0) {\n      return beginCell().endCell();\n    }\n\n    if (chunks.length === 1) {\n      return beginCell().storeBuffer(chunks[0]).endCell();\n    }\n\n    let curCell = beginCell();\n\n    for (let i = chunks.length - 1; i >= 0; i--) {\n      const chunk = chunks[i];\n\n      curCell.storeBuffer(chunk);\n\n      if (i - 1 >= 0) {\n        const nextCell = beginCell();\n        nextCell.storeRef(curCell);\n        curCell = nextCell;\n      }\n    }\n\n    return curCell.endCell();\n  }\n\n  export function encodeOffChainContent(content: string) {\n    let data = Buffer.from(content);\n    const offChainPrefix = Buffer.from([0x01]);\n    data = Buffer.concat([offChainPrefix, data]);\n    return makeSnakeCell(data);\n  }\n\n  export async function waitSeqno(seqno: number, wallet) {\n    for (let attempt = 0; attempt < 10; attempt++) {\n      await sleep(2000);\n      const seqnoAfter = await wallet.contract.getSeqno();\n      if (seqnoAfter == seqno + 1) break;\n    }\n  }\n\n  export async function uploadFolderToIPFS(folderPath: string): Promise<string> {\n  const pinata = new pinataSDK({\n    pinataApiKey: process.env.PINATA_API_KEY,\n    pinataSecretApiKey: process.env.PINATA_API_SECRET,\n  });\n\n  const response = await pinata.pinFromFS(folderPath);\n  return response.IpfsHash;\n}\n\nexport async function updateMetadataFiles(metadataFolderPath: string, imagesIpfsHash: string): Promise<void> {\n  const files = readdirSync(metadataFolderPath);\n\n  files.forEach(async (filename, index) => {\n    const filePath = path.join(metadataFolderPath, filename)\n    const file = await readFile(filePath);\n\n    const metadata = JSON.parse(file.toString());\n    metadata.image =\n      index != files.length - 1\n        ? `ipfs://${imagesIpfsHash}/${index}.jpg`\n        : `ipfs://${imagesIpfsHash}/logo.jpg`;\n\n    await writeFile(filePath, JSON.stringify(metadata));\n  });\n}\n\nexport async function uploadJSONToIPFS(json: any): Promise<string> {\n  const pinata = new pinataSDK({\n    pinataApiKey: process.env.PINATA_API_KEY,\n    pinataSecretApiKey: process.env.PINATA_API_SECRET,\n  });\n\n  const response = await pinata.pinJSONToIPFS(json);\n  return response.IpfsHash;\n}\n\nexport function formatCurrency(amount: string, digits: number): string {\n  try {\n      return parseFloat(amount).toFixed(digits).toString();\n  } catch (e) {\n      return \"0\";\n  }\n};\n\n\nexport async function topUpBalance(\n    walletProvider: WalletProvider,\n    nftAmount: number,\n    collectionAddress: string\n  ): Promise<number> {\n    const feeAmount = 0.026 // approximate value of fees for 1 transaction in our case\n    const walletClient = walletProvider.getWalletClient();\n    const contract = walletClient.open(walletProvider.wallet);\n    const seqno = await contract.getSeqno();\n    const amount = nftAmount * feeAmount;\n\n    await contract.sendTransfer({\n      seqno,\n      secretKey: walletProvider.keypair.secretKey,\n      messages: [\n        internal({\n          value: amount.toString(),\n          to: collectionAddress,\n          bounce: false,\n        }),\n      ],\n      sendMode: SendMode.PAY_GAS_SEPARATELY + SendMode.IGNORE_ERRORS,\n    });\n\n    return seqno;\n  }\n\n  export async function waitSeqnoContract(seqno: number, contract) {\n\n    for (let attempt = 0; attempt < 10; attempt++) {\n      await sleep(2000);\n      console.log(\"Transaction sent, still waiting for confirmation...\")\n\n      const seqnoAfter: number = await contract.getSeqno();\n      if (seqnoAfter == seqno + 1) break;\n    }\n  }\n\n\n  export function sanitizeTonAddress(input: string, bounceable?: boolean, testOnly?: boolean): string | null {\n    try {\n        // Parse the input into a normalized address\n        const address = Address.parse(input);\n\n        // Convert to the desired format based on the provided flags\n        const sanitizedAddress = address.toString({ bounceable: bounceable ?? false, testOnly: testOnly ?? false });\n\n        return sanitizedAddress;\n    } catch (error) {\n        console.error(\"Invalid TON address:\", error.message);\n        return null; // Return null if the address is invalid\n    }\n}\n\n\n/**\n* Converts an input (string or number) to a BigInt.\n*\n* The input may contain underscore separators (e.g. \"50_000\") which are removed.\n* The returned value is a BigInt (e.g. 50_000n).\n*\n* @param input - The input string or number.\n* @returns The corresponding BigInt.\n*/\nexport function convertToBigInt(input: string | number): bigint {\n    // If the input is a string, remove underscores; otherwise, just convert the number.\n    const cleanedInput = typeof input === \"string\" ? input.replace(/_/g, \"\") : input;\n    return BigInt(cleanedInput);\n}\n","import {\n    elizaLogger,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    ModelClass,\n    generateObject,\n    Content,\n    composeContext,\n} from \"@elizaos/core\";\nimport { WalletProvider } from \"../providers/wallet\";\nimport { z } from \"zod\";\n\nexport interface CreateWalletContent extends Content {\n    encryptionPassword: string;\n}\n\nfunction isCreateWalletContent(content: Content): content is CreateWalletContent {\n    return typeof content.encryptionPassword === \"string\";\n}\n\n// Define a schema for input JSON that must include a password.\nexport const passwordSchema = z.object({\n    encryptionPassword: z.string().min(1, \"Encryption password is required and cannot be empty.\"),\n  });\n  \n  // Define a template to guide object building (similar to the mint NFT example)\n  export const passwordTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n  Example response:\n  \\`\\`\\`json\n  {\n    \"encryptionPassword\": \"<your password here>\"\n  }\n  \\`\\`\\`\n  \n  {{recentMessages}}\n\n  Respond with a JSON markdown block containing only the extracted values.`;\n  \n  /**\n   * Builds and validates a password object using the provided runtime, message, and state.\n   * This function mimics the object building approach used in the mint NFT action.\n   */\n  export async function buildCreateWalletDetails(\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State\n  ): Promise<CreateWalletContent> {\n    // Compose the current state (or create one based on the message)\n    const currentState = state || (await runtime.composeState(message));\n  \n    // Compose a context to drive the object geSneration.\n    const context = composeContext({\n      state: currentState,\n      template: passwordTemplate,\n    });\n  \n    // Generate an object using the defined schema.\n    const result = await generateObject({\n      runtime,\n      context,\n      schema: passwordSchema,\n      modelClass: ModelClass.SMALL,\n    });\n  \n    let passwordData = result.object;\n    if (!passwordData) {\n      // If the generated object is undefined, cast the result to ensure password extraction.\n      passwordData = result as unknown as { password: string };\n    }\n\n    let createWalletContent: CreateWalletContent = passwordData as CreateWalletContent;\n\n    if (createWalletContent === undefined) {\n        createWalletContent = passwordData as unknown as CreateWalletContent;\n    }\n\n    return createWalletContent;\n  }\n\nexport class CreateWalletAction {\n    private runtime: IAgentRuntime;\n    constructor(runtime: IAgentRuntime) {\n        this.runtime = runtime;\n    }\n\n    async createWallet(params: {rpcUrl: string, encryptionPassword: string}): Promise<{walletAddress: string, mnemonic: string[]}> {\n\n        const { walletProvider, mnemonic } = await WalletProvider.generateNew(params.rpcUrl, params.encryptionPassword, this.runtime.cacheManager);\n        const walletAddress = walletProvider.getAddress();\n        return {walletAddress, mnemonic};\n    }\n}\n\nexport default {\n    name: \"CREATE_TON_WALLET\",\n    similes: [\"NEW_TON_WALLET\", \"MAKE_NEW_TON_WALLET\"],\n    description:\n        \"Creates a new TON wallet on demand. Returns the public address and mnemonic backup (store it securely). The wallet keypair is also encrypted to a file using the provided password.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback,\n    ) => {\n        elizaLogger.log(\"Starting CREATE_TON_WALLET action...\");\n\n        // Build password details using the object building approach like in the mint NFT action.\n        const createWalletContent = await buildCreateWalletDetails(runtime, message, state);\n        \n        elizaLogger.debug(\"createWalletContent\", createWalletContent);\n        if(!isCreateWalletContent(createWalletContent)) {\n            if(callback) {\n                callback({\n                    text: \"Unable to process create wallet request. No password provided.\",\n                    content: { error: \"Invalid create wallet. No password provided.\" },\n                });\n            }\n            return false;\n        }\n        try {\n            // Generate a new wallet using the provided password.\n\n            const rpcUrl = runtime.getSetting(\"TON_RPC_URL\") || \"https://toncenter.com/api/v2/jsonRPC\";\n            const action = new CreateWalletAction(runtime);\n\n            const { walletAddress, mnemonic } = await action.createWallet({rpcUrl, encryptionPassword: createWalletContent.encryptionPassword});\n            const result = {\n                status: \"success\",\n                walletAddress,\n                mnemonic, // IMPORTANT: The mnemonic backup must be stored securely!\n                message: \"New TON wallet created. Store the mnemonic securely for recovery.\",\n            };\n\n            if (callback) {\n                callback({\n                    text: `\nNew TON wallet created!\nYour password was used to encrypt the wallet keypair, but never stored.\nWallet Address: ${walletAddress}\nI've used both your password and the mnemonic to create the wallet.\nPlease securely store your mnemonic:\n${mnemonic.join(\" \")}`,\n                    content: result,\n                });\n            }\n\n            return true;\n        } catch (error: any) {\n            elizaLogger.error(\"Error creating wallet:\", error);\n            if (callback) {\n                callback({\n                    text: `Error creating wallet: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    validate: async (_runtime: IAgentRuntime) => true,\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Please create a new TON wallet for me.\",\n                    action: \"CREATE_TON_WALLET\",\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"New TON wallet created!/n Your password was used to encrypt the wallet keypair, but never stored./nWallet Address: EQAXxxxxxxxxxxxxxxxxxxxxxx./n I've used both your password and the mnemonic to create the wallet./nPlease securely store your mnemonic\",\n                },\n            },\n            \n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Please make me a new TON wallet.\",\n                    action: \"CREATE_TON_WALLET\",\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"New TON wallet created!/n Your password was used to encrypt the wallet keypair, but never stored./nWallet Address: EQAXxxxxxxxxxxxxxxxxxxxxxx./n I've used both your password and the mnemonic to create the wallet./nPlease securely store your mnemonic\",\n                },\n            },\n        ]\n    ],\n}; ","import {\n    elizaLogger,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    Content,\n    composeContext,\n    generateObject,\n    ModelClass,\n} from \"@elizaos/core\";\nimport { WalletProvider } from \"../providers/wallet\";\nimport { z } from \"zod\";\nexport interface RecoverWalletContent extends Content {\n    password: string;\n    walletAddress: string;\n}\n\nfunction isRecoverWalletContent(content: Content): content is RecoverWalletContent {\n    return typeof content.password === \"string\" && typeof content.walletAddress === \"string\"\n}\n\n// Define a schema for input JSON that must include a password.\nconst recoverWalletSchema = z.object({\n    password: z.string().min(1, \"Password is required and cannot be empty.\"),\n    walletAddress: z.string().min(1, \"Wallet address is required and cannot be empty.\"),\n  });\n  \n  // Define a template to guide object building (similar to the mint NFT example)\n  const recoverWalletTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n  Example response:\n  \\`\\`\\`json\n  {\n    \"password\": \"my_password\",\n    \"walletAddress\": \"EQAXxxxxxxxxxxxxxxxxxxxxxx\"\n  }\n  \\`\\`\\`\n  \n  {{recentMessages}}\n\n  Respond with a JSON markdown block containing only the extracted values`;\n\n\n   /**\n   * Builds and validates a password object using the provided runtime, message, and state.\n   * This function mimics the object building approach used in the mint NFT action.\n   */\n  export async function buildRecoverWalletDetails(\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State\n  ): Promise<RecoverWalletContent> {\n    // Compose the current state (or create one based on the message)\n    const currentState = state || (await runtime.composeState(message));\n  \n    // Compose a context to drive the object geSneration.\n    const context = composeContext({\n      state: currentState,\n      template: recoverWalletTemplate,\n    });\n  \n    // Generate an object using the defined schema.\n    const result = await generateObject({\n      runtime,\n      context,\n      schema: recoverWalletSchema,\n      modelClass: ModelClass.SMALL,\n    });\n  \n    let passwordData = result.object;\n    if (!passwordData) {\n      // If the generated object is undefined, cast the result to ensure password extraction.\n      passwordData = result as unknown as { password: string };\n    }\n\n    let recoverWalletContent: RecoverWalletContent = passwordData as RecoverWalletContent;\n\n    if (recoverWalletContent === undefined) {\n        recoverWalletContent = passwordData as unknown as RecoverWalletContent;\n    }\n\n    return recoverWalletContent;\n  }\n\n\n  \nexport default {\n    name: \"RECOVER_TON_WALLET\",\n    similes: [\"IMPORT_TON_WALLET\", \"RECOVER_WALLET\"],\n    description:\n        \"Loads an existing TON wallet from an encrypted backup file using the provided password.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback,\n    ) => {\n        elizaLogger.log(\"Starting RECOVER_TON_WALLET action...\");\n\n        const recoverWalletContent = await buildRecoverWalletDetails(runtime, message, state);\n\n        if(!isRecoverWalletContent(recoverWalletContent)) {\n            if(callback) {\n                callback({\n                    text: \"Unable to process load wallet request. No password or address provided.\",\n                    content: { error: \"Invalid load wallet. No password or address provided.\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            elizaLogger.debug(\"recoverWalletContent\", recoverWalletContent);\n            // Get the export password from settings.\n            const password = recoverWalletContent.password;\n            if(!password) {\n                if(callback) {\n                    callback({\n                        text: \"Unable to process load wallet request. No password provided.\",\n                        content: { error: \"Invalid load wallet. No password provided.\" },\n                    });\n                    return false;\n                }\n            }\n            // Get the backup file path. You can pass the filePath via message content or via settings.\n            const walletAddress = recoverWalletContent.walletAddress;\n            if(!walletAddress) {\n                if(callback) {\n                    callback({\n                        text: \"Unable to process load wallet request. No wallet address provided.\",\n                        content: { error: \"Invalid load wallet. No wallet address provided.\" },\n                    });\n                    return false;\n                }\n            }\n\n            const walletProvider = await WalletProvider.importWalletFromFile(runtime, walletAddress, password);\n\n            const result = {\n                status: \"success\",\n                walletAddress,\n                message: `\nWallet recovered successfully.\nYour Decrypted wallet is: ${JSON.stringify(walletProvider.keypair)}.\nPlease store it securely.`,\n            };\n\n            if (callback) {\n                callback({\n                    text: `Wallet recovered successfully.\\n\\n Your Decrypted wallet is: ${JSON.stringify(walletProvider.keypair)}.\\n\\n Please store it securely.`,\n                    content: result,\n                });\n            }\n\n            return true;\n        } catch (error: any) {\n            elizaLogger.error(\"Error recovering wallet:\", error);\n            if (callback) {\n                callback({\n                    text: `Error recovering wallet: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    validate: async (_runtime: IAgentRuntime) => true,\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Please recover my TON wallet. My decryption password is my_password and my wallet address is EQAXxxxxxxxxxxxxxxxxxxxxxx.\",\n                    action: \"RECOVER_TON_WALLET\",\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Wallet recovered successfully. Your Decrypted wallet is: ${JSON.stringify(walletProvider.keypair)}. Please store it securely.\",\n                },\n            },\n        ],\n    ],\n}; ","import {\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    elizaLogger,\n    ModelClass,\n    composeContext,\n    generateObject\n} from \"@elizaos/core\";\nimport { sleep, convertToBigInt } from \"../utils/util\";\nimport BigNumber from \"bignumber.js\";\nimport { z } from \"zod\";\nimport evaaPkg from '@evaafi/sdk';\nconst {\n    Evaa,\n    FEES,\n    TON_TESTNET,\n    TESTNET_POOL_CONFIG,\n    JUSDC_TESTNET,\n    JUSDT_TESTNET,\n    UserDataActive,\n    AssetData,\n    BalanceChangeType,\n    calculatePresentValue,\n    calculateCurrentRates,\n    MasterConstants,\n    AssetConfig,\n    ExtendedAssetData,\n    PoolAssetConfig,\n    mulFactor,\n    predictAPY,\n    PricesCollector\n}  = evaaPkg;\n\nimport { Cell, Dictionary, toNano, beginCell, storeMessage, internal, external, SendMode, Address } from '@ton/ton';\nimport {\n    initWalletProvider,\n    type WalletProvider,\n    nativeWalletProvider,\n} from \"../providers/wallet\";\n\nexport const borrowSchema = z.object({\n    amount: z.string(),\n    asset: z.string().nullable().optional().transform(val => val === null ? \"TON\" : val),\n    includeUserCode: z.boolean().nullable().optional().transform(val => val === null ? false : val),\n    showInterest: z.boolean().nullable().optional().transform(val => val === null ? false : val),\n});\n\nexport type BorrowContent = z.infer<typeof borrowSchema>;\n\nfunction isBorrowContent(content: any): content is BorrowContent {\n    return (\n        (typeof content.amount === \"string\" || typeof content.amount === \"number\") &&\n        (content.asset === undefined || typeof content.asset === \"string\") &&\n        (content.includeUserCode === undefined || typeof content.includeUserCode === \"boolean\") &&\n        (content.showInterest === undefined || typeof content.showInterest === \"boolean\")\n    );\n}\n\nconst borrowTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"amount\": \"1\",\n    \"asset\": \"USDT\" | \"USDC\" | \"TON\",\n    \"includeUserCode\": true,\n    \"showInterest\": true\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested borrowing operation:\n- Amount to borrow\n- Asset to borrow\n- Whether to include user code (optional)\n- Whether to show interest calculation (optional)\n- Make sure to remove \\`\\`\\`json and \\`\\`\\` from the response\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\ninterface EvaaAsset {\n    name: string;\n    config: typeof AssetConfig;\n    data: typeof ExtendedAssetData;\n    asset: any;\n}\n\nexport class BorrowAction {\n    private walletProvider: WalletProvider;\n    private evaa: typeof Evaa;\n    private assetsData: Dictionary<bigint, typeof ExtendedAssetData>;\n    private assetsConfig: Dictionary<bigint, typeof AssetConfig>;\n    private masterConstants: typeof MasterConstants;\n    private USDT: EvaaAsset;\n    private USDC: EvaaAsset;\n    private TON: EvaaAsset;\n\n    /*private usdtData: typeof ExtendedAssetData;\n    private usdtConfig: typeof AssetConfig;\n    private usdcData: typeof ExtendedAssetData;\n    private usdcConfig: typeof AssetConfig;\n    private tonData: typeof ExtendedAssetData;\n    private tonConfig: typeof AssetConfig;*/\n\n    private totalSupply: bigint;\n    private totalBorrow: bigint;\n    private collector: typeof PricesCollector;\n    borrowInterest: bigint;\n    predictAPY: bigint;\n    withdrawalLimits: Dictionary<bigint, bigint>\n    borrowLimits: Dictionary<bigint, bigint>\n\n    constructor(walletProvider: WalletProvider) {\n        this.walletProvider = walletProvider;\n        this.evaa = null;\n        this.assetsData = null;\n        this.assetsConfig = null;\n        this.masterConstants = null;\n        /*this.usdtData = null;\n        this.usdtConfig = null;\n        this.usdcData = null;\n        this.usdcConfig = null;\n        this.tonData = null;\n        this.tonConfig = null;*/\n        this.USDT = null;\n        this.USDC = null;\n        this.TON = null;\n        this.totalSupply = null;\n        this.totalBorrow = null;\n        this.borrowInterest = null;\n        this.predictAPY = null;\n        this.collector = null;\n\n        this.withdrawalLimits = null;\n        this.borrowLimits = null;\n    }\n\n    private async waitForPrincipalChange(addr: Address, asset: typeof PoolAssetConfig, func: any, currentEvaa = this.evaa, currentClient = this.walletProvider.getWalletClient()):Promise<{ principal: bigint, data: typeof UserDataActive }> {\n        let prevPrincipal = 0n;\n        let user = currentClient.open(await currentEvaa.openUserContract(addr));\n        await user.getSync(currentEvaa.data!.assetsData, currentEvaa.data!.assetsConfig, (await this.collector.getPrices()).dict);\n\n        if (user.data?.type == \"active\") {\n            prevPrincipal = user.data.principals.get(asset.assetId) ?? 0n;\n        }\n\n        await new Promise( resolve => setTimeout(resolve, 1000) );\n\n        await func();\n\n        while (true) {\n            user = currentClient.open(await currentEvaa.openUserContract(addr));\n            await user.getSync(currentEvaa.data!.assetsData, currentEvaa.data!.assetsConfig, (await this.collector.getPrices()).dict);\n            if (user.data?.type == \"active\") {\n                const principalNow: bigint = user.data.principals.get(asset.assetId) ?? 0n;\n                if (Math.abs(Number(principalNow - prevPrincipal)) > 10) {\n                    return {principal: principalNow, data: user.data};\n                }\n            }\n            await new Promise( resolve => setTimeout(resolve, 4000) );\n        }\n    }\n\n    async borrow(params: BorrowContent, runtime: IAgentRuntime, callback: HandlerCallback): Promise<any> {\n\n            // Get wallet instance\n            const walletClient = this.walletProvider.getWalletClient();\n            const wallet = walletClient.open(this.walletProvider.wallet);\n            const tonExplorerUrl = runtime.getSetting(\"TON_EXPLORER_URL\") || \"https://testnet.tonviewer.com/\";\n\n            // Initialize EVAA SDK\n            this.evaa = walletClient.open(\n                new Evaa({poolConfig: TESTNET_POOL_CONFIG}),\n            );\n            await this.evaa.getSync();\n\n            this.assetsData = this.evaa.data?.assetsData!;\n            this.assetsConfig = this.evaa.data?.assetsConfig!;\n            this.masterConstants = this.evaa.poolConfig.masterConstants;\n\n            /*this.usdtData = this.assetsData.get(JUSDT_TESTNET.assetId)!;\n            this.usdtConfig = this.assetsConfig.get(JUSDT_TESTNET.assetId)!;\n            this.usdcData = this.assetsData.get(JUSDC_TESTNET.assetId)!;\n            this.usdcConfig = this.assetsConfig.get(JUSDC_TESTNET.assetId)!;\n            this.tonData = this.assetsData.get(TON_TESTNET.assetId)!;\n            this.tonConfig = this.assetsConfig.get(TON_TESTNET.assetId)!;*/\n            this.USDT = {\n                name: \"USDT\",\n                data: this.assetsData.get(JUSDT_TESTNET.assetId)!,\n                config: this.assetsConfig.get(JUSDT_TESTNET.assetId)!,\n                asset: JUSDT_TESTNET\n            }\n            this.USDC = {\n                name: \"USDC\",\n                data: this.assetsData.get(JUSDC_TESTNET.assetId)!,\n                config: this.assetsConfig.get(JUSDC_TESTNET.assetId)!,\n                asset: JUSDC_TESTNET\n            }\n            this.TON = {\n                name: \"TON\",\n                data: this.assetsData.get(TON_TESTNET.assetId)!,\n                config: this.assetsConfig.get(TON_TESTNET.assetId)!,\n                asset: TON_TESTNET\n            }\n\n            this.totalSupply = calculatePresentValue(this.TON.data.sRate, this.TON.data.totalSupply, this.masterConstants);\n            this.totalBorrow = calculatePresentValue(this.TON.data.bRate, this.TON.data.totalBorrow, this.masterConstants);\n            // Calculate borrow interest\n            this.borrowInterest = this.TON.config.baseBorrowRate +\n            mulFactor(this.masterConstants.FACTOR_SCALE, this.TON.config.borrowRateSlopeLow, this.TON.config.targetUtilization) +\n            mulFactor(\n                this.masterConstants.FACTOR_SCALE,\n                this.TON.config.borrowRateSlopeHigh,\n                this.masterConstants.FACTOR_SCALE - this.TON.config.targetUtilization\n            );\n\n            // Calculate APY\n            this.predictAPY = predictAPY({\n                amount: this.totalBorrow,\n                balanceChangeType: BalanceChangeType.Repay,\n                assetData: this.TON.data,\n                assetConfig: this.TON.config,\n                masterConstants: this.masterConstants\n            });\n\n            // Initialize prices collector\n            this.collector = new PricesCollector(TESTNET_POOL_CONFIG);\n\n            // Get user instance\n            const borrower = walletClient.open(this.evaa.openUserContract(wallet.address));\n            // Fetch user data\n            await borrower.getSync(this.evaa.data!.assetsData, this.evaa.data!.assetsConfig, (await this.collector.getPrices()).dict, true);\n\n            // Check if the user has a active evaa contract\n            const data = (borrower.data as typeof UserDataActive);\n            elizaLogger.log('User data:', data.fullyParsed);\n\n            if (borrower.data?.type != 'active') {\n                elizaLogger.log('Borrower User is inactive');\n                if (callback) {\n                    callback({\n                        text: `You need provide collateral funds before you can borrow`,\n                        content: { error: \"No collateral funds provided.\" }\n                    });\n\n                    return false;\n                }\n\n            } else {\n\n                this.withdrawalLimits = borrower.data.withdrawalLimits;\n                this.borrowLimits = borrower.data.borrowLimits;\n                elizaLogger.debug('User principals');\n                elizaLogger.debug('Real Principals', borrower.data.realPrincipals);\n                elizaLogger.debug('User Principal', borrower.data.principals);\n                elizaLogger.debug('Get Prices For Withdraw [USDT]', (await this.collector.getPricesForWithdraw(borrower.data.realPrincipals, JUSDT_TESTNET)).dict);\n                elizaLogger.debug('Get Prices For Withdraw [USDC]', (await this.collector.getPricesForWithdraw(borrower.data.realPrincipals, JUSDC_TESTNET)).dict);\n                let amoundToRepayTON = data.balances.get(TON_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [TON]', new BigNumber(amoundToRepayTON).toFixed(4));\n                let amoundToRepayUSDT = data.balances.get(JUSDT_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [USDT]', new BigNumber(amoundToRepayUSDT).toFixed(2));\n                let amoundToRepayUSDC = data.balances.get(JUSDC_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [USDC]', new BigNumber(amoundToRepayUSDC).toFixed(2));\n\n                // Calculate estimated interest\n                const borrowAmount = typeof params.amount !== \"string\" ? new BigNumber(String(params.amount)) : new BigNumber(params.amount);\n                const tonAsset = params.asset === \"TON\" ? this.TON : params.asset === \"USDT\" ? this.USDT : params.asset === \"USDC\" ? this.USDC : this.TON;\n                if (!tonAsset) {\n                    throw new Error(\"TON asset not found in master data\");\n                }\n                elizaLogger.debug('Borrow amount', borrowAmount.toFixed(4));\n                elizaLogger.debug('Borrow limits',this.borrowLimits);\n                // Calculate estimated rates\n                const assetRates = calculateCurrentRates(tonAsset.config, tonAsset.data, this.masterConstants);\n\n                const { borrowInterest, bRate, now, sRate, supplyInterest } = assetRates;\n                const ONE = 10n ** 13n;\n\n                // Convert the raw annual supply rate into a human‑readable number.\n                // For example, a stored 700000000000 becomes 700000000000 / 1e13 = 0.07 (i.e. 7% APY)\n                const annualInterestRateReadable = Number(sRate) / Number(ONE);\n\n                // Compute the daily rate by dividing the annual rate by 365\n                const dailyInterestRateReadable = annualInterestRateReadable / 365;\n\n                // If you want the “rate” still in fixed‑point (for further on‑chain calculations) you could do:\n                const annualRateFP = sRate;              // already annual, fixed-point 13 decimals\n                const dailyRateFP = sRate / 365n;           // integer division – be aware of rounding\n\n                // To compute the daily interest on a given principal, first decide on the unit and scaling.\n                // For example, if your principal is 10 “tokens” and token amounts are also represented\n                // in 13 decimals, then:\n                const principal = 10n * ONE;  // 10 tokens in fixed-point form\n\n                // Daily interest (in fixed point) = principal * (daily rate) / ONE\n                const dailyInterestFP = (principal * dailyRateFP) / ONE;\n\n                // For display, convert the fixed-point numbers to floating point:\n                function formatFixedPoint(x: bigint, decimals: number = 13): string {\n                  // This converts the integer value to a string with the implied decimal point.\n                  const factor = 10 ** decimals;\n                  return (Number(x) / factor).toFixed(6);\n                }\n\n                // Debugging\n                elizaLogger.debug(\"Borrow Interest\" , borrowInterest.toString());\n                elizaLogger.debug(\"Borrow Rate\" , bRate.toString());\n                elizaLogger.debug(\"Supply Interest\" , supplyInterest.toString());\n                elizaLogger.debug(\"Supply Rate\", sRate.toString());\n                elizaLogger.debug(\"Now\" , now.toString());\n                elizaLogger.debug(\"Annual Interest Rate: \", annualInterestRateReadable.toString()); // e.g. 0.07 for 7%\n                elizaLogger.debug(\"Daily Interest Rate:  \", dailyInterestRateReadable.toString());  // e.g. ~0.0001918 (0.01918% per day)\n                elizaLogger.debug(\"Daily Interest (on 10 tokens):\", formatFixedPoint(dailyInterestFP));\n\n                const annualInterestRate = annualInterestRateReadable;\n                const dailyInterestRate = dailyInterestRateReadable;\n                const dailyInterest = formatFixedPoint(dailyInterestFP);\n\n                // Get price data\n                const priceData = await this.collector.getPrices();\n\n                // get supply message body\n                const supplyMessage = this.evaa.createSupplyMessage({\n                    queryID: 0n,\n                    // we can set always to true, if we don't want to check user code version\n                    includeUserCode: true,\n                    amount: toNano(params.amount),\n                    userAddress: wallet.address,\n                    asset: this.TON.asset,\n                    payload: Cell.EMPTY,\n                    amountToTransfer: toNano(0),\n                });\n\n                // create signed transfer for out wallet with internal message to EVAA Master Contract\n                const signedSupplyMessage = wallet.createTransfer({\n                    seqno: await wallet.getSeqno(),\n                    secretKey: this.walletProvider.keypair.secretKey,\n                    messages: [\n                        internal({\n                            to: this.evaa.address,\n                            value: toNano(params.amount) + FEES.SUPPLY,\n                            body: supplyMessage,\n                        }),\n                    ],\n                    sendMode: SendMode.PAY_GAS_SEPARATELY,\n                    timeout: Math.floor(Date.now() / 1000) + 60,\n                });\n                // send this message. send() method creates external and send it, so\n                // we need to create external message manually for getting its hash\n                await wallet.send(signedSupplyMessage);\n\n                // create external message manually\n                const externalSupplyMessage = beginCell()\n                    .store(\n                        storeMessage(\n                            external({\n                                to: wallet.address,\n                                body: signedSupplyMessage,\n                            }),\n                        ),\n                    )\n                    .endCell();\n\n                await this.evaa.getSync();\n                /*try {\n                    await this.waitForPrincipalChange(wallet.address, this.TON.asset, async () => {\n                        elizaLogger.log(\"Waiting for principal change...\");\n                        await sleep(10000);\n                        return true;\n                    });\n                } catch (error) {\n                    elizaLogger.error(error);\n                }*/\n                await sleep(30000);\n\n\n                // borrow from the EVAA protocol\n                // get supply message body\n                const withdrawMessage = this.evaa.createWithdrawMessage({\n                    queryID: 0n,\n                    // we can set always to true, if we don't want to check user code version\n                    includeUserCode: true,\n                    amount: convertToBigInt(Number(params.amount)*1e6), //0xFFFFFFFFFFFFFFFFn, //toNano(params.amount),\n                    userAddress: wallet.address,\n                    asset: tonAsset.asset,\n                    payload: Cell.EMPTY,\n                    priceData: priceData.dataCell,\n                    amountToTransfer: toNano(0),\n                });\n\n                // create signed transfer for out wallet with internal message to EVAA Master Contract\n                const signedMessage = wallet.createTransfer({\n                    seqno: await wallet.getSeqno(),\n                    secretKey: this.walletProvider.keypair.secretKey,\n                    messages: [\n                        internal({\n                            to: this.evaa.address,\n                            value: toNano(1) + FEES.WITHDRAW,\n                            body: withdrawMessage,\n                        }),\n                    ],\n                    sendMode: SendMode.PAY_GAS_SEPARATELY,\n                    timeout: Math.floor(Date.now() / 1000) + 60,\n                });\n                // send this message. send() method creates external and send it, so\n                // we need to create external message manually for getting its hash\n                await wallet.send(signedMessage);\n\n                // create external message manually\n                const externalMessage = beginCell()\n                    .store(\n                        storeMessage(\n                            external({\n                                to: wallet.address,\n                                body: signedSupplyMessage,\n                            }),\n                        ),\n                    )\n                    .endCell();\n\n                await this.evaa.getSync();\n                await sleep(30000);\n                /*try {\n                    await this.waitForPrincipalChange(wallet.address, tonAsset.asset, async () => {\n                        elizaLogger.log(\"Waiting for principal change...\");\n                        await sleep(10000);\n                        return true;\n                    });\n                } catch (error) {\n                    elizaLogger.error(error);\n                }*/\n\n                // Get transaction hash and explorer URL\n                const txHash = externalMessage.hash().toString('hex');\n                const explorerUrl = `${tonExplorerUrl}/transaction/${txHash}`;\n\n                let amountToRepay = data.balances.get(tonAsset.asset.assetId)!.amount;\n                elizaLogger.debug('Amount to repay', amountToRepay.toString());\n\n                return {\n                    txHash: txHash,\n                    explorerUrl: explorerUrl,\n                    asset: tonAsset.name,\n                    amount: borrowAmount.toString(),\n                    amountToRepay: amountToRepay.toString(),\n                    dailyInterest,\n                    annualInterestRate\n                };\n            }\n\n    }\n}\n\nconst borrowAction: Action = {\n    name: \"EVAA_BORROW\",\n    similes: [\n        \"GET_USDT_LOAN\",\n        \"TAKE_USDT_LOAN\",\n        \"BORROW_USDT\",\n        \"GET_USDC_LOAN\",\n        \"TAKE_USDC_LOAN\",\n        \"BORROW_USDC\",\n        \"GET_TON_LOAN\",\n        \"TAKE_TON_LOAN\",\n        \"BORROW_TON\",\n        \"BORROW_TONCOIN\",\n        \"GET_TONCOIN_LOAN\"\n    ],\n    description: \"Borrow TON, USDT and USDC tokens from the EVAA lending protocol\",\n    validate: async (runtime: IAgentRuntime) => {\n        const walletProvider = await initWalletProvider(runtime);\n        return !!walletProvider.getAddress();\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.info(\"Starting EVAA BORROW handler\");\n\n        try {\n            // Compose context to extract borrowing parameters\n            const borrowContext = composeContext({\n                state,\n                template: borrowTemplate\n            });\n\n            const content = await generateObject({\n                runtime,\n                context: borrowContext,\n                schema: borrowSchema,\n                modelClass: ModelClass.LARGE,\n            });\n\n            const borrowDetails = content.object as BorrowContent;\n            elizaLogger.debug(`Borrow details: ${JSON.stringify(content.object)}`);\n\n            if (!isBorrowContent(borrowDetails)) {\n                throw new Error(\"Invalid borrowing parameters\");\n            }\n\n            const walletProvider = await initWalletProvider(runtime);\n            const action = new BorrowAction(walletProvider);\n            const borrowResult = await action.borrow(borrowDetails, runtime, callback);\n\n            if (callback) {\n                let responseText = `Successfully initiated borrowing of ${borrowDetails.amount} ${borrowResult.asset}.`;\n\n                // Add interest information if requested\n                if (borrowDetails.showInterest) {\n                    const formattedDailyInterest = Number(borrowResult.dailyInterest).toFixed(4);\n                    const formattedAnnualRate = (Number(borrowResult.annualInterestRate) * 100).toFixed(2); //(borrowResult.annualInterestRate * 100).toFixed(2);\n                    responseText += `\\n\\nAmount to Repay: ${Number(borrowResult.amountToRepay).toFixed(4)} ${borrowResult.asset}\\n\\nEstimated Interest:\\n- Daily Interest: ${formattedDailyInterest} ${borrowResult.asset}\\n- Annual Interest Rate: ${formattedAnnualRate}%`;\n                }\n\n                responseText += `\\n\\nTrack the transaction here: ${borrowResult.explorerUrl}`;\n\n                callback({\n                    text: responseText,\n                    metadata: {\n                        txHash: borrowResult.txHash,\n                        explorerUrl: borrowResult.explorerUrl,\n                        asset: borrowResult.asset,\n                        amount: borrowDetails.amount,\n                        amountToRepay: borrowResult.amountToRepay,\n                        dailyInterest: borrowResult.dailyInterest.toString(),\n                        annualInterestRate: borrowResult.annualInterestRate.toString(),\n                        action: \"BORROW\"\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(`Error in EVAA BORROW handler: ${error}`);\n            if (callback) {\n                callback({\n                    text: `Failed to borrow: ${error.message}`,\n                    error: true,\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to borrow 1 TON from the EVAA protocol and see the interest calculation\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll help you borrow 1 TON from the EVAA protocol and show you the interest details. Processing your request...\",\n                    action: \"BORROW_TON\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Can you get me a loan of 0.5 TON from EVAA with user code included?\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll help you borrow 0.5 TON from EVAA with user code included. Processing your request...\",\n                    action: \"BORROW_TON\",\n                },\n            },\n        ],\n    ],\n};\n\nexport default borrowAction;\n","import {\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    elizaLogger,\n    ModelClass,\n    generateObject,\n    composeContext\n} from \"@elizaos/core\";\nimport { sleep, convertToBigInt } from \"../utils/util\";\nimport BigNumber from \"bignumber.js\";\nimport { z } from \"zod\";\nimport evaaPkg from '@evaafi/sdk';\nconst {\n    Evaa,\n    FEES,\n    TON_TESTNET,\n    TESTNET_POOL_CONFIG,\n    JUSDC_TESTNET,\n    JUSDT_TESTNET,\n    UserDataActive,\n    AssetData,\n    BalanceChangeType,\n    calculatePresentValue,\n    calculateCurrentRates,\n    MasterConstants,\n    AssetConfig,\n    ExtendedAssetData,\n    PoolAssetConfig,\n    mulFactor,\n    predictAPY,\n    PricesCollector\n}  = evaaPkg;\n\nimport { Cell, Dictionary, toNano, beginCell, storeMessage, internal, external, SendMode, Address } from '@ton/ton';\nimport {\n    initWalletProvider,\n    type WalletProvider,\n    nativeWalletProvider,\n} from \"../providers/wallet\";\n\nexport const supplySchema = z.object({\n    amount: z.string(),\n    asset: z.string().nullable().optional().transform(val => val === null ? \"TON\" : val),\n    includeUserCode: z.boolean().nullable().optional().transform(val => val === null ? false : val),\n    showInterest: z.boolean().nullable().optional().transform(val => val === null ? false : val),\n});\n\nexport type SupplyContent = z.infer<typeof supplySchema>;\n\n\nfunction isSupplyContent(content: any): content is SupplyContent {\n    return (\n        (typeof content.amount === \"string\" || typeof content.amount === \"number\") &&\n        (content.asset === undefined || typeof content.asset === \"string\") &&\n        (content.includeUserCode === undefined || typeof content.includeUserCode === \"boolean\") &&\n        (content.showInterest === undefined || typeof content.showInterest === \"boolean\")\n    );\n}\n\nconst lendTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"amount\": \"1\",\n    \"asset\": \"USDT\" | \"USDC\" | \"TON\",\n    \"includeUserCode\": true,\n    \"showInterest\": true\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested lending operation:\n- Amount to supply\n- Asset to supply\n- Whether to include user code (optional)\n- Make sure to remove \\`\\`\\`json and \\`\\`\\` from the response\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\ninterface EvaaAsset {\n    name: string;\n    config: typeof AssetConfig;\n    data: typeof ExtendedAssetData;\n    asset: any;\n}\n\nexport class SupplyAction {\n    private walletProvider: WalletProvider;\n    private evaa: typeof Evaa;\n    private assetsData: Dictionary<bigint, typeof ExtendedAssetData>;\n    private assetsConfig: Dictionary<bigint, typeof AssetConfig>;\n    private masterConstants: typeof MasterConstants;\n    private USDT: EvaaAsset;\n    private USDC: EvaaAsset;\n    private TON: EvaaAsset;\n    private totalSupply: bigint;\n    private totalBorrow: bigint;\n    private collector: typeof PricesCollector;\n    borrowInterest: bigint;\n    predictAPY: bigint;\n    withdrawalLimits: Dictionary<bigint, bigint>\n    borrowLimits: Dictionary<bigint, bigint>\n\n    constructor(walletProvider: WalletProvider) {\n        this.walletProvider = walletProvider;\n        this.evaa = null;\n        this.assetsData = null;\n        this.assetsConfig = null;\n        this.masterConstants = null;\n        this.USDT = null;\n        this.USDC = null;\n        this.TON = null;\n        this.totalSupply = null;\n        this.totalBorrow = null;\n        this.borrowInterest = null;\n        this.predictAPY = null;\n        this.collector = null;\n\n        this.withdrawalLimits = null;\n        this.borrowLimits = null;\n    }\n\n    private async waitForPrincipalChange(addr: Address, asset: typeof PoolAssetConfig, func: any, currentEvaa = this.evaa, currentClient = this.walletProvider.getWalletClient()):Promise<{ principal: bigint, data: typeof UserDataActive }> {\n        let prevPrincipal = 0n;\n        let user = currentClient.open(await currentEvaa.openUserContract(addr));\n        await user.getSync(currentEvaa.data!.assetsData, currentEvaa.data!.assetsConfig, (await this.collector.getPrices()).dict);\n\n        if (user.data?.type == \"active\") {\n            prevPrincipal = user.data.principals.get(asset.assetId) ?? 0n;\n        }\n\n        await new Promise( resolve => setTimeout(resolve, 1000) );\n\n        await func();\n\n        while (true) {\n            user = currentClient.open(await currentEvaa.openUserContract(addr));\n            await user.getSync(currentEvaa.data!.assetsData, currentEvaa.data!.assetsConfig, (await this.collector.getPrices()).dict);\n            if (user.data?.type == \"active\") {\n                const principalNow: bigint = user.data.principals.get(asset.assetId) ?? 0n;\n                if (Math.abs(Number(principalNow - prevPrincipal)) > 10) {\n                    return {principal: principalNow, data: user.data};\n                }\n            }\n            await new Promise( resolve => setTimeout(resolve, 4000) );\n        }\n    }\n\n    async supply(params: SupplyContent, runtime: IAgentRuntime, callback: HandlerCallback): Promise<any> {\n\n            // Get wallet instance\n            const walletClient = this.walletProvider.getWalletClient();\n            const wallet = walletClient.open(this.walletProvider.wallet);\n            const tonExplorerUrl = runtime.getSetting(\"TON_EXPLORER_URL\") || \"https://testnet.tonviewer.com/\";\n\n\n            // Initialize EVAA SDK\n            this.evaa = walletClient.open(\n                new Evaa({poolConfig: TESTNET_POOL_CONFIG}),\n            );\n            await this.evaa.getSync();\n\n            this.assetsData = this.evaa.data?.assetsData!;\n            this.assetsConfig = this.evaa.data?.assetsConfig!;\n            this.masterConstants = this.evaa.poolConfig.masterConstants;\n\n            this.USDT = {\n                name: \"USDT\",\n                data: this.assetsData.get(JUSDT_TESTNET.assetId)!,\n                config: this.assetsConfig.get(JUSDT_TESTNET.assetId)!,\n                asset: JUSDT_TESTNET\n            }\n            this.USDC = {\n                name: \"USDC\",\n                data: this.assetsData.get(JUSDC_TESTNET.assetId)!,\n                config: this.assetsConfig.get(JUSDC_TESTNET.assetId)!,\n                asset: JUSDC_TESTNET\n            }\n            this.TON = {\n                name: \"TON\",\n                data: this.assetsData.get(TON_TESTNET.assetId)!,\n                config: this.assetsConfig.get(TON_TESTNET.assetId)!,\n                asset: TON_TESTNET\n            }\n\n            this.totalSupply = calculatePresentValue(this.TON.data.sRate, this.TON.data.totalSupply, this.masterConstants);\n            this.totalBorrow = calculatePresentValue(this.TON.data.bRate, this.TON.data.totalBorrow, this.masterConstants);\n            // Calculate borrow interest\n            this.borrowInterest = this.TON.config.baseBorrowRate +\n            mulFactor(this.masterConstants.FACTOR_SCALE, this.TON.config.borrowRateSlopeLow, this.TON.config.targetUtilization) +\n            mulFactor(\n                this.masterConstants.FACTOR_SCALE,\n                this.TON.config.borrowRateSlopeHigh,\n                this.masterConstants.FACTOR_SCALE - this.TON.config.targetUtilization\n            );\n\n            // Calculate APY\n            this.predictAPY = predictAPY({\n                amount: this.totalBorrow,\n                balanceChangeType: BalanceChangeType.Repay,\n                assetData: this.TON.data,\n                assetConfig: this.TON.config,\n                masterConstants: this.masterConstants\n            });\n\n            // Initialize prices collector\n            this.collector = new PricesCollector(TESTNET_POOL_CONFIG);\n\n            // Get user instance\n            const borrower = walletClient.open(this.evaa.openUserContract(wallet.address));\n            // Fetch user data\n            await borrower.getSync(this.evaa.data!.assetsData, this.evaa.data!.assetsConfig, (await this.collector.getPrices()).dict, true);\n\n            // Check if the user has a active evaa contract\n            const data = (borrower.data as typeof UserDataActive);\n            elizaLogger.log('User data:', data.fullyParsed);\n\n            if (borrower.data?.type != 'active') {\n                elizaLogger.log('Borrower User is inactive');\n                /*if (callback) {\n                    callback({\n                        text: `You need provide collateral funds before you can borrow`,\n                        content: { error: \"No collateral funds provided.\" }\n                    });\n\n                    return false;\n                }*/\n                // Calculate estimated interest\n                const borrowAmount = typeof params.amount !== \"string\" ? new BigNumber(String(params.amount)) : new BigNumber(params.amount);\n                const tonAsset = params.asset === \"TON\" ? this.TON : params.asset === \"USDT\" ? this.USDT : params.asset === \"USDC\" ? this.USDC : this.TON;\n                if (!tonAsset) {\n                    throw new Error(\"TON asset not found in master data\");\n                }\n\n                // get supply message body\n                const supplyMessage = this.evaa.createSupplyMessage({\n                    queryID: 0n,\n                    // we can set always to true, if we don't want to check user code version\n                    includeUserCode: true,\n                    amount: tonAsset.name === \"TON\" ? toNano(params.amount) : convertToBigInt(Number(params.amount)*1e6),\n                    userAddress: wallet.address,\n                    asset: tonAsset.asset,\n                    payload: Cell.EMPTY,\n                    amountToTransfer: toNano(0),\n                });\n\n                // create signed transfer for out wallet with internal message to EVAA Master Contract\n                const signedSupplyMessage = wallet.createTransfer({\n                    seqno: await wallet.getSeqno(),\n                    secretKey: this.walletProvider.keypair.secretKey,\n                    messages: [\n                        internal({\n                            to: this.evaa.address,\n                            value: toNano(params.amount) + FEES.SUPPLY,\n                            body: supplyMessage,\n                        }),\n                    ],\n                    sendMode: SendMode.PAY_GAS_SEPARATELY,\n                    timeout: Math.floor(Date.now() / 1000) + 60,\n                });\n                // send this message. send() method creates external and send it, so\n                // we need to create external message manually for getting its hash\n                await wallet.send(signedSupplyMessage);\n\n                // create external message manually\n                const externalSupplyMessage = beginCell()\n                    .store(\n                        storeMessage(\n                            external({\n                                to: wallet.address,\n                                body: signedSupplyMessage,\n                            }),\n                        ),\n                    )\n                    .endCell();\n\n                await this.evaa.getSync();\n                /*try {\n                    await this.waitForPrincipalChange(wallet.address, this.TON.asset, async () => {\n                        elizaLogger.log(\"Waiting for principal change...\");\n                        await sleep(10000);\n                        return true;\n                    });\n                } catch (error) {\n                    elizaLogger.error(error);\n                }*/\n                await sleep(30000);\n\n                // Get transaction hash and explorer URL\n                const txHash = externalSupplyMessage.hash().toString('hex');\n                const explorerUrl = `${tonExplorerUrl}/transaction/${txHash}`;\n\n                //let amountToRepay = data.balances.get(tonAsset.asset.assetId)!.amount;\n                //elizaLogger.debug('Amount to repay', amountToRepay.toString());\n\n                return {\n                    txHash: txHash,\n                    explorerUrl: explorerUrl,\n                    asset: tonAsset.name,\n                    amount: borrowAmount.toString(),\n                    amountToRepay: 0,\n                    dailyInterest: 0,\n                    annualInterestRate: 0\n                };\n\n\n            } else {\n\n                this.withdrawalLimits = borrower.data.withdrawalLimits;\n                this.borrowLimits = borrower.data.borrowLimits;\n                elizaLogger.debug('User principals');\n                elizaLogger.debug('Real Principals', borrower.data.realPrincipals);\n                elizaLogger.debug('User Principal', borrower.data.principals);\n                elizaLogger.debug('Get Prices For Withdraw [USDT]', (await this.collector.getPricesForWithdraw(borrower.data.realPrincipals, JUSDT_TESTNET)).dict);\n                elizaLogger.debug('Get Prices For Withdraw [USDC]', (await this.collector.getPricesForWithdraw(borrower.data.realPrincipals, JUSDC_TESTNET)).dict);\n                let amoundToRepayTON = data.balances.get(TON_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [TON]', new BigNumber(amoundToRepayTON).toFixed(4));\n                let amoundToRepayUSDT = data.balances.get(JUSDT_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [USDT]', new BigNumber(amoundToRepayUSDT).toFixed(2));\n                let amoundToRepayUSDC = data.balances.get(JUSDC_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [USDC]', new BigNumber(amoundToRepayUSDC).toFixed(2));\n\n                // Calculate estimated interest\n                const borrowAmount = typeof params.amount !== \"string\" ? new BigNumber(String(params.amount)) : new BigNumber(params.amount);\n                const tonAsset = params.asset === \"TON\" ? this.TON : params.asset === \"USDT\" ? this.USDT : params.asset === \"USDC\" ? this.USDC : this.TON;\n                if (!tonAsset) {\n                    throw new Error(\"TON asset not found in master data\");\n                }\n                elizaLogger.debug('Borrow amount', borrowAmount.toFixed(4));\n                elizaLogger.debug('Borrow limits',this.borrowLimits);\n                // Calculate estimated rates\n                const assetRates = calculateCurrentRates(tonAsset.config, tonAsset.data, this.masterConstants);\n\n                const { borrowInterest, bRate, now, sRate, supplyInterest } = assetRates;\n                const ONE = 10n ** 13n;\n\n                // Convert the raw annual supply rate into a human‑readable number.\n                // For example, a stored 700000000000 becomes 700000000000 / 1e13 = 0.07 (i.e. 7% APY)\n                const annualInterestRateReadable = Number(sRate) / Number(ONE);\n\n                // Compute the daily rate by dividing the annual rate by 365\n                const dailyInterestRateReadable = annualInterestRateReadable / 365;\n\n                // If you want the “rate” still in fixed‑point (for further on‑chain calculations) you could do:\n                const annualRateFP = sRate;              // already annual, fixed-point 13 decimals\n                const dailyRateFP = sRate / 365n;           // integer division – be aware of rounding\n\n                // To compute the daily interest on a given principal, first decide on the unit and scaling.\n                // For example, if your principal is 10 “tokens” and token amounts are also represented\n                // in 13 decimals, then:\n                const principal = 10n * ONE;  // 10 tokens in fixed-point form\n\n                // Daily interest (in fixed point) = principal * (daily rate) / ONE\n                const dailyInterestFP = (principal * dailyRateFP) / ONE;\n\n                // For display, convert the fixed-point numbers to floating point:\n                function formatFixedPoint(x: bigint, decimals: number = 13): string {\n                  // This converts the integer value to a string with the implied decimal point.\n                  const factor = 10 ** decimals;\n                  return (Number(x) / factor).toFixed(6);\n                }\n\n                // Debugging\n                elizaLogger.debug(\"Borrow Interest\" , borrowInterest.toString());\n                elizaLogger.debug(\"Borrow Rate\" , bRate.toString());\n                elizaLogger.debug(\"Supply Interest\" , supplyInterest.toString());\n                elizaLogger.debug(\"Supply Rate\", sRate.toString());\n                elizaLogger.debug(\"Now\" , now.toString());\n                elizaLogger.debug(\"Annual Interest Rate: \", annualInterestRateReadable.toString()); // e.g. 0.07 for 7%\n                elizaLogger.debug(\"Daily Interest Rate:  \", dailyInterestRateReadable.toString());  // e.g. ~0.0001918 (0.01918% per day)\n                elizaLogger.debug(\"Daily Interest (on 10 tokens):\", formatFixedPoint(dailyInterestFP));\n\n                const annualInterestRate = annualInterestRateReadable;\n                const dailyInterestRate = dailyInterestRateReadable;\n                const dailyInterest = formatFixedPoint(dailyInterestFP);\n\n                // Get price data\n                const priceData = await this.collector.getPrices();\n\n                // get supply message body\n                const supplyMessage = this.evaa.createSupplyMessage({\n                    queryID: 0n,\n                    // we can set always to true, if we don't want to check user code version\n                    includeUserCode: true,\n                    amount: tonAsset.name === \"TON\" ? toNano(params.amount) : convertToBigInt(Number(params.amount)*1e6),\n                    userAddress: wallet.address,\n                    asset: tonAsset.asset,\n                    payload: Cell.EMPTY,\n                    amountToTransfer: toNano(0),\n                });\n\n                // create signed transfer for out wallet with internal message to EVAA Master Contract\n                const signedSupplyMessage = wallet.createTransfer({\n                    seqno: await wallet.getSeqno(),\n                    secretKey: this.walletProvider.keypair.secretKey,\n                    messages: [\n                        internal({\n                            to: this.evaa.address,\n                            value: toNano(params.amount) + FEES.SUPPLY,\n                            body: supplyMessage,\n                        }),\n                    ],\n                    sendMode: SendMode.PAY_GAS_SEPARATELY,\n                    timeout: Math.floor(Date.now() / 1000) + 60,\n                });\n                // send this message. send() method creates external and send it, so\n                // we need to create external message manually for getting its hash\n                await wallet.send(signedSupplyMessage);\n\n                // create external message manually\n                const externalSupplyMessage = beginCell()\n                    .store(\n                        storeMessage(\n                            external({\n                                to: wallet.address,\n                                body: signedSupplyMessage,\n                            }),\n                        ),\n                    )\n                    .endCell();\n\n                await this.evaa.getSync();\n                /*try {\n                    await this.waitForPrincipalChange(wallet.address, this.TON.asset, async () => {\n                        elizaLogger.log(\"Waiting for principal change...\");\n                        await sleep(10000);\n                        return true;\n                    });\n                } catch (error) {\n                    elizaLogger.error(error);\n                }*/\n                await sleep(30000);\n\n                // Get transaction hash and explorer URL\n                const txHash = externalSupplyMessage.hash().toString('hex');\n                const explorerUrl = `${tonExplorerUrl}/transaction/${txHash}`;\n\n                let amountToRepay = data.balances.get(tonAsset.asset.assetId)!.amount;\n                elizaLogger.debug('Amount to repay', amountToRepay.toString());\n\n                return {\n                    txHash: txHash,\n                    explorerUrl: explorerUrl,\n                    asset: tonAsset.name,\n                    amount: borrowAmount.toString(),\n                    amountToRepay: amountToRepay.toString(),\n                    dailyInterest,\n                    annualInterestRate\n                };\n            }\n\n    }\n}\n\n\nconst supplyAction: Action = {\n    name: \"EVAA_SUPPLY\",\n    similes: [\n        \"LEND\",\n        \"LEND_TON\",\n        \"SUPPLY_TON\",\n        \"DEPOSIT_TON\",\n        \"LEND_USDT\",\n        \"SUPPLY_USDT\",\n        \"DEPOSIT_USDT\",\n        \"LEND_USDC\",\n        \"SUPPLY_USDC\",\n        \"DEPOSIT_USDC\",\n        \"LEND_TONCOIN\",\n        \"SUPPLY_TONCOIN\"\n    ],\n    description: \"Supply/lend TON, USDT and USDC tokens to the EVAA lending protocol\",\n    validate: async (runtime: IAgentRuntime) => {\n        const walletProvider = await initWalletProvider(runtime);\n        return !!walletProvider.getAddress();\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.info(\"Starting SUPPLY EVAA handler\");\n\n        try {\n            // Compose context to extract lending parameters\n            const supplyContext = composeContext({\n                state,\n                template: lendTemplate\n            });\n\n            const content = await generateObject({\n                runtime,\n                context: supplyContext,\n                schema: supplySchema,\n                modelClass: ModelClass.LARGE,\n            });\n\n            const supplyDetails = content.object as SupplyContent;\n            elizaLogger.debug(`Supply details: ${JSON.stringify(content.object)}`);\n\n            if (!isSupplyContent(supplyDetails)) {\n                throw new Error(\"Invalid supplying parameters\");\n            }\n\n            const walletProvider = await initWalletProvider(runtime);\n            const action = new SupplyAction(walletProvider);\n            const supplyResult = await action.supply(supplyDetails, runtime, callback);\n\n            if (callback) {\n                let responseText = `Successfully initiated supplying of ${supplyDetails.amount} ${supplyResult.asset}.`;\n\n                // Add interest information if requested\n                if (supplyDetails.showInterest) {\n                    const formattedDailyInterest = Number(supplyResult.dailyInterest).toFixed(4);\n                    const formattedAnnualRate = (Number(supplyResult.annualInterestRate) * 100).toFixed(2); //(supplyResult.annualInterestRate * 100).toFixed(2);\n                    responseText += `\\n\\nEstimated Interest:\\n- Daily Interest: ${formattedDailyInterest} ${supplyResult.asset}\\n- Annual Interest Rate: ${formattedAnnualRate}%`;\n                }\n\n                responseText += `\\n\\nTrack the transaction here: ${supplyResult.explorerUrl}`;\n\n                callback({\n                    text: responseText,\n                    metadata: {\n                        txHash: supplyResult.txHash,\n                        explorerUrl: supplyResult.explorerUrl,\n                        asset: supplyResult.asset,\n                        amount: supplyDetails.amount,\n                        amountToRepay: supplyResult.amountToRepay,\n                        dailyInterest: supplyResult.dailyInterest.toString(),\n                        annualInterestRate: supplyResult.annualInterestRate.toString(),\n                        action: \"SUPPLY\"\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error in LEND_TON handler:\", error);\n            if (callback) {\n                callback({\n                    text: `Failed to lend TON: ${error.message}`,\n                    error: true,\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to supply 1 TON to the EVAA protocol\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll help you supply 1 TON to the EVAA protocol. Processing your request...\",\n                    action: \"SUPPLY\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Can you lend 0.5 TON to EVAA with user code included?\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll help you lend 0.5 TON to EVAA with user code included. Processing your request...\",\n                    action: \"LEND\",\n                },\n            },\n        ],\n    ],\n};\n\nexport default supplyAction;\n","import {\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    elizaLogger,\n    ModelClass,\n    generateObject,\n    composeContext\n} from \"@elizaos/core\";\nimport { sleep, convertToBigInt } from \"../utils/util\";\nimport BigNumber from \"bignumber.js\";\nimport { z } from \"zod\";\nimport evaaPkg from '@evaafi/sdk';\nconst {\n    Evaa,\n    FEES,\n    TON_TESTNET,\n    TESTNET_POOL_CONFIG,\n    JUSDC_TESTNET,\n    JUSDT_TESTNET,\n    UserDataActive,\n    AssetData,\n    BalanceChangeType,\n    calculatePresentValue,\n    calculateCurrentRates,\n    MasterConstants,\n    AssetConfig,\n    ExtendedAssetData,\n    PoolAssetConfig,\n    mulFactor,\n    predictAPY,\n    PricesCollector\n}  = evaaPkg;\n\nimport { Cell, Dictionary, toNano, beginCell, storeMessage, internal, external, SendMode, Address } from '@ton/ton';\nimport {\n    initWalletProvider,\n    type WalletProvider,\n    nativeWalletProvider,\n} from \"../providers/wallet\";\n\nexport const withdrawSchema = z.object({\n    amount: z.string(),\n    asset: z.string().nullable().optional().transform(val => val === null ? \"TON\" : val),\n    includeUserCode: z.boolean().nullable().optional().transform(val => val === null ? false : val),\n    showInterest: z.boolean().nullable().optional().transform(val => val === null ? false : val),\n});\n\nexport type WithdrawContent = z.infer<typeof withdrawSchema>;\n\nfunction isWithdrawContent(content: any): content is WithdrawContent {\n    return (\n        (typeof content.amount === \"string\" || typeof content.amount === \"number\") &&\n        (content.asset === undefined || typeof content.asset === \"string\") &&\n        (content.includeUserCode === undefined || typeof content.includeUserCode === \"boolean\") &&\n        (content.showInterest === undefined || typeof content.showInterest === \"boolean\")\n    );\n}\n\nconst withdrawTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"amount\": \"1\",\n    \"asset\": \"USDT\" | \"USDC\" | \"TON\",\n    \"includeUserCode\": true,\n    \"showInterest\": true\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested withdrawal operation:\n- Amount to withdraw\n- Asset to withdraw\n- Whether to include user code (optional)\n- Whether to show interest calculation (optional)\n- Make sure to remove \\`\\`\\`json and \\`\\`\\` from the response\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\ninterface EvaaAsset {\n    name: string;\n    config: typeof AssetConfig;\n    data: typeof ExtendedAssetData;\n    asset: any;\n}\n\nexport class WithdrawAction {\n    private walletProvider: WalletProvider;\n    private evaa: typeof Evaa;\n    private assetsData: Dictionary<bigint, typeof ExtendedAssetData>;\n    private assetsConfig: Dictionary<bigint, typeof AssetConfig>;\n    private masterConstants: typeof MasterConstants;\n    private USDT: EvaaAsset;\n    private USDC: EvaaAsset;\n    private TON: EvaaAsset;\n\n    private totalSupply: bigint;\n    private totalBorrow: bigint;\n    private collector: typeof PricesCollector;\n    borrowInterest: bigint;\n    predictAPY: bigint;\n    withdrawalLimits: Dictionary<bigint, bigint>\n    borrowLimits: Dictionary<bigint, bigint>\n\n    constructor(walletProvider: WalletProvider) {\n        this.walletProvider = walletProvider;\n        this.evaa = null;\n        this.assetsData = null;\n        this.assetsConfig = null;\n        this.masterConstants = null;\n        this.USDT = null;\n        this.USDC = null;\n        this.TON = null;\n        this.totalSupply = null;\n        this.totalBorrow = null;\n        this.borrowInterest = null;\n        this.predictAPY = null;\n        this.collector = null;\n\n        this.withdrawalLimits = null;\n        this.borrowLimits = null;\n    }\n\n    private async waitForPrincipalChange(addr: Address, asset: typeof PoolAssetConfig, func: any, currentEvaa = this.evaa, currentClient = this.walletProvider.getWalletClient()):Promise<{ principal: bigint, data: typeof UserDataActive }> {\n        let prevPrincipal = 0n;\n        let user = currentClient.open(await currentEvaa.openUserContract(addr));\n        await user.getSync(currentEvaa.data!.assetsData, currentEvaa.data!.assetsConfig, (await this.collector.getPrices()).dict);\n\n        if (user.data?.type == \"active\") {\n            prevPrincipal = user.data.principals.get(asset.assetId) ?? 0n;\n        }\n\n        await new Promise( resolve => setTimeout(resolve, 1000) );\n\n        await func();\n\n        while (true) {\n            user = currentClient.open(await currentEvaa.openUserContract(addr));\n            await user.getSync(currentEvaa.data!.assetsData, currentEvaa.data!.assetsConfig, (await this.collector.getPrices()).dict);\n            if (user.data?.type == \"active\") {\n                const principalNow: bigint = user.data.principals.get(asset.assetId) ?? 0n;\n                if (Math.abs(Number(principalNow - prevPrincipal)) > 10) {\n                    return {principal: principalNow, data: user.data};\n                }\n            }\n            await new Promise( resolve => setTimeout(resolve, 4000) );\n        }\n    }\n\n    async withdraw(params: WithdrawContent, runtime: IAgentRuntime, callback: HandlerCallback): Promise<any> {\n\n            // Get wallet instance\n            const walletClient = this.walletProvider.getWalletClient();\n            const wallet = walletClient.open(this.walletProvider.wallet);\n            const tonExplorerUrl = runtime.getSetting(\"TON_EXPLORER_URL\") || \"https://testnet.tonviewer.com/\";\n\n            // Initialize EVAA SDK\n            this.evaa = walletClient.open(\n                new Evaa({poolConfig: TESTNET_POOL_CONFIG}),\n            );\n            await this.evaa.getSync();\n\n            this.assetsData = this.evaa.data?.assetsData!;\n            this.assetsConfig = this.evaa.data?.assetsConfig!;\n            this.masterConstants = this.evaa.poolConfig.masterConstants;\n\n            this.USDT = {\n                name: \"USDT\",\n                data: this.assetsData.get(JUSDT_TESTNET.assetId)!,\n                config: this.assetsConfig.get(JUSDT_TESTNET.assetId)!,\n                asset: JUSDT_TESTNET\n            }\n            this.USDC = {\n                name: \"USDC\",\n                data: this.assetsData.get(JUSDC_TESTNET.assetId)!,\n                config: this.assetsConfig.get(JUSDC_TESTNET.assetId)!,\n                asset: JUSDC_TESTNET\n            }\n            this.TON = {\n                name: \"TON\",\n                data: this.assetsData.get(TON_TESTNET.assetId)!,\n                config: this.assetsConfig.get(TON_TESTNET.assetId)!,\n                asset: TON_TESTNET\n            }\n\n            this.totalSupply = calculatePresentValue(this.TON.data.sRate, this.TON.data.totalSupply, this.masterConstants);\n            this.totalBorrow = calculatePresentValue(this.TON.data.bRate, this.TON.data.totalBorrow, this.masterConstants);\n            // Calculate borrow interest\n            this.borrowInterest = this.TON.config.baseBorrowRate +\n            mulFactor(this.masterConstants.FACTOR_SCALE, this.TON.config.borrowRateSlopeLow, this.TON.config.targetUtilization) +\n            mulFactor(\n                this.masterConstants.FACTOR_SCALE,\n                this.TON.config.borrowRateSlopeHigh,\n                this.masterConstants.FACTOR_SCALE - this.TON.config.targetUtilization\n            );\n\n            // Calculate APY\n            this.predictAPY = predictAPY({\n                amount: this.totalBorrow,\n                balanceChangeType: BalanceChangeType.Repay,\n                assetData: this.TON.data,\n                assetConfig: this.TON.config,\n                masterConstants: this.masterConstants\n            });\n\n            // Initialize prices collector\n            this.collector = new PricesCollector(TESTNET_POOL_CONFIG);\n\n            // Get user instance\n            const borrower = walletClient.open(this.evaa.openUserContract(wallet.address));\n            // Fetch user data\n            await borrower.getSync(this.evaa.data!.assetsData, this.evaa.data!.assetsConfig, (await this.collector.getPrices()).dict, true);\n\n            // Check if the user has a active evaa contract\n            const data = (borrower.data as typeof UserDataActive);\n            elizaLogger.log('User data:', data.fullyParsed);\n\n            if (borrower.data?.type != 'active') {\n                elizaLogger.log('Borrower User is inactive');\n                if (callback) {\n                    callback({\n                        text: `You need provide collateral funds before you can borrow`,\n                        content: { error: \"No collateral funds provided.\" }\n                    });\n\n                    return false;\n                }\n            } else {\n\n                this.withdrawalLimits = borrower.data.withdrawalLimits;\n                this.borrowLimits = borrower.data.borrowLimits;\n                elizaLogger.debug('User principals');\n                elizaLogger.debug('Real Principals', borrower.data.realPrincipals);\n                elizaLogger.debug('User Principal', borrower.data.principals);\n                elizaLogger.debug('Get Prices For Withdraw [USDT]', (await this.collector.getPricesForWithdraw(borrower.data.realPrincipals, JUSDT_TESTNET)).dict);\n                elizaLogger.debug('Get Prices For Withdraw [USDC]', (await this.collector.getPricesForWithdraw(borrower.data.realPrincipals, JUSDC_TESTNET)).dict);\n                let amoundToRepayTON = data.balances.get(TON_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [TON]', new BigNumber(amoundToRepayTON).toFixed(4));\n                let amoundToRepayUSDT = data.balances.get(JUSDT_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [USDT]', new BigNumber(amoundToRepayUSDT).toFixed(2));\n                let amoundToRepayUSDC = data.balances.get(JUSDC_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [USDC]', new BigNumber(amoundToRepayUSDC).toFixed(2));\n\n                // Calculate estimated interest\n                const borrowAmount = typeof params.amount !== \"string\" ? new BigNumber(String(params.amount)) : new BigNumber(params.amount);\n                const tonAsset = params.asset === \"TON\" ? this.TON : params.asset === \"USDT\" ? this.USDT : params.asset === \"USDC\" ? this.USDC : this.TON;\n                if (!tonAsset) {\n                    throw new Error(\"TON asset not found in master data\");\n                }\n                elizaLogger.debug('Borrow amount', borrowAmount.toFixed(4));\n                elizaLogger.debug('Borrow limits',this.borrowLimits);\n                // Calculate estimated rates\n                const assetRates = calculateCurrentRates(tonAsset.config, tonAsset.data, this.masterConstants);\n\n                const { borrowInterest, bRate, now, sRate, supplyInterest } = assetRates;\n                const ONE = 10n ** 13n;\n\n                // Convert the raw annual supply rate into a human‑readable number.\n                // For example, a stored 700000000000 becomes 700000000000 / 1e13 = 0.07 (i.e. 7% APY)\n                const annualInterestRateReadable = Number(sRate) / Number(ONE);\n\n                // Compute the daily rate by dividing the annual rate by 365\n                const dailyInterestRateReadable = annualInterestRateReadable / 365;\n\n                // If you want the “rate” still in fixed‑point (for further on‑chain calculations) you could do:\n                const annualRateFP = sRate;              // already annual, fixed-point 13 decimals\n                const dailyRateFP = sRate / 365n;           // integer division – be aware of rounding\n\n                // To compute the daily interest on a given principal, first decide on the unit and scaling.\n                // For example, if your principal is 10 “tokens” and token amounts are also represented\n                // in 13 decimals, then:\n                const principal = 10n * ONE;  // 10 tokens in fixed-point form\n\n                // Daily interest (in fixed point) = principal * (daily rate) / ONE\n                const dailyInterestFP = (principal * dailyRateFP) / ONE;\n\n                // For display, convert the fixed-point numbers to floating point:\n                function formatFixedPoint(x: bigint, decimals: number = 13): string {\n                  // This converts the integer value to a string with the implied decimal point.\n                  const factor = 10 ** decimals;\n                  return (Number(x) / factor).toFixed(6);\n                }\n\n                // Debugging\n                elizaLogger.debug(\"Borrow Interest\" , borrowInterest.toString());\n                elizaLogger.debug(\"Borrow Rate\" , bRate.toString());\n                elizaLogger.debug(\"Supply Interest\" , supplyInterest.toString());\n                elizaLogger.debug(\"Supply Rate\", sRate.toString());\n                elizaLogger.debug(\"Now\" , now.toString());\n                elizaLogger.debug(\"Annual Interest Rate: \", annualInterestRateReadable.toString()); // e.g. 0.07 for 7%\n                elizaLogger.debug(\"Daily Interest Rate:  \", dailyInterestRateReadable.toString());  // e.g. ~0.0001918 (0.01918% per day)\n                elizaLogger.debug(\"Daily Interest (on 10 tokens):\", formatFixedPoint(dailyInterestFP));\n\n                const annualInterestRate = annualInterestRateReadable;\n                const dailyInterestRate = dailyInterestRateReadable;\n                const dailyInterest = formatFixedPoint(dailyInterestFP);\n\n                // Get price data\n                const priceData = await this.collector.getPrices();\n\n                // withdraw from the EVAA protocol\n                // get withdraw message body\n                const withdrawMessage = this.evaa.createWithdrawMessage({\n                    queryID: 0n,\n                    // we can set always to true, if we don't want to check user code version\n                    includeUserCode: true,\n                    amount: tonAsset.name === \"TON\" ? toNano(params.amount) : convertToBigInt(Number(params.amount)*1e6), //0xFFFFFFFFFFFFFFFFn,\n                    userAddress: wallet.address,\n                    asset: tonAsset.asset,\n                    payload: Cell.EMPTY,\n                    priceData: priceData.dataCell,\n                    amountToTransfer: toNano(0),\n                });\n\n                // create signed transfer for out wallet with internal message to EVAA Master Contract\n                const signedMessage = wallet.createTransfer({\n                    seqno: await wallet.getSeqno(),\n                    secretKey: this.walletProvider.keypair.secretKey,\n                    messages: [\n                        internal({\n                            to: this.evaa.address,\n                            value: toNano(1) + FEES.WITHDRAW,\n                            body: withdrawMessage,\n                        }),\n                    ],\n                    sendMode: SendMode.PAY_GAS_SEPARATELY,\n                    timeout: Math.floor(Date.now() / 1000) + 60,\n                });\n                // send this message. send() method creates external and send it, so\n                // we need to create external message manually for getting its hash\n                await wallet.send(signedMessage);\n\n                // create external message manually\n                const externalMessage = beginCell()\n                    .store(\n                        storeMessage(\n                            external({\n                                to: wallet.address,\n                                body: signedMessage,\n                            }),\n                        ),\n                    )\n                    .endCell();\n\n                await this.evaa.getSync();\n                await sleep(30000);\n                /*try {\n                    await this.waitForPrincipalChange(wallet.address, tonAsset.asset, async () => {\n                        elizaLogger.log(\"Waiting for principal change...\");\n                        await sleep(10000);\n                        return true;\n                    });\n                } catch (error) {\n                    elizaLogger.error(error);\n                }*/\n\n                // Get transaction hash and explorer URL\n                const txHash = externalMessage.hash().toString('hex');\n                const explorerUrl = `${tonExplorerUrl}/transaction/${txHash}`;\n\n                let amountToRepay = data.balances.get(tonAsset.asset.assetId)!.amount;\n                elizaLogger.debug('Amount to repay', amountToRepay.toString());\n\n                return {\n                    txHash: txHash,\n                    explorerUrl: explorerUrl,\n                    asset: tonAsset.name,\n                    amount: borrowAmount.toString(),\n                    amountToRepay: amountToRepay.toString(),\n                    dailyInterest,\n                    annualInterestRate\n                };\n            }\n\n    }\n}\n\nconst withdrawAction: Action = {\n    name: \"EVAA_WITHDRAW\",\n    similes: [\n        \"WITHDRAW_TON\",\n        \"WITHDRAW_USDT\",\n        \"WITHDRAW_USDC\",\n        \"REDEEM_TON\",\n        \"REMOVE_TON\",\n        \"WITHDRAW_TONCOIN\",\n        \"REDEEM_TONCOIN\"\n    ],\n    description: \"Withdraw TON tokens from the EVAA lending protocol\",\n    validate: async (runtime: IAgentRuntime) => {\n        const walletProvider = await initWalletProvider(runtime);\n        return !!walletProvider.getAddress();\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.info(\"Starting WITHDRAW FROM EVAA handler\");\n\n        try {\n            // Compose context to extract withdrawal parameters\n            const withdrawContext = composeContext({\n                state,\n                template: withdrawTemplate\n            });\n\n            const content = await generateObject({\n                runtime,\n                context: withdrawContext,\n                schema: withdrawSchema,\n                modelClass: ModelClass.LARGE,\n            });\n\n            const withdrawDetails = content.object as WithdrawContent;\n            elizaLogger.debug(`Withdraw details: ${JSON.stringify(content.object)}`);\n\n            if (!isWithdrawContent(withdrawDetails)) {\n                throw new Error(\"Invalid withdrawing parameters\");\n            }\n\n            const walletProvider = await initWalletProvider(runtime);\n            const action = new WithdrawAction(walletProvider);\n            const withdrawResult = await action.withdraw(withdrawDetails, runtime, callback);\n\n            if (callback) {\n                let responseText = `Successfully initiated withdrawing of ${withdrawDetails.amount} ${withdrawResult.asset}.`;\n\n                // Add interest information if requested\n                if (withdrawDetails.showInterest) {\n                    const formattedDailyInterest = Number(withdrawResult.dailyInterest).toFixed(4);\n                    const formattedAnnualRate = (Number(withdrawResult.annualInterestRate) * 100).toFixed(2); //(withdrawResult.annualInterestRate * 100).toFixed(2);\n                    responseText += `\\n\\nAmount to Repay: ${Number(withdrawResult.amountToRepay).toFixed(4)} ${withdrawResult.asset}\\n\\nEstimated Interest:\\n- Daily Interest: ${formattedDailyInterest} ${withdrawResult.asset}\\n- Annual Interest Rate: ${formattedAnnualRate}%`;\n                }\n\n                responseText += `\\n\\nTrack the transaction here: ${withdrawResult.explorerUrl}`;\n\n                callback({\n                    text: responseText,\n                    metadata: {\n                        txHash: withdrawResult.txHash,\n                        explorerUrl: withdrawResult.explorerUrl,\n                        asset: withdrawResult.asset,\n                        amount: withdrawDetails.amount,\n                        amountToRepay: withdrawResult.amountToRepay,\n                        dailyInterest: withdrawResult.dailyInterest.toString(),\n                        annualInterestRate: withdrawResult.annualInterestRate.toString(),\n                        action: \"WITHDRAW\"\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error in WITHDRAW_TON handler:\", error);\n            if (callback) {\n                callback({\n                    text: `Failed to withdraw TON: ${error.message}`,\n                    error: true,\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to withdraw 1 TON from the EVAA protocol\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll help you withdraw 1 TON from the EVAA protocol. Processing your request...\",\n                    action: \"WITHDRAW_TON\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Can you withdraw 0.5 TON from EVAA with user code included?\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll help you withdraw 0.5 TON from EVAA with user code included. Processing your request...\",\n                    action: \"WITHDRAW_TON\",\n                },\n            },\n        ],\n    ],\n};\n\nexport default withdrawAction;\n","import {\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    elizaLogger,\n    ModelClass,\n    generateObject,\n    composeContext\n} from \"@elizaos/core\";\nimport { sleep, convertToBigInt } from \"../utils/util\";\nimport BigNumber from \"bignumber.js\";\nimport { z } from \"zod\";\nimport evaaPkg from '@evaafi/sdk';\nconst {\n    Evaa,\n    FEES,\n    TON_TESTNET,\n    TESTNET_POOL_CONFIG,\n    JUSDC_TESTNET,\n    JUSDT_TESTNET,\n    UserDataActive,\n    AssetData,\n    BalanceChangeType,\n    calculatePresentValue,\n    calculateCurrentRates,\n    MasterConstants,\n    AssetConfig,\n    ExtendedAssetData,\n    PoolAssetConfig,\n    mulFactor,\n    predictAPY,\n    PricesCollector\n}  = evaaPkg;\n\nimport { Cell, Dictionary, toNano, beginCell, storeMessage, internal, external, SendMode, Address } from '@ton/ton';\nimport {\n    initWalletProvider,\n    type WalletProvider,\n    nativeWalletProvider,\n} from \"../providers/wallet\";\n\nexport const repaySchema = z.object({\n    asset: z.string().nullable().optional().transform(val => val === null ? \"TON\" : val),\n    includeUserCode: z.boolean().nullable().optional().transform(val => val === null ? false : val),\n});\n\nexport type RepayContent = z.infer<typeof repaySchema>;\nfunction isRepayContent(content: any): content is RepayContent {\n    return (\n        (typeof content.asset === undefined || typeof content.asset === \"string\") &&\n        (content.includeUserCode === undefined || typeof content.includeUserCode === \"boolean\")\n    );\n}\n\nconst repayTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"asset\": \"USDT\" | \"USDC\" | \"TON\",\n    \"includeUserCode\": true\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested total repayment operation:\n- Asset to repay\n- Whether to include user code (optional)\n- Make sure to remove \\`\\`\\`json and \\`\\`\\` from the response\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\ninterface EvaaAsset {\n    name: string;\n    config: typeof AssetConfig;\n    data: typeof ExtendedAssetData;\n    asset: any;\n}\n\nexport class RepayAction {\n    private walletProvider: WalletProvider;\n    private evaa: typeof Evaa;\n    private assetsData: Dictionary<bigint, typeof ExtendedAssetData>;\n    private assetsConfig: Dictionary<bigint, typeof AssetConfig>;\n    private masterConstants: typeof MasterConstants;\n    private USDT: EvaaAsset;\n    private USDC: EvaaAsset;\n    private TON: EvaaAsset;\n    private totalSupply: bigint;\n    private totalBorrow: bigint;\n    private collector: typeof PricesCollector;\n    borrowInterest: bigint;\n    predictAPY: bigint;\n    withdrawalLimits: Dictionary<bigint, bigint>\n    borrowLimits: Dictionary<bigint, bigint>\n\n    constructor(walletProvider: WalletProvider) {\n        this.walletProvider = walletProvider;\n        this.evaa = null;\n        this.assetsData = null;\n        this.assetsConfig = null;\n        this.masterConstants = null;\n        this.USDT = null;\n        this.USDC = null;\n        this.TON = null;\n        this.totalSupply = null;\n        this.totalBorrow = null;\n        this.borrowInterest = null;\n        this.predictAPY = null;\n        this.collector = null;\n\n        this.withdrawalLimits = null;\n        this.borrowLimits = null;\n    }\n\n    private async waitForPrincipalChange(addr: Address, asset: typeof PoolAssetConfig, func: any, currentEvaa = this.evaa, currentClient = this.walletProvider.getWalletClient()):Promise<{ principal: bigint, data: typeof UserDataActive }> {\n        let prevPrincipal = 0n;\n        let user = currentClient.open(await currentEvaa.openUserContract(addr));\n        await user.getSync(currentEvaa.data!.assetsData, currentEvaa.data!.assetsConfig, (await this.collector.getPrices()).dict);\n\n        if (user.data?.type == \"active\") {\n            prevPrincipal = user.data.principals.get(asset.assetId) ?? 0n;\n        }\n\n        await new Promise( resolve => setTimeout(resolve, 1000) );\n\n        await func();\n\n        while (true) {\n            user = currentClient.open(await currentEvaa.openUserContract(addr));\n            await user.getSync(currentEvaa.data!.assetsData, currentEvaa.data!.assetsConfig, (await this.collector.getPrices()).dict);\n            if (user.data?.type == \"active\") {\n                const principalNow: bigint = user.data.principals.get(asset.assetId) ?? 0n;\n                if (Math.abs(Number(principalNow - prevPrincipal)) > 10) {\n                    return {principal: principalNow, data: user.data};\n                }\n            }\n            await new Promise( resolve => setTimeout(resolve, 4000) );\n        }\n    }\n\n    async repay(params: RepayContent, runtime: IAgentRuntime, callback: HandlerCallback): Promise<any> {\n\n            // Get wallet instance\n            const walletClient = this.walletProvider.getWalletClient();\n            const wallet = walletClient.open(this.walletProvider.wallet);\n            const tonExplorerUrl = runtime.getSetting(\"TON_EXPLORER_URL\") || \"https://testnet.tonviewer.com/\";\n\n            // Initialize EVAA SDK\n            this.evaa = walletClient.open(\n                new Evaa({poolConfig: TESTNET_POOL_CONFIG}),\n            );\n            await this.evaa.getSync();\n\n            this.assetsData = this.evaa.data?.assetsData!;\n            this.assetsConfig = this.evaa.data?.assetsConfig!;\n            this.masterConstants = this.evaa.poolConfig.masterConstants;\n\n            this.USDT = {\n                name: \"USDT\",\n                data: this.assetsData.get(JUSDT_TESTNET.assetId)!,\n                config: this.assetsConfig.get(JUSDT_TESTNET.assetId)!,\n                asset: JUSDT_TESTNET\n            }\n            this.USDC = {\n                name: \"USDC\",\n                data: this.assetsData.get(JUSDC_TESTNET.assetId)!,\n                config: this.assetsConfig.get(JUSDC_TESTNET.assetId)!,\n                asset: JUSDC_TESTNET\n            }\n            this.TON = {\n                name: \"TON\",\n                data: this.assetsData.get(TON_TESTNET.assetId)!,\n                config: this.assetsConfig.get(TON_TESTNET.assetId)!,\n                asset: TON_TESTNET\n            }\n\n            this.totalSupply = calculatePresentValue(this.TON.data.sRate, this.TON.data.totalSupply, this.masterConstants);\n            this.totalBorrow = calculatePresentValue(this.TON.data.bRate, this.TON.data.totalBorrow, this.masterConstants);\n            // Calculate borrow interest\n            this.borrowInterest = this.TON.config.baseBorrowRate +\n            mulFactor(this.masterConstants.FACTOR_SCALE, this.TON.config.borrowRateSlopeLow, this.TON.config.targetUtilization) +\n            mulFactor(\n                this.masterConstants.FACTOR_SCALE,\n                this.TON.config.borrowRateSlopeHigh,\n                this.masterConstants.FACTOR_SCALE - this.TON.config.targetUtilization\n            );\n\n            // Calculate APY\n            this.predictAPY = predictAPY({\n                amount: this.totalBorrow,\n                balanceChangeType: BalanceChangeType.Repay,\n                assetData: this.TON.data,\n                assetConfig: this.TON.config,\n                masterConstants: this.masterConstants\n            });\n\n            // Initialize prices collector\n            this.collector = new PricesCollector(TESTNET_POOL_CONFIG);\n\n            // Get user instance\n            const borrower = walletClient.open(this.evaa.openUserContract(wallet.address));\n            // Fetch user data\n            await borrower.getSync(this.evaa.data!.assetsData, this.evaa.data!.assetsConfig, (await this.collector.getPrices()).dict, true);\n\n            // Check if the user has a active evaa contract\n            const data = (borrower.data as typeof UserDataActive);\n            elizaLogger.log('User data:', data.fullyParsed);\n\n            if (borrower.data?.type != 'active') {\n                elizaLogger.log('Borrower User is inactive');\n                if (callback) {\n                    callback({\n                        text: `You need provide collateral funds before you can borrow`,\n                        content: { error: \"No collateral funds provided.\" }\n                    });\n\n                    return false;\n                }\n            } else {\n\n                this.withdrawalLimits = borrower.data.withdrawalLimits;\n                this.borrowLimits = borrower.data.borrowLimits;\n                elizaLogger.debug('User principals');\n                elizaLogger.debug('Real Principals', borrower.data.realPrincipals);\n                elizaLogger.debug('User Principal', borrower.data.principals);\n                elizaLogger.debug('Get Prices For Withdraw [USDT]', (await this.collector.getPricesForWithdraw(borrower.data.realPrincipals, JUSDT_TESTNET)).dict);\n                elizaLogger.debug('Get Prices For Withdraw [USDC]', (await this.collector.getPricesForWithdraw(borrower.data.realPrincipals, JUSDC_TESTNET)).dict);\n                let amoundToRepayTON = data.balances.get(TON_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [TON]', new BigNumber(amoundToRepayTON).toFixed(4));\n                let amoundToRepayUSDT = data.balances.get(JUSDT_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [USDT]', new BigNumber(amoundToRepayUSDT).toFixed(2));\n                let amoundToRepayUSDC = data.balances.get(JUSDC_TESTNET.assetId)!.amount;\n                elizaLogger.debug('Amount to repay [USDC]', new BigNumber(amoundToRepayUSDC).toFixed(2));\n\n                // Calculate estimated interest\n                const tonAsset = params.asset === \"TON\" ? this.TON : params.asset === \"USDT\" ? this.USDT : params.asset === \"USDC\" ? this.USDC : this.TON;\n                if (!tonAsset) {\n                    throw new Error(\"TON asset not found in master data\");\n                }\n                const amountToRepayToEvaa = data.balances.get(tonAsset.asset.assetId)!.amount;\n                const borrowAmount = typeof amountToRepayToEvaa !== \"string\" ? new BigNumber(String(amountToRepayToEvaa)) : new BigNumber(amountToRepayToEvaa);\n\n                elizaLogger.debug('Borrow amount', borrowAmount.toFixed(4));\n                elizaLogger.debug('Borrow limits',this.borrowLimits);\n                // Calculate estimated rates\n                const assetRates = calculateCurrentRates(tonAsset.config, tonAsset.data, this.masterConstants);\n\n                const { borrowInterest, bRate, now, sRate, supplyInterest } = assetRates;\n                const ONE = 10n ** 13n;\n\n                // Convert the raw annual supply rate into a human‑readable number.\n                // For example, a stored 700000000000 becomes 700000000000 / 1e13 = 0.07 (i.e. 7% APY)\n                const annualInterestRateReadable = Number(sRate) / Number(ONE);\n\n                // Compute the daily rate by dividing the annual rate by 365\n                const dailyInterestRateReadable = annualInterestRateReadable / 365;\n\n                // If you want the “rate” still in fixed‑point (for further on‑chain calculations) you could do:\n                const annualRateFP = sRate;              // already annual, fixed-point 13 decimals\n                const dailyRateFP = sRate / 365n;           // integer division – be aware of rounding\n\n                // To compute the daily interest on a given principal, first decide on the unit and scaling.\n                // For example, if your principal is 10 “tokens” and token amounts are also represented\n                // in 13 decimals, then:\n                const principal = 10n * ONE;  // 10 tokens in fixed-point form\n\n                // Daily interest (in fixed point) = principal * (daily rate) / ONE\n                const dailyInterestFP = (principal * dailyRateFP) / ONE;\n\n                // For display, convert the fixed-point numbers to floating point:\n                function formatFixedPoint(x: bigint, decimals: number = 13): string {\n                  // This converts the integer value to a string with the implied decimal point.\n                  const factor = 10 ** decimals;\n                  return (Number(x) / factor).toFixed(6);\n                }\n\n                // Debugging\n                elizaLogger.debug(\"Borrow Interest\" , borrowInterest.toString());\n                elizaLogger.debug(\"Borrow Rate\" , bRate.toString());\n                elizaLogger.debug(\"Supply Interest\" , supplyInterest.toString());\n                elizaLogger.debug(\"Supply Rate\", sRate.toString());\n                elizaLogger.debug(\"Now\" , now.toString());\n                elizaLogger.debug(\"Annual Interest Rate: \", annualInterestRateReadable.toString()); // e.g. 0.07 for 7%\n                elizaLogger.debug(\"Daily Interest Rate:  \", dailyInterestRateReadable.toString());  // e.g. ~0.0001918 (0.01918% per day)\n                elizaLogger.debug(\"Daily Interest (on 10 tokens):\", formatFixedPoint(dailyInterestFP));\n\n                const annualInterestRate = annualInterestRateReadable;\n                const dailyInterestRate = dailyInterestRateReadable;\n                const dailyInterest = formatFixedPoint(dailyInterestFP);\n\n                // Get price data\n                const priceData = await this.collector.getPrices();\n\n                // get supply message body\n                const supplyMessage = this.evaa.createSupplyMessage({\n                    queryID: 0n,\n                    // we can set always to true, if we don't want to check user code version\n                    includeUserCode: true,\n                    amount: tonAsset.name === \"TON\" ? toNano(amountToRepayToEvaa) : convertToBigInt(Number(amountToRepayToEvaa)*1e6),\n                    userAddress: wallet.address,\n                    asset: tonAsset.asset,\n                    payload: Cell.EMPTY,\n                    amountToTransfer: toNano(0),\n                });\n\n                // create signed transfer for out wallet with internal message to EVAA Master Contract\n                const signedSupplyMessage = wallet.createTransfer({\n                    seqno: await wallet.getSeqno(),\n                    secretKey: this.walletProvider.keypair.secretKey,\n                    messages: [\n                        internal({\n                            to: this.evaa.address,\n                            value: toNano(1) + FEES.SUPPLY,\n                            body: supplyMessage,\n                        }),\n                    ],\n                    sendMode: SendMode.PAY_GAS_SEPARATELY,\n                    timeout: Math.floor(Date.now() / 1000) + 60,\n                });\n                // send this message. send() method creates external and send it, so\n                // we need to create external message manually for getting its hash\n                await wallet.send(signedSupplyMessage);\n\n                // create external message manually\n                const externalSupplyMessage = beginCell()\n                    .store(\n                        storeMessage(\n                            external({\n                                to: wallet.address,\n                                body: signedSupplyMessage,\n                            }),\n                        ),\n                    )\n                    .endCell();\n\n                await this.evaa.getSync();\n                /*try {\n                    await this.waitForPrincipalChange(wallet.address, this.TON.asset, async () => {\n                        elizaLogger.log(\"Waiting for principal change...\");\n                        await sleep(10000);\n                        return true;\n                    });\n                } catch (error) {\n                    elizaLogger.error(error);\n                }*/\n                await sleep(30000);\n\n                // Get transaction hash and explorer URL\n                const txHash = externalSupplyMessage.hash().toString('hex');\n                const explorerUrl = `${tonExplorerUrl}/transaction/${txHash}`;\n\n                let amountToRepay = data.balances.get(tonAsset.asset.assetId)!.amount;\n                elizaLogger.debug('Amount to repay', amountToRepay.toString());\n\n                return {\n                    txHash: txHash,\n                    explorerUrl: explorerUrl,\n                    asset: tonAsset.name,\n                    amount: borrowAmount.toString(),\n                    amountToRepay: amountToRepay.toString(),\n                    dailyInterest,\n                    annualInterestRate\n                };\n            }\n\n    }\n}\n\nconst repayAction: Action = {\n    name: \"EVAA_REPAY\",\n    similes: [\n        \"REPAY_USDT\",\n        \"REPAY_USDC\",\n        \"REPAY_TON\",\n        \"REPAY_ALL_TON\",\n        \"REPAY_FULL_TON\",\n        \"REPAY_TOTAL_TONCOIN\",\n        \"REPAY_ALL_TONCOIN\"\n    ],\n    description: \"Repay all repayed TON tokens to the EVAA lending protocol\",\n    validate: async (runtime: IAgentRuntime) => {\n        const walletProvider = await initWalletProvider(runtime);\n        return !!walletProvider.getAddress();\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.info(\"Starting REPAY EVAA handler\");\n\n        try {\n            // Compose context to extract repayment parameters\n            const repayContext = composeContext({\n                state,\n                template: repayTemplate\n            });\n\n            const content = await generateObject({\n                runtime,\n                context: repayContext,\n                schema: repaySchema,\n                modelClass: ModelClass.LARGE,\n            });\n\n            const repayDetails = content.object as RepayContent;\n            elizaLogger.debug(`Repay details: ${JSON.stringify(content.object)}`);\n\n            if (!isRepayContent(repayDetails)) {\n                throw new Error(\"Invalid repaying parameters\");\n            }\n\n            const walletProvider = await initWalletProvider(runtime);\n            const action = new RepayAction(walletProvider);\n            const repayResult = await action.repay(repayDetails, runtime, callback);\n\n            if (callback) {\n                let responseText = `Successfully initiated repaying of ${repayResult.amountToRepay} ${repayResult.asset}.`;\n\n                // Add interest information if requested\n                responseText += `\\n\\nAmount Repaid: ${Number(repayResult.amountToRepay).toFixed(4)} ${repayResult.asset}\\n\\nTrack the transaction here: ${repayResult.explorerUrl}`;\n\n                callback({\n                    text: responseText,\n                    metadata: {\n                        txHash: repayResult.txHash,\n                        explorerUrl: repayResult.explorerUrl,\n                        asset: repayResult.asset,\n                        amountToRepay: repayResult.amountToRepay,\n                        action: \"REPAY\"\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error in REPAY EVAA handler:\", error);\n            if (callback) {\n                callback({\n                    text: `Failed to repay EVAA loan: ${error.message}`,\n                    error: true,\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to repay my entire TON loan to the EVAA protocol\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll help you repay your entire TON loan to the EVAA protocol. Processing your request...\",\n                    action: \"REPAY\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Can you help me fully repay my EVAA TON loan with user code included?\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll help you fully repay your EVAA TON loan with user code included. Processing your request...\",\n                    action: \"REPAY\",\n                },\n            },\n        ],\n    ],\n};\n\nexport default repayAction;\n","import {\n    elizaLogger,\n    Action,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n    generateObject,\n    composeContext,\n    ModelClass,\n    generateObjectArray\n} from '@elizaos/core';\nimport { Dictionary, fromNano } from '@ton/ton';\nimport BigNumber from \"bignumber.js\";\nimport { z } from 'zod';\nimport { convertToBigInt, formatCurrency } from '../utils/util';\nimport evaaPkg from '@evaafi/sdk';\nconst {\n    Evaa,\n    FEES,\n    TON_TESTNET,\n    TESTNET_POOL_CONFIG,\n    JUSDC_TESTNET,\n    JUSDT_TESTNET,\n    UserDataActive,\n    AssetData,\n    BalanceChangeType,\n    calculatePresentValue,\n    calculateCurrentRates,\n    MasterConstants,\n    AssetConfig,\n    ExtendedAssetData,\n    PoolAssetConfig,\n    mulFactor,\n    predictAPY,\n    PricesCollector\n}  = evaaPkg;\n\nimport {\n    initWalletProvider,\n    type WalletProvider,\n    nativeWalletProvider,\n} from \"../providers/wallet\";\n\n\n// For display, convert the fixed-point numbers to floating point with human-readable formatting:\nfunction formatFixedPoint(x: bigint, decimals: number = 13): string {\n    // This converts the integer value to a string with the implied decimal point.\n    const factor = 10 ** decimals;\n    const value = Number(x) / factor;\n\n    // Format with commas for thousands separators and appropriate decimal places\n    return value.toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 6\n    });\n}\n\n/**\n * Calculate accrued interest over an elapsed time period.\n *\n * @param principal - The principal in fixed-point form (13 decimals)\n * @param supplyRate - The annual supply rate in fixed-point (13 decimals)\n * @param elapsedSeconds - The elapsed time in seconds over which interest accrues\n * @param ONE - The scaling factor (10^13 for 13 decimals)\n * @returns The accrued interest in fixed-point representation.\n */\nfunction calculateAccruedInterest(\n    principal: bigint,\n    supplyRate: bigint,\n    elapsedSeconds: bigint,\n    ONE: bigint\n): bigint {\n    // There are 31,536,000 seconds in a 365-day year.\n    const SECONDS_PER_YEAR = 31536000n;\n    return (principal * supplyRate * elapsedSeconds) / (ONE * SECONDS_PER_YEAR);\n}\n\nexport const positionItemSchema = z.object({\n    assetId: z.string().nullable(),\n    principal: z.string().nullable().optional(),\n    borrowInterest: z.string().nullable().optional(),\n    borrowRate: z.string().nullable().optional(),\n    supplyInterest: z.string().nullable().optional(),\n    supplyRate: z.string().nullable().optional(),\n    annualInterestRate: z.string().nullable().optional(),\n    dailyInterestRate: z.string().nullable().optional(),\n    dailyInterest: z.string().nullable().optional(),\n    //accruedInterest: z.string().nullable().optional(),\n    healthFactor: z.number().nullable().optional(),\n    liquidationThreshold: z.number().nullable().optional(),\n});\n\nexport const positionsSchema = z.object({\n    positions: z.array(positionItemSchema)\n});\n\nexport type PositionItemContent = z.infer<typeof positionItemSchema>;\nexport type PositionsContent = z.infer<typeof positionsSchema>;\n\nfunction isPositionItemContent(content: any): content is PositionItemContent {\n    return (\n        (content.assetId === null || typeof content.assetId === \"string\") &&\n        (content.principal === null || typeof content.principal === \"string\" || content.principal === undefined) &&\n        (content.borrowInterest === null || typeof content.borrowInterest === \"string\" || content.borrowInterest === undefined) &&\n        (content.borrowRate === null || typeof content.borrowRate === \"string\" || content.borrowRate === undefined) &&\n        (content.supplyInterest === null || typeof content.supplyInterest === \"string\" || content.supplyInterest === undefined) &&\n        (content.supplyRate === null || typeof content.supplyRate === \"string\" || content.supplyRate === undefined) &&\n        (content.annualInterestRate === null || typeof content.annualInterestRate === \"string\" || content.annualInterestRate === undefined) &&\n        (content.dailyInterestRate === null || typeof content.dailyInterestRate === \"string\" || content.dailyInterestRate === undefined) &&\n        (content.dailyInterest === null || typeof content.dailyInterest === \"string\" || content.dailyInterest === undefined) &&\n        //(content.accruedInterest === null || typeof content.accruedInterest === \"string\" || content.accruedInterest === undefined) &&\n        (content.healthFactor === null || typeof content.healthFactor === \"number\" || content.healthFactor === undefined) &&\n        (content.liquidationThreshold === null || typeof content.liquidationThreshold === \"number\" || content.liquidationThreshold === undefined)\n    );\n}\n\nfunction isPositionsContent(content: any): content is PositionsContent {\n    return (\n        Array.isArray(content.positions) &&\n        content.positions.every((item: any) => isPositionItemContent(item))\n    );\n}\n\nexport const positionsTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"positions\": [\n        {\n            \"assetId\": \"TON\",\n            \"principal\": \"0\",\n            \"borrowInterest\": \"0\",\n            \"borrowRate\": \"0\",\n            \"supplyInterest\": \"0\",\n            \"supplyRate\": \"0\",\n            \"annualInterestRate\": \"0\",\n            \"dailyInterestRate\": \"0\",\n            \"dailyInterest\": \"0\",\n            \"healthFactor\": 0,\n            \"liquidationThreshold\": 0\n        },\n        {\n            \"assetId\": \"USDT\",\n            \"principal\": \"0\",\n            \"borrowInterest\": \"0\",\n            \"borrowRate\": \"0\",\n            \"supplyInterest\": \"0\",\n            \"supplyRate\": \"0\",\n            \"annualInterestRate\": \"0\",\n            \"dailyInterestRate\": \"0\",\n            \"dailyInterest\": \"0\",\n            \"healthFactor\": 0,\n            \"liquidationThreshold\": 0\n        },\n        {\n            \"assetId\": \"USDC\",\n            \"principal\": \"0\",\n            \"borrowInterest\": \"0\",\n            \"borrowRate\": \"0\",\n            \"supplyInterest\": \"0\",\n            \"supplyRate\": \"0\",\n            \"annualInterestRate\": \"0\",\n            \"dailyInterestRate\": \"0\",\n            \"dailyInterest\": \"0\",\n            \"healthFactor\": 0,\n            \"liquidationThreshold\": 0\n        }\n    ]\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the borrowed positions:\n- Asset ID (TON, USDT, USDC, etc.)\n- Principal amount borrowed (if mentioned)\n- Borrow interest (if mentioned)\n- Borrow rate (if mentioned)\n- Supply interest (if mentioned)\n- Supply rate (if mentioned)\n- Annual interest rate (if mentioned)\n- Daily interest rate (if mentioned)\n- Daily interest (if mentioned)\n- Health factor (if mentioned)\n- Liquidation threshold (if mentioned)\n- Make sure to remove \\`\\`\\`json and \\`\\`\\` from the response\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\ninterface EvaaAsset {\n    name: string;\n    config: typeof AssetConfig;\n    data: typeof ExtendedAssetData;\n    asset: any;\n}\n\nexport class PositionsAction {\n    private walletProvider: WalletProvider;\n    private evaa: typeof Evaa;\n    private assetsData: Dictionary<bigint, typeof ExtendedAssetData>;\n    private assetsConfig: Dictionary<bigint, typeof AssetConfig>;\n    private masterConstants: typeof MasterConstants;\n    private USDT: EvaaAsset;\n    private USDC: EvaaAsset;\n    private TON: EvaaAsset;\n    private totalSupply: bigint;\n    private totalBorrow: bigint;\n    private collector: typeof PricesCollector;\n    userAssets: Array<EvaaAsset>;\n    borrowInterest: bigint;\n    predictAPY: bigint;\n    withdrawalLimits: Dictionary<bigint, bigint>\n    borrowLimits: Dictionary<bigint, bigint>\n\n\n    constructor(walletProvider: WalletProvider) {\n        this.walletProvider = walletProvider;\n        this.evaa = null;\n        this.assetsData = null;\n        this.assetsConfig = null;\n        this.masterConstants = null;\n        this.USDT = null;\n        this.USDC = null;\n        this.TON = null;\n        this.userAssets = null;\n        this.totalSupply = null;\n        this.totalBorrow = null;\n        this.borrowInterest = null;\n        this.predictAPY = null;\n        this.collector = null;\n        this.withdrawalLimits = null;\n        this.borrowLimits = null;\n    }\n\n    public async getPositions(): Promise<PositionsContent[]> {\n\n            // Initialize TON client and Evaa SDK\n            // Get wallet instance\n            const walletClient = this.walletProvider.getWalletClient();\n            const wallet = walletClient.open(this.walletProvider.wallet);\n\n            // Initialize EVAA SDK\n            this.evaa = walletClient.open(\n                new Evaa({poolConfig: TESTNET_POOL_CONFIG}),\n            );\n            await this.evaa.getSync();\n\n            this.assetsData = this.evaa.data?.assetsData!;\n            this.assetsConfig = this.evaa.data?.assetsConfig!;\n            this.masterConstants = this.evaa.poolConfig.masterConstants;\n            this.USDT = {\n                name: \"USDT\",\n                data: this.assetsData.get(JUSDT_TESTNET.assetId)!,\n                config: this.assetsConfig.get(JUSDT_TESTNET.assetId)!,\n                asset: JUSDT_TESTNET\n            }\n            this.USDC = {\n                name: \"USDC\",\n                data: this.assetsData.get(JUSDC_TESTNET.assetId)!,\n                config: this.assetsConfig.get(JUSDC_TESTNET.assetId)!,\n                asset: JUSDC_TESTNET\n            }\n            this.TON = {\n                name: \"TON\",\n                data: this.assetsData.get(TON_TESTNET.assetId)!,\n                config: this.assetsConfig.get(TON_TESTNET.assetId)!,\n                asset: TON_TESTNET\n            }\n\n            // Set user assets portfolio\n            this.userAssets = [\n                this.USDT,\n                this.USDC,\n                this.TON\n            ]\n\n            this.totalSupply = calculatePresentValue(this.TON.data.sRate, this.TON.data.totalSupply, this.masterConstants);\n            this.totalBorrow = calculatePresentValue(this.TON.data.bRate, this.TON.data.totalBorrow, this.masterConstants);\n            // Calculate borrow interest - ensure all values are BigInt and handle potential undefined values\n            try {\n                // Only calculate if all required values are available\n                if (this.TON?.config?.baseBorrowRate && this.masterConstants?.FACTOR_SCALE && \n                    this.TON?.config?.borrowRateSlopeLow && this.TON?.config?.targetUtilization &&\n                    this.TON?.config?.borrowRateSlopeHigh) {\n                    \n                    const baseBorrowRate = BigInt(this.TON.config.baseBorrowRate);\n                    const factorScale = BigInt(this.masterConstants.FACTOR_SCALE);\n                    const slopeLow = BigInt(this.TON.config.borrowRateSlopeLow);\n                    const slopeHigh = BigInt(this.TON.config.borrowRateSlopeHigh);\n                    const targetUtil = BigInt(this.TON.config.targetUtilization);\n                    \n                    const term1 = mulFactor(factorScale, slopeLow, targetUtil);\n                    const term2 = mulFactor(factorScale, slopeHigh, factorScale - targetUtil);\n                    \n                    this.borrowInterest = baseBorrowRate + BigInt(term1 || 0n) + BigInt(term2 || 0n);\n                } else {\n                    // Default value if data is missing\n                    this.borrowInterest = 0n;\n                }\n            } catch (error) {\n                // If any error occurs, set a default value\n                elizaLogger.error('Error calculating borrow interest:', error);\n                this.borrowInterest = 0n;\n            }\n\n            // Calculate APY with error handling\n            try {\n                // Only calculate if all required values are available\n                if (this.totalBorrow && this.TON?.data && this.TON?.config && this.masterConstants) {\n                    this.predictAPY = predictAPY({\n                        amount: this.totalBorrow,\n                        balanceChangeType: BalanceChangeType.Repay,\n                        assetData: this.TON.data,\n                        assetConfig: this.TON.config,\n                        masterConstants: this.masterConstants\n                    });\n                } else {\n                    // Default value if data is missing\n                    this.predictAPY = { supplyAPY: 0n, borrowAPY: 0n };\n                }\n            } catch (error) {\n                // If any error occurs, set default values\n                elizaLogger.error('Error calculating APY:', error);\n                this.predictAPY = { supplyAPY: 0n, borrowAPY: 0n };\n            }\n\n            // Initialize prices collector\n            this.collector = new PricesCollector(TESTNET_POOL_CONFIG);\n\n            // Open user contract\n            const user = walletClient.open(\n                await this.evaa.openUserContract(wallet.address)\n            );\n            // Fetch user data\n            await user.getSync(this.evaa.data!.assetsData, this.evaa.data!.assetsConfig, (await this.collector.getPrices()).dict, true);\n\n            // Check if the user has a active evaa contract\n            const data = (user.data as typeof UserDataActive);\n            elizaLogger.log('User data:', data.fullyParsed);\n\n            if (user.data?.type != 'active') {\n                elizaLogger.log('User account is not active');\n\n                return [] as PositionsContent[];\n            } else {\n\n            this.withdrawalLimits = user.data.withdrawalLimits;\n            this.borrowLimits = user.data.borrowLimits;\n\n            // Calculate positions and accrued interest\n            const positions: PositionsContent[] = [];\n\n            /*for (const [assetId, principal] of user.data.realPrincipals) {\n                const assetConfig = this.evaa.data!.assetsConfig.get(assetId);\n                if (!assetConfig) continue;\n\n                const assetData = this.evaa.data!.assetsData.get(assetId);\n                if (!assetData) continue;*/\n\n            for (const userAsset of this.userAssets) {\n\n            // Calculate estimated rates\n            const assetRates = calculateCurrentRates(userAsset.config, userAsset.data, this.masterConstants);\n\n            const { borrowInterest, bRate, now, sRate, supplyInterest } = assetRates;\n            const ONE = 10n ** 13n; // Fix: 1n ** 13n is incorrect, should be 10n ** 13n\n\n            // Convert the raw annual supply rate into a human‑readable number.\n            // For example, a stored 700000000000 becomes 700000000000 / 1e13 = 0.07 (i.e. 7% APY)\n            const annualInterestRateReadable = sRate / ONE;\n\n            // Compute the daily rate by dividing the annual rate by 365\n            const dailyInterestRateReadable = annualInterestRateReadable / 365n;\n\n            // If you want the “rate” still in fixed‑point (for further on‑chain calculations) you could do:\n            const annualRateFP = sRate;              // already annual, fixed-point 13 decimals\n            const dailyRateFP = sRate / 365n;           // integer division – be aware of rounding\n\n            // To compute the daily interest on a given principal, first decide on the unit and scaling.\n            // For example, if your principal is 10 “tokens” and token amounts are also represented\n            // in 13 decimals, then:\n            const principal = userAsset.data.balance;  // borrowed tokens in fixed-point form\n            const borrowPrincipal = user.data.borrowBalance;\n            const supplyPrincipal = user.data.supplyBalance;  // supply tokens in fixed-point form\n\n            // Daily interest (in fixed point) = principal * (daily rate) / ONE\n            // Fix: Division by ONE is needed, not multiplication\n            // Ensure all values are BigInt to prevent type mixing errors\n            let dailyBorrowInterestFP = 0n;\n            let dailySupplyInterestFP = 0n;\n            \n            try {\n                const borrowPrincipalBigInt = typeof borrowPrincipal === 'bigint' ? borrowPrincipal : BigInt(borrowPrincipal || 0);\n                const supplyPrincipalBigInt = typeof supplyPrincipal === 'bigint' ? supplyPrincipal : BigInt(supplyPrincipal || 0);\n                const dailyRateFPBigInt = typeof dailyRateFP === 'bigint' ? dailyRateFP : BigInt(dailyRateFP || 0);\n                const ONEBigInt = typeof ONE === 'bigint' ? ONE : BigInt(ONE || 10n ** 13n);\n                \n                dailyBorrowInterestFP = (borrowPrincipalBigInt * dailyRateFPBigInt) / ONEBigInt;\n                dailySupplyInterestFP = (supplyPrincipalBigInt * dailyRateFPBigInt) / ONEBigInt;\n            } catch (error) {\n                elizaLogger.error('Error calculating daily interest:', error);\n                // Default values already set\n            }\n\n            // Calculate health factor\n            const healthFactor = user.data.healthFactor;\n\n            // Calculate elapsed time since last accrual:\n            //const elapsedSeconds = now - userAsset.data.lastAccural;\n\n            // Debugging\n            elizaLogger.debug(\"Asset ID\" , userAsset.name);\n            elizaLogger.debug(\"-------------------------------------------------\");\n            elizaLogger.debug(\"Asset Balance\" , principal ? (Number(principal.toString()) / Number(ONE)).toFixed(2) : \"0.00\");\n            elizaLogger.debug(\"Asset Borrow Balance\" , borrowPrincipal ? (Number(borrowPrincipal.toString()) / Number(ONE)).toFixed(2) : \"0.00\");\n            elizaLogger.debug(\"Asset Supply Balance\" , supplyPrincipal ? (Number(supplyPrincipal.toString()) / Number(ONE)).toFixed(2) : \"0.00\");\n            elizaLogger.debug(\"-------------------------------------------------\");\n            elizaLogger.debug(\"Asset Balance\" , principal ? principal.toString() : \"0\");\n            elizaLogger.debug(\"Asset Borrow Balance\" , borrowPrincipal ? borrowPrincipal.toString() : \"0\");\n            elizaLogger.debug(\"Asset Supply Balance\" , supplyPrincipal ? supplyPrincipal.toString() : \"0\");\n            elizaLogger.debug(\"-------------------------------------------------\");\n            elizaLogger.debug(\"Asset Balance\" , principal ? formatCurrency(fromNano(principal), 2) : \"0.00\");\n            elizaLogger.debug(\"Asset Borrow Balance\" , borrowPrincipal ? formatCurrency(fromNano(borrowPrincipal), 2) : \"0.00\");\n            elizaLogger.debug(\"Asset Supply Balance\" , supplyPrincipal ? formatCurrency(fromNano(supplyPrincipal), 2) : \"0.00\");\n            elizaLogger.debug(\"Borrow Interest\" , formatCurrency(fromNano(borrowInterest), 6));\n            elizaLogger.debug(\"Borrow Rate\" , formatCurrency(fromNano(bRate / 100n), 2));\n            elizaLogger.debug(\"Supply Interest\" , formatCurrency(fromNano(supplyInterest), 6));\n            elizaLogger.debug(\"Supply Rate\", formatCurrency(fromNano(sRate / 100n), 2));\n            elizaLogger.debug(\"Now\" , now.toString());\n            elizaLogger.debug(\"Annual Interest Rate: \", formatCurrency(fromNano(annualInterestRateReadable / 100n), 6)); // e.g. 0.07 for 7%\n            elizaLogger.debug(\"Daily Interest Rate:  \", formatCurrency(fromNano(dailyInterestRateReadable / 100n), 6));  // e.g. ~0.0001918 (0.01918% per day)\n            elizaLogger.debug(\"Daily Borrow Interest (on 1 token):\", formatCurrency(fromNano(dailyBorrowInterestFP / 10n ** 13n), 6));\n            elizaLogger.debug(\"Daily Supply Interest (on 1 token):\", formatCurrency(fromNano(dailySupplyInterestFP / 10n ** 13n), 6));\n            elizaLogger.debug(\"Annual Rate:\",  formatCurrency(fromNano(annualRateFP / 100n), 2));\n            elizaLogger.debug(\"Health Factor: \", healthFactor.toString());\n\n            // Calculate accrued interest (in fixed-point format) over the elapsed period:\n            //const accruedInterestFP = calculateAccruedInterest(principal, sRate, elapsedSeconds, ONE);\n            //elizaLogger.debug(\"Accrued Interest (since last accrual):\", formatFixedPoint(accruedInterestFP));\n\n                positions.push({\n                    assetId: userAsset.name as string,\n                    principal: principal ? formatCurrency(fromNano(principal), 2) : \"0.00\",\n                    borrowInterest: borrowInterest ? formatCurrency(fromNano(borrowInterest), 6) : \"0.000000\",\n                    borrowRate: bRate ? formatCurrency(fromNano(bRate / 100n), 2) : \"0.00\",\n                    supplyInterest: supplyInterest ? formatCurrency(fromNano(supplyInterest), 6) : \"0.000000\",\n                    supplyRate: sRate ? formatCurrency(fromNano(sRate / 100n), 2) : \"0.00\",\n                    annualInterestRate: annualInterestRateReadable ? formatCurrency(fromNano(annualInterestRateReadable / 100n), 6) + '%' : \"0.000000%\",\n                    dailyInterestRate: dailyInterestRateReadable ? formatCurrency(fromNano(dailyInterestRateReadable / 100n), 6) + '%' : \"0.000000%\",\n                    dailyInterest: dailyBorrowInterestFP ? formatCurrency(fromNano(dailyBorrowInterestFP / 10n ** 13n), 6) + '%' : \"0.000000%\",\n                    //accruedInterest: formatFixedPoint(accruedInterestFP),\n                    healthFactor: typeof healthFactor === 'bigint' ? Number(healthFactor).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) : healthFactor,\n                    liquidationThreshold: typeof userAsset.config.liquidationThreshold === 'bigint' ?\n                        Number(userAsset.config.liquidationThreshold).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) : userAsset.config.liquidationThreshold\n                });\n\n            }\n\n            return positions;\n        }\n\n    }\n\n}\n\nconst positionsAction: Action = {\n    name: 'EVAA_POSITIONS',\n    similes: [\n        'BORROW_POSITIONS',\n        'GET_BORROW_POSITIONS',\n        'VIEW_BORROWED_POSITIONS',\n        'CHECK_LOAN_STATUS',\n        'SHOW_BORROWED_ASSETS'\n    ],\n    description: 'Calculates and displays accrued interest and health factors for borrowed positions',\n\n    validate: async (runtime: IAgentRuntime) => {\n        const walletProvider = await initWalletProvider(runtime);\n        return !!walletProvider.getAddress();\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.info('Starting GetBorrowPositions handler');\n\n        try {\n            // Compose context to extract borrowing parameters\n            const positionsContext = composeContext({\n                state,\n                template: positionsTemplate\n            });\n\n            const content = await generateObject({\n                runtime,\n                context: positionsContext,\n                schema: positionsSchema,\n                modelClass: ModelClass.LARGE,\n            });\n\n            const positionsDetails = content.object as PositionsContent;\n            elizaLogger.debug(`Positions details: ${JSON.stringify(content.object)}`);\n\n            // Validate the positions object\n            if (!isPositionsContent(positionsDetails)) {\n                throw new Error(\"Invalid borrowing parameters\");\n            }\n\n            const walletProvider = await initWalletProvider(runtime);\n            const action = new PositionsAction(walletProvider);\n            const positions = await action.getPositions();\n\n            if (callback) {\n                // Use the positions array from the action\n                const responseObject = {\n                    positions: positions\n                };\n\n                let responseText = `You have ${responseObject.positions.length} evaa positions:\\n`;\n\n                // Add positions information\n                for (let position of responseObject.positions) {\n                    const textPosition =`\n                        Asset: ${position.assetId}\n                        Balance: ${position.principal} ${position.assetId} tokens\n                        Borrow Interest: ${position.borrowInterest} units\n                        Borrow Rate: ${position.borrowRate} units\n                        Supply Interest: ${position.supplyInterest} units\n                        Supply Rate: ${position.supplyRate} units\n                        Annual Interest Rate: ${position.annualInterestRate}\n                        Daily Interest Rate: ${position.dailyInterestRate}\n                        Daily Interest: ${position.dailyInterest}\n                        Health Factor: ${position.healthFactor} (safe > 1.0)\n                        Liquidation Threshold: ${position.liquidationThreshold} units\n                        \\n`\n\n                        responseText += textPosition;\n                }\n\n                callback({\n                    text: responseText,\n                    status: \"success\",\n                    positions: responseObject.positions,\n                    metadata: {\n                        positions: responseObject.positions,\n                        totalPositions: positions.length,\n                        timestamp: Date.now()\n                    }\n                });\n            }\n\n            return true;\n\n        } catch (error) {\n            elizaLogger.error(`Error in get borrowed positions handler: ${error}`);\n            if (callback) {\n                callback({\n                    text: `Failed to get borrowed positions: ${error.message}`,\n                    status: \"error\"\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: '{{user1}}',\n                content: {\n                    text: 'Show me my positions and accrued interest from the EVAA protocol',\n                }\n            },\n            {\n                user: '{{agentName}}',\n                content: {\n                    text: '{{responseData}}',\n                    action: 'POSITIONS'\n                }\n            }\n        ],\n        [\n            {\n                user: '{{user1}}',\n                content: {\n                    text: 'What is my current health factor across all positions?'\n                }\n            },\n            {\n                user: '{{agentName}}',\n                content: {\n                    text: '{{responseData}}',\n                    action: 'POSITIONS'\n                }\n            }\n        ]\n    ]\n};\n\nexport default positionsAction;\n","import {\n    elizaLogger,\n    composeContext,\n    type Content,\n    type HandlerCallback,\n    ModelClass,\n    generateObject,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { z } from \"zod\";\nimport { IStakingProvider, StakingProvider, initStakingProvider } from \"../providers/staking\";\nimport { initWalletProvider } from \"../providers/wallet\";\n\nexport interface StakeContent extends Content {\n    poolId: string;\n    amount: string | number;\n}\n\nfunction isStakeContent(content: Content): content is StakeContent {\n    return (\n        typeof content.poolId === \"string\" &&\n        (typeof content.amount === \"string\" ||\n            typeof content.amount === \"number\")\n    );\n}\n\nconst stakeTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"poolId\": \"pool123\",\n    \"amount\": \"1.5\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information for staking TON:\n- Pool identifier (poolId)\n- Amount to stake\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\n/**\n * Modified StakeAction class that uses the nativeStakingProvider which\n * internally leverages the current wallet provider to construct and send\n * on-chain transactions.\n */\nexport class StakeAction {\n    constructor(\n        private stakingProvider: IStakingProvider,\n    ) {}\n\n    async stake(params: StakeContent): Promise<string | null> {\n        elizaLogger.log(\n            `Staking: ${params.amount} TON in pool (${params.poolId}) using wallet provider`,\n        );\n        try {\n            return await this.stakingProvider.stake(params.poolId, Number(params.amount));\n        } catch (error) {\n            throw new Error(`Staking failed: ${error.message}`);\n        }\n    }\n}\n\nconst buildStakeDetails = async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n): Promise<StakeContent> => {\n    // Initialize or update state\n    if (!state) {\n        state = (await runtime.composeState(message)) as State;\n    } else {\n        state = await runtime.updateRecentMessageState(state);\n    }\n    // Define the schema for the expected output\n    const stakeSchema = z.object({\n        poolId: z.string(),\n        amount: z.union([z.string(), z.number()]),\n    });\n\n    // Compose staking context\n    const stakeContext = composeContext({\n        state,\n        template: stakeTemplate,\n    });\n\n    // Generate stake content with the schema\n    const content = await generateObject({\n        runtime,\n        context: stakeContext,\n        schema: stakeSchema,\n        modelClass: ModelClass.SMALL,\n    });\n\n    return content.object as StakeContent;\n};\n\nexport default {\n    name: \"DEPOSIT_TON\",\n    similes: [\"STAKE_TOKENS\", \"DEPOSIT_TON\", \"DEPOSIT_TOKEN\"],\n    description: \"Deposit TON tokens in a specified pool.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: HandlerCallback,\n    ) => {\n        elizaLogger.log(\"Starting DEPOSIT_TON handler...\");\n        const stakeDetails = await buildStakeDetails(runtime, message, state);\n\n        if (!isStakeContent(stakeDetails)) {\n            elizaLogger.error(\"Invalid content for DEPOSIT_TON action.\");\n            if (callback) {\n                callback({\n                    text: \"Invalid staking details provided.\",\n                    content: { error: \"Invalid staking content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n\n            const walletProvider = await initWalletProvider(runtime);\n            const stakingProvider = await initStakingProvider(runtime);\n            // Instantiate StakeAction with the native staking provider.\n            const action = new StakeAction(stakingProvider);\n            const txHash = await action.stake(stakeDetails);\n\n            if (callback) {\n                callback({\n                    text: `Successfully staked ${stakeDetails.amount} TON in pool ${stakeDetails.poolId}. Transaction: ${txHash}`,\n                    content: {\n                        success: true,\n                        hash: txHash,\n                        amount: stakeDetails.amount,\n                        poolId: stakeDetails.poolId,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during staking:\", error);\n            if (callback) {\n                callback({\n                    text: `Error staking TON: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    template: stakeTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        elizaLogger.info(\"VALIDATING TON STAKING ACTION\")\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deposit 1.5 TON in pool pool123\",\n                    action: \"DEPOSIT_TON\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll deposit 1.5 TON now...\",\n                    action: \"DEPOSIT_TON\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully deposited 1.5 TON in pool pool123, Transaction: abcd1234efgh5678\",\n                },\n            },\n        ],\n    ],\n};","import { Address, fromNano, OpenedContract, SendMode, TonClient } from \"@ton/ton\";\nimport { IAgentRuntime, Provider, Memory, State, elizaLogger } from \"@elizaos/core\";\nimport { internal } from \"@ton/ton\";\nimport { initWalletProvider, WalletProvider } from \"./wallet\";\nimport { mnemonicToPrivateKey } from \"@ton/crypto\";\nimport { StakeContent } from \"../actions/stake\";\nimport { PlatformFactory } from \"../services/staking/platformFactory.ts\";\nimport { TonWhalesStrategy } from \"../services/staking/strategies/tonWhales.ts\";\nimport { HipoStrategy } from \"../services/staking/strategies/hipo.ts\";\nimport { PoolInfo } from \"../services/staking/interfaces/pool.ts\";\nimport { formatTON, truncateTONAddress } from \"../utils/formatting.ts\";\n\n// Define types for pool info and transaction results.\n// export interface PoolInfo {\n//     totalStaked: number;\n//     rewardRate: number; // Reward rate (e.g., reward per TON per time unit)\n//     lockupPeriod: number; // Lock-up period in seconds (or per protocol spec)\n//     minimumDeposit: number;\n// }\n\nexport interface TransactionResult {\n    hash: string; // The transaction hash for the operation\n    success?: boolean;\n    message?: string;\n}\n\n// Staking provider interface definition.\nexport interface IStakingProvider {\n    stake(poolId: string, amount: number): Promise<string | null>;\n    unstake(poolId: string, amount: number): Promise<string | null>;\n    getPoolInfo(poolId: string): Promise<PoolInfo>;\n    getFormattedPoolInfo(poolId: string): Promise<any>;\n    getPortfolio(): Promise<string>;\n}\n\n// A full implementation of the staking provider that calls the TON RPC.\nexport class StakingProvider implements IStakingProvider {\n    private client: TonClient;\n    private walletProvider: WalletProvider;\n    private contract: OpenedContract<any>;\n\n    constructor(walletProvider: WalletProvider) {\n        // Initialize the wallet provider (which uses TON_PRIVATE_KEY and TON_RPC_URL)\n        this.walletProvider = walletProvider;\n\n        // Get the TON client instance from the wallet provider.\n        this.client = walletProvider.getWalletClient();\n\n        this.contract = this.client.open(walletProvider.wallet);\n\n        PlatformFactory.register(\"TON_WHALES\", new TonWhalesStrategy(this.client, this.walletProvider));\n        PlatformFactory.register(\"HIPO\", new HipoStrategy(this.client, this.walletProvider));\n    }\n\n    // Private helper method to get the contract handle from the TON client.\n    private async getContract(poolId: string) {\n        // The TON client's 'open' method is assumed to return a contract handle\n        // with methods: sendStake, sendUnstake, callGetPoolInfo, sendClaimRewards, and sendRestakeRewards.\n        return await this.client.open(poolId as any);\n    }\n\n    async stake(poolId: string, amount: number): Promise<string | null> {\n        const poolAddress = Address.parse(poolId);\n\n        try {\n            // Create a transfer\n            // Retrieve the wallet's current sequence number.\n            const seqno: number = await this.contract.getSeqno();\n\n            const strategy = PlatformFactory.getStrategy(poolAddress);\n\n            // Check if what we stake surpasses min stake\n            const minStake = (await strategy.getPoolInfo(poolAddress)).min_stake;\n\n            if(minStake > amount) throw new Error(`Minimum stake is ${minStake}`);\n\n            const stakeMessage = await strategy.createStakeMessage(poolAddress, amount);\n\n            // Create and sign the staking transaction using the wallet's secret key.\n            const transfer = await this.contract.createTransfer({\n                seqno,\n                secretKey: this.walletProvider.keypair.secretKey,\n                sendMode: SendMode.IGNORE_ERRORS | SendMode.PAY_GAS_SEPARATELY,\n                messages: [stakeMessage],\n                validUntil: Math.floor(Date.now() / 1000) + 300\n            });\n\n            await this.client.sendExternalMessage(this.walletProvider.wallet, transfer);\n            return transfer.hash;\n        } catch (error: any) {\n            console.error(\"Error staking TON:\", error);\n            return null;\n        }\n    }\n\n    async unstake(poolId: string, amount: number): Promise<string | null> {\n        const poolAddress = Address.parse(poolId);\n\n        try {\n            // Call the contract method to unstake TON.\n            const seqno: number = await this.contract.getSeqno();\n\n            const strategy = PlatformFactory.getStrategy(poolAddress);\n\n            // Check for staking balance\n            const stakedTon = await strategy.getStakedTon(Address.parse(this.walletProvider.getAddress()), poolAddress);\n            if(stakedTon <= 0) throw new Error(\"No TON staked in the provided pool\");\n\n            const unstakeMessage = await strategy.createUnstakeMessage(poolAddress, amount);\n\n            const transfer = await this.contract.createTransfer({\n                seqno,\n                secretKey: this.walletProvider.keypair.secretKey,\n                sendMode: SendMode.IGNORE_ERRORS | SendMode.PAY_GAS_SEPARATELY,\n                messages: [unstakeMessage],\n                validUntil: Math.floor(Date.now() / 1000) + 300\n            });\n\n            await this.client.sendExternalMessage(this.walletProvider.wallet, transfer);\n            return transfer.hash;\n        } catch (error: any) {\n            console.error(\"Error unstaking TON:\", error);\n            return null;\n        }\n    }\n\n    formatPoolInfo(poolInfo: PoolInfo): string {\n        return [\n            `Pool Address: ${truncateTONAddress(poolInfo.address)}`,\n            '',\n            'Parameters',\n            '───────────',\n            `Min Stake:     ${formatTON(poolInfo.min_stake)} TON`,\n            `Deposit Fee:   ${formatTON(poolInfo.deposit_fee)} TON`,\n            `Withdraw Fee:  ${formatTON(poolInfo.withdraw_fee)} TON`,\n            '',\n            'Current Status',\n            '─────────────',\n            `Balance:          ${formatTON(poolInfo.balance)} TON`,\n            `Pending Deposits: ${formatTON(poolInfo.pending_deposits)} TON`,\n            `Pending Withdraws: ${formatTON(poolInfo.pending_withdraws)} TON`\n        ].join('\\n');\n    }\n    \n    async getPoolInfo(poolId: string): Promise<PoolInfo> {\n        const poolAddress = Address.parse(poolId);\n\n        try {\n            // Call a contract method that queries pool information.\n            const strategy = PlatformFactory.getStrategy(poolAddress);\n            const info = await strategy.getPoolInfo(poolAddress);\n            return info;\n        } catch (error: any) {\n            console.error(\"Error fetching pool info:\", error);\n            throw error;\n        }\n    }\n\n    async getFormattedPoolInfo(poolId: string): Promise<any> {\n        return this.formatPoolInfo(await this.getPoolInfo(poolId));\n    }\n\n    async getPortfolio(): Promise<string> {\n        const walletAddress = Address.parse(this.walletProvider.getAddress());\n    \n        // Collect all staking positions\n        const stakingPositions: { poolAddress: string; amount: string, pending: string }[] = [];\n        const stakingPoolAddresses = PlatformFactory.getAllAddresses();\n    \n        await Promise.all(\n            stakingPoolAddresses.map(async poolAddress => {\n                const strategy = PlatformFactory.getStrategy(poolAddress);\n                if (!strategy) return;\n    \n                const stakedTon = await strategy.getStakedTon(walletAddress, poolAddress);\n                const pendingWithdrawal = await strategy.getPendingWithdrawal(walletAddress, poolAddress);\n\n                if (!stakedTon && !pendingWithdrawal) return;\n    \n                stakingPositions.push({\n                    poolAddress: truncateTONAddress(poolAddress),\n                    amount: formatTON(stakedTon),\n                    pending: formatTON(pendingWithdrawal),\n                });\n            })\n        );\n    \n        // If no staking positions found\n        if (stakingPositions.length === 0) {\n            return 'TON Staking Portfolio: No active staking positions found';\n        }\n    \n        // Calculate total staked\n        const totalStaked = stakingPositions\n            .reduce((sum, pos) => sum + parseFloat(pos.amount), 0)\n            .toFixed(2);\n    \n        // Format the output\n        const positions = stakingPositions\n            .map(pos => `Pool ${pos.poolAddress}: Amount:${pos.amount} TON, Pending Withdrawal: ${pos.pending} TON`)\n            .join('\\n');\n    \n        return [\n            'TON Staking Portfolio',\n            '───────────────────',\n            positions,\n            '',\n            `Total Staked: ${totalStaked} TON`\n        ].join('\\n');\n    }\n    \n}\n\n// Initializes the staking provider using settings from the runtime.\nexport const initStakingProvider = async (\n    runtime: IAgentRuntime,\n): Promise<IStakingProvider> => {\n        const privateKey = runtime.getSetting(\"TON_PRIVATE_KEY\");\n    let mnemonics: string[];\n\n    if (!privateKey) {\n        throw new Error(\"TON_PRIVATE_KEY is missing\");\n    } else {\n        mnemonics = privateKey.split(\" \");\n        if (mnemonics.length < 2) {\n            throw new Error(\"TON_PRIVATE_KEY mnemonic seems invalid\");\n        }\n    }\n    const rpcUrl =\n        runtime.getSetting(\"TON_RPC_URL\") || \"https://toncenter.com/api/v2/jsonRPC\";\n\n    const keypair = await mnemonicToPrivateKey(mnemonics, \"\");\n\n    const walletProvider = new WalletProvider(keypair, rpcUrl, runtime.cacheManager);\n\n    return new StakingProvider(walletProvider) as IStakingProvider;\n};\n\n/**\n * Staking provider that sends an on-chain staking transaction.\n *\n * It expects the runtime settings to provide:\n *   - TON_PRIVATE_KEY (for the wallet)\n *   - TON_RPC_URL (or it will default to the mainnet endpoint)\n *   - TON_STAKING_CONTRACT_ADDRESS (the address of the staking contract)\n *\n * The Memory object (message) must also include an `amount` property, e.g.:\n *   {\n *     amount: \"1.5\"\n *   }\n */\nexport const nativeStakingProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        message: Memory,\n        state?: State,\n    ): Promise<string | null> {\n        try {\n            const stakingProvider = await initStakingProvider(runtime);\n\n            const stakingPortfolio = await stakingProvider.getPortfolio();\n            \n            const poolAddresses = await PlatformFactory.getAllAddresses();\n\n            const providerString = `Portfolio: ${stakingPortfolio}\\n Available Staking Pool Addresses: [ ${poolAddresses.map(e=>e.toString()).join(' | ')} ]`\n            console.info(providerString)\n            return providerString;\n        } catch (error) {\n            console.error(\"Error in staking provider:\", error);\n            return null;\n        }\n    },\n};","import { elizaLogger } from \"@elizaos/core\";\nimport { Address } from \"@ton/ton\";\n\nimport { StakingPlatform } from \"./interfaces/stakingPlatform.ts\";\n\nimport {\n  PLATFORM_TYPES,\n  STAKING_POOL_ADDRESSES,\n  PlatformType,\n} from \"./config/platformConfig.ts\";\n\nfunction isPlatformType(type: string): type is PlatformType {\n  return PLATFORM_TYPES.includes(type as PlatformType);\n}\n\ntype StakingPoolAddresses = {\n  [K in PlatformType]: Address[];\n};\n\nexport class PlatformFactory {\n  private static strategies = new Map<PlatformType, StakingPlatform>();\n  private static addresses: StakingPoolAddresses;\n\n  // initliazer block\n  static {\n    this.addresses = Object.fromEntries(\n      Object.entries(STAKING_POOL_ADDRESSES).map(([type, addrs]) => [\n        type,\n        addrs.map((addr) => Address.parse(addr)),\n      ])\n    ) as StakingPoolAddresses;\n  }\n\n  static register(type: PlatformType, strategy: StakingPlatform): void {\n    this.strategies.set(type, strategy);\n  }\n\n  static getStrategy(address: Address): StakingPlatform | null {\n    const type = this.getPlatformType(address);\n    if (!type) {\n      elizaLogger.info(`Unknown platform address: ${address}`);\n      return null;\n    }\n\n    const strategy = this.strategies.get(type);\n    if (!strategy) {\n      elizaLogger.warn(`No strategy implemented for platform: ${type}`);\n      return null;\n    }\n\n    elizaLogger.debug(`Found strategy for platform: ${type}`);\n    return strategy;\n  }\n\n  static getAllStrategies(): StakingPlatform[] {\n    return Array.from(this.strategies.values());\n  }\n\n  private static getPlatformType(address: Address): PlatformType | null {\n    const entry = Object.entries(this.addresses).find(([_, addresses]) =>\n      addresses.some((addr) => addr.equals(address))\n    );\n\n    if (!entry) return null;\n\n    const [type] = entry;\n    return isPlatformType(type) ? type : null;\n  }\n\n  static getAllAddresses(): Address[] {\n    return Object.values(this.addresses).flat();\n  }\n\n  static getAddressesByType(type: PlatformType): Address[] {\n    return this.addresses[type] || [];\n  }\n\n  static getAvailablePlatformTypes(): PlatformType[] {\n    return [...PLATFORM_TYPES];\n  }\n}\n","export const PLATFORM_TYPES = [\"TON_WHALES\", \"HIPO\"] as const;\nexport type PlatformType = (typeof PLATFORM_TYPES)[number];\n\nexport const STAKING_POOL_ADDRESSES: Record<PlatformType, string[]> = {\n  TON_WHALES: [\n    \"kQDV1LTU0sWojmDUV4HulrlYPpxLWSUjM6F3lUurMbwhales\",\n    \"kQAHBakDk_E7qLlNQZxJDsqj_ruyAFpqarw85tO-c03fK26F\",\n  ],\n  HIPO: [\"kQAlDMBKCT8WJ4nwdwNRp0lvKMP4vUnHYspFPhEnyR36cg44\"],\n};\n\n\n","import {\n  Address,\n  beginCell,\n  Dictionary,\n  fromNano,\n  MessageRelaxed,\n  Slice,\n  toNano,\n  TonClient,\n  TupleReader,\n} from \"@ton/ton\";\nimport { StakingPlatform } from \"../interfaces/stakingPlatform.ts\";\nimport { internal } from \"@ton/ton\";\nimport { WalletProvider } from \"../../../providers/wallet.ts\";\nimport {\n  PoolInfo,\n  PoolMemberData,\n  PoolMemberList,\n} from \"../interfaces/pool.ts\";\n\nfunction generateQueryId() {\n  // Generate a query ID that's unique for this transaction\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nfunction parseMembersRaw(stack: any): PoolMemberList {\n  const cell = stack.items[0].cell;\n\n  const dict = Dictionary.loadDirect(\n    Dictionary.Keys.BigInt(256),\n    {\n      serialize: (src: any, builder: any) => {},\n      parse: (slice: Slice) => {\n        try {\n          const profitPerCoin = slice.loadUintBig(128);\n          const balance = slice.loadCoins();\n          const pendingWithdraw = slice.loadCoins();\n          const pendingWithdrawAll = slice.loadUintBig(1) === 1n;\n          const pendingDeposit = slice.loadCoins();\n          const memberWithdraw = slice.loadCoins();\n\n          return {\n            profit_per_coin: profitPerCoin,\n            balance: balance,\n            pending_withdraw: pendingWithdraw,\n            pending_withdraw_all: pendingWithdrawAll,\n            pending_deposit: pendingDeposit,\n            member_withdraw: memberWithdraw,\n          };\n        } catch (e) {\n          console.error(\"Parse error:\", e);\n          return {\n            error: e.message,\n            sliceData: slice.toString(),\n          };\n        }\n      },\n    },\n    cell\n  );\n\n  const members: PoolMemberList = [];\n\n  for (const [key, value] of dict) {\n    // Convert key to proper hex format\n    let bigIntKey: bigint;\n    if (typeof key === \"bigint\") {\n      bigIntKey = key;\n    } else if (typeof key === \"string\") {\n      const numStr = (key as string).startsWith(\"b:\")\n        ? (key as string).substring(2)\n        : key;\n      bigIntKey = BigInt(numStr);\n    } else {\n      bigIntKey = BigInt((key as any).toString());\n    }\n\n    if (bigIntKey < 0n) {\n      bigIntKey = (1n << 256n) + bigIntKey;\n    }\n\n    const rawAddress = bigIntKey\n      .toString(16)\n      .replace(\"0x\", \"\")\n      .padStart(64, \"0\");\n    const address = new Address(0, Buffer.from(rawAddress, \"hex\"));\n\n    members.push({\n      address,\n      ...value,\n    });\n  }\n\n  return members;\n}\n\nexport class TonWhalesStrategy implements StakingPlatform {\n  constructor(\n    readonly tonClient: TonClient,\n    readonly walletProvider: WalletProvider\n  ) {}\n\n  async getPendingWithdrawal(\n    walletAddress: Address,\n    poolAddress: Address\n  ): Promise<bigint> {\n    const memberData = await this.getMemberData(walletAddress, poolAddress);\n\n    return memberData?.pending_withdraw ?? BigInt(\"0\");\n  }\n\n  async getStakedTon(\n    walletAddress: Address,\n    poolAddress: Address\n  ): Promise<bigint> {\n    const memberData = await this.getMemberData(walletAddress, poolAddress);\n\n    if(memberData?.pending_withdraw) return memberData.balance - memberData.pending_withdraw;\n\n    return memberData?.balance ?? BigInt(\"0\");\n  }\n\n  async getPoolInfo(poolAddress: Address): Promise<PoolInfo> {\n    try {\n      const poolParams = (\n        await this.tonClient.runMethod(poolAddress, \"get_params\")\n      ).stack;\n\n      const poolStatus = (\n        await this.tonClient.runMethod(poolAddress, \"get_pool_status\")\n      ).stack;\n\n      // Parse the stack result based on TonWhales contract structure\n      return {\n        address: poolAddress,\n        min_stake: poolParams.skip(2).readBigNumber(),\n        deposit_fee: poolParams.readBigNumber(),\n        withdraw_fee: poolParams.readBigNumber(),\n        balance: poolStatus.readBigNumber(),\n        pending_deposits: poolStatus.skip().readBigNumber(),\n        pending_withdraws: poolStatus.readBigNumber(),\n      };\n    } catch (error) {\n      console.error(\"Error fetching TonWhales pool info:\", error);\n      throw error;\n    }\n  }\n\n  async createStakeMessage(\n    poolAddress: Address,\n    amount: number\n  ): Promise<MessageRelaxed> {\n    const queryId = generateQueryId();\n\n    const payload = beginCell()\n      .storeUint(2077040623, 32)\n      .storeUint(queryId, 64)\n      .storeCoins(100000) // gas\n      .endCell();\n\n    const intMessage = internal({\n      to: poolAddress,\n      value: toNano(amount),\n      bounce: true,\n      init: null,\n      body: payload,\n    });\n\n    return intMessage;\n  }\n\n  async createUnstakeMessage(\n    poolAddress: Address,\n    amount: number\n  ): Promise<MessageRelaxed> {\n    const queryId = generateQueryId();\n\n    const payload = beginCell()\n      .storeUint(3665837821, 32)\n      .storeUint(queryId, 64)\n      .storeCoins(100000) // gas\n      .storeCoins(toNano(amount))\n      .endCell();\n\n    const intMessage = internal({\n      to: poolAddress,\n      value: 200000000n, //toNano(unstakeAmount),\n      bounce: true,\n      init: null,\n      body: payload, // Adjust this message if your staking contract requires a different format.\n    });\n\n    return intMessage;\n  }\n\n  private async getMemberData(\n    address: Address,\n    poolAddress: Address\n  ): Promise<PoolMemberData | null> {\n    const result = await this.tonClient.runMethod(\n      poolAddress,\n      \"get_members_raw\"\n    );\n\n    const memberData = await parseMembersRaw(result.stack);\n\n    const member = memberData.find((member) => {\n      try {\n        return member.address.equals(address);\n      } catch (e) {\n        console.error(e, member.address, address);\n        return false;\n      }\n    });\n\n    return member;\n  }\n}\n","import {\n    Address,\n    beginCell,\n    Cell,\n    fromNano,\n    MessageRelaxed,\n    OpenedContract,\n    toNano,\n    TonClient,\n    TupleReader,\n} from \"@ton/ton\";\nimport { StakingPlatform } from \"../interfaces/stakingPlatform.ts\";\nimport { internal } from \"@ton/ton\";\nimport { WalletProvider } from \"../../../providers/wallet.ts\";\nimport { elizaLogger } from \"@elizaos/core\";\n\nimport { Treasury, Wallet, Parent, TreasuryConfig, feeStake, feeUnstake } from \"./hipo/sdk/index.ts\";\nimport { PoolInfo } from \"../interfaces/pool.ts\";\n\nasync function getTreasuryState(\n    tonClient: TonClient,\n    treasuryAddress: Address\n): Promise<TreasuryConfig> {\n    const treasuryInstance = Treasury;\n    const treasury = tonClient.open(\n        treasuryInstance.createFromAddress(treasuryAddress)\n    );\n    return treasury.getTreasuryState();\n}\n\nasync function getHipoWallet(\n    tonClient: TonClient,\n    address: Address,\n    treasuryAddress: Address\n): Promise<OpenedContract<Wallet>> {\n    const treasuryState = await getTreasuryState(tonClient, treasuryAddress);\n\n    if (!treasuryState.parent) throw new Error(\"No parent in treasury state\");\n    const parent = tonClient.open(\n        Parent.createFromAddress(treasuryState.parent)\n    );\n\n    const walletAddress = await parent.getWalletAddress(address);\n\n    // Get wallet contract\n    const hipoWalletInstance = Wallet;\n    const hipoWallet = tonClient.open(\n        hipoWalletInstance.createFromAddress(walletAddress)\n    );\n\n    return hipoWallet;\n}\n\nasync function getExchangeRate(\n    tonClient: TonClient,\n    treasuryAddress: Address\n): Promise<number> {\n    const treasuryState = await getTreasuryState(tonClient, treasuryAddress);\n    return Number(treasuryState.totalTokens) / Number(treasuryState.totalCoins);\n}\n\nfunction calculateJettonsToTon(jettons: bigint, rate: number): bigint {\n    console.info(jettons)\n    return !rate || !jettons\n        ? BigInt(0)\n        : BigInt(toNano(Number(fromNano(jettons)) * (1 / rate)));\n}\n\nexport class HipoStrategy implements StakingPlatform {\n    constructor(\n        readonly tonClient: TonClient,\n        readonly walletProvider: WalletProvider\n    ) {}\n\n    async getPendingWithdrawal(\n        address: Address,\n        poolAddress: Address\n    ): Promise<bigint> {\n        const hipoWallet = await getHipoWallet(\n            this.tonClient,\n            address,\n            poolAddress\n        );\n        const walletState = await hipoWallet.getWalletState();\n\n        const rate = await getExchangeRate(this.tonClient, poolAddress);\n        return calculateJettonsToTon(walletState.unstaking, rate);\n    }\n\n    async getStakedTon(\n        address: Address,\n        poolAddress: Address\n    ): Promise<bigint> {\n        const hipoWallet = await getHipoWallet(\n            this.tonClient,\n            address,\n            poolAddress\n        );\n        const walletState = await hipoWallet.getWalletState();\n\n        const rate = await getExchangeRate(this.tonClient, poolAddress);\n        return calculateJettonsToTon(walletState.tokens, rate);\n    }\n\n    async getPoolInfo(poolAddress: Address): Promise<PoolInfo> {\n        try {\n            const result = await getTreasuryState(this.tonClient, poolAddress);\n            const rate = await getExchangeRate(this.tonClient, poolAddress);\n            return {\n                address: poolAddress,\n                min_stake: BigInt(0),\n                deposit_fee: feeStake,\n                withdraw_fee: feeUnstake,\n                balance: calculateJettonsToTon(result.totalTokens, rate),\n                pending_deposits: calculateJettonsToTon(result.totalStaking, rate),\n                pending_withdraws: calculateJettonsToTon(result.totalUnstaking, rate),\n            };\n        } catch (error) {\n            console.error(\"Error fetching Hipo pool info:\", error);\n            throw error;\n        }\n    }\n\n    async createStakeMessage(\n        poolAddress: Address,\n        amount: number\n    ): Promise<MessageRelaxed> {\n        const payload = beginCell()\n            .storeUint(0x3d3761a6, 32)\n            .storeUint(0n, 64)\n            .storeAddress(null)\n            .storeCoins(toNano(amount))\n            .storeCoins(1n)\n            .storeAddress(null)\n            .endCell();\n\n        const intMessage = internal({\n            to: poolAddress,\n            value: toNano(amount) + 100000000n,\n            body: payload,\n            bounce: true,\n            init: null,\n        });\n\n        return intMessage;\n    }\n\n    async createUnstakeMessage(\n        poolAddress: Address,\n        amount: number\n    ): Promise<MessageRelaxed> {\n        const rate = await getExchangeRate(this.tonClient, poolAddress);\n\n        const jettonAmount = amount * rate;\n\n        const payload = beginCell()\n            .storeUint(0x595f07bc, 32)\n            .storeUint(0n, 64)\n            .storeCoins(toNano(jettonAmount))\n            .storeAddress(undefined)\n            .storeMaybeRef(beginCell().storeUint(0, 4).storeCoins(1n))\n            .endCell();\n\n        const hipoWallet = await getHipoWallet(\n            this.tonClient,\n            Address.parse(this.walletProvider.getAddress()),\n            poolAddress\n        );\n\n        const intMessage = internal({\n            to: hipoWallet.address,\n            value: 100000000n,\n            body: payload,\n            bounce: true,\n            init: null,\n        });\n\n        return intMessage;\n    }\n}\n","import { Address } from '@ton/ton'\n\nexport const treasuryAddresses = new Map<string, Address>([\n    ['mainnet', Address.parse('EQCLyZHP4Xe8fpchQz76O-_RmUhaVc_9BAoGyJrwJrcbz2eZ')],\n    ['testnet', Address.parse('kQAlDMBKCT8WJ4nwdwNRp0lvKMP4vUnHYspFPhEnyR36cg44')],\n])\n\nexport const opDepositCoins = 0x3d3761a6\nexport const opUnstakeTokens = 0x595f07bc\n\nexport const feeStake = 100000000n\nexport const feeUnstake = 100000000n\n\nexport const minimumTonBalanceReserve = 200000000n\n","import { Address, beginCell } from '@ton/ton'\nimport { feeStake, feeUnstake, minimumTonBalanceReserve, opDepositCoins, opUnstakeTokens } from './Constants'\n\nexport function maxAmountToStake(tonBalance: bigint): bigint {\n    tonBalance -= minimumTonBalanceReserve\n    return tonBalance > 0n ? tonBalance : 0n\n}\n\ninterface TonConnectMessage {\n    address: string\n    amount: string\n    stateInit: string | undefined\n    payload: string | undefined\n}\n\nexport function createDepositMessage(\n    treasury: Address,\n    amountInNano: bigint,\n    queryId = 0n,\n    referrer?: Address,\n): TonConnectMessage {\n    const address = treasury.toString()\n    const amount = (amountInNano + feeStake).toString()\n    const stateInit = undefined\n    const payload = beginCell()\n        .storeUint(opDepositCoins, 32)\n        .storeUint(queryId, 64)\n        .storeAddress(null)\n        .storeCoins(amountInNano)\n        .storeCoins(1n)\n        .storeAddress(referrer)\n        .endCell()\n        .toBoc()\n        .toString('base64')\n    return {\n        address,\n        amount,\n        stateInit,\n        payload,\n    }\n}\n\nexport function createUnstakeMessage(wallet: Address, amountInNano: bigint, queryId = 0n): TonConnectMessage {\n    const address = wallet.toString()\n    const amount = feeUnstake.toString()\n    const stateInit = undefined\n    const payload = beginCell()\n        .storeUint(opUnstakeTokens, 32)\n        .storeUint(queryId, 64)\n        .storeCoins(amountInNano)\n        .storeAddress(undefined)\n        .storeMaybeRef(beginCell().storeUint(0, 4).storeCoins(1n))\n        .endCell()\n        .toBoc()\n        .toString('base64')\n    return {\n        address,\n        amount,\n        stateInit,\n        payload,\n    }\n}\n","import {\n    Address,\n    beginCell,\n    Builder,\n    Cell,\n    Contract,\n    ContractProvider,\n    Dictionary,\n    DictionaryValue,\n    Slice,\n} from '@ton/ton'\n\nexport interface Times {\n    currentRoundSince: bigint\n    participateSince: bigint\n    participateUntil: bigint\n    nextRoundSince: bigint\n    nextRoundUntil: bigint\n    stakeHeldFor: bigint\n}\n\nexport enum ParticipationState {\n    Open,\n    Distributing,\n    Staked,\n    Validating,\n    Held,\n    Recovering,\n    Burning,\n}\n\nexport interface Request {\n    minPayment: bigint\n    borrowerRewardShare: bigint\n    loanAmount: bigint\n    accrueAmount: bigint\n    stakeAmount: bigint\n    newStakeMsg: Cell\n}\n\nexport interface Participation {\n    state?: ParticipationState\n    size?: bigint\n    sorted?: Dictionary<bigint, Dictionary<bigint, unknown>>\n    requests?: Dictionary<bigint, Request>\n    rejected?: Dictionary<bigint, Request>\n    accepted?: Dictionary<bigint, Request>\n    accrued?: Dictionary<bigint, Request>\n    staked?: Dictionary<bigint, Request>\n    recovering?: Dictionary<bigint, Request>\n    totalStaked?: bigint\n    totalRecovered?: bigint\n    currentVsetHash?: bigint\n    stakeHeldFor?: bigint\n    stakeHeldUntil?: bigint\n}\n\nexport interface TreasuryConfig {\n    totalCoins: bigint\n    totalTokens: bigint\n    totalStaking: bigint\n    totalUnstaking: bigint\n    totalBorrowersStake: bigint\n    parent: Address | null\n    participations: Dictionary<bigint, Participation>\n    roundsImbalance: bigint\n    stopped: boolean\n    instantMint: boolean\n    loanCodes: Dictionary<bigint, Cell>\n    lastStaked: bigint\n    lastRecovered: bigint\n    halter: Address\n    governor: Address\n    proposedGovernor: Cell | null\n    governanceFee: bigint\n    collectionCodes: Dictionary<bigint, Cell>\n    billCodes: Dictionary<bigint, Cell>\n    oldParents: Dictionary<bigint, unknown>\n}\n\nexport const emptyDictionaryValue: DictionaryValue<unknown> = {\n    serialize: function () {\n        return\n    },\n    parse: function (): unknown {\n        return {}\n    },\n}\n\nexport const sortedDictionaryValue: DictionaryValue<Dictionary<bigint, unknown>> = {\n    serialize: function (src: Dictionary<bigint, unknown>, builder: Builder) {\n        builder.storeRef(beginCell().storeDictDirect(src))\n    },\n    parse: function (src: Slice): Dictionary<bigint, unknown> {\n        return src.loadRef().beginParse().loadDictDirect(Dictionary.Keys.BigUint(256), emptyDictionaryValue)\n    },\n}\n\nexport const requestDictionaryValue: DictionaryValue<Request> = {\n    serialize: function (src: Request, builder: Builder) {\n        builder\n            .storeCoins(src.minPayment)\n            .storeUint(src.borrowerRewardShare, 8)\n            .storeCoins(src.loanAmount)\n            .storeCoins(src.accrueAmount)\n            .storeCoins(src.stakeAmount)\n            .storeRef(src.newStakeMsg)\n    },\n    parse: function (src: Slice): Request {\n        return {\n            minPayment: src.loadCoins(),\n            borrowerRewardShare: src.loadUintBig(8),\n            loanAmount: src.loadCoins(),\n            accrueAmount: src.loadCoins(),\n            stakeAmount: src.loadCoins(),\n            newStakeMsg: src.loadRef(),\n        }\n    },\n}\n\nexport const participationDictionaryValue: DictionaryValue<Participation> = {\n    serialize: function (src: Participation, builder: Builder) {\n        builder\n            .storeUint(src.state ?? 0, 4)\n            .storeUint(src.size ?? 0, 16)\n            .storeDict(src.sorted)\n            .storeDict(src.requests)\n            .storeDict(src.rejected)\n            .storeDict(src.accepted)\n            .storeDict(src.accrued)\n            .storeDict(src.staked)\n            .storeDict(src.recovering)\n            .storeCoins(src.totalStaked ?? 0)\n            .storeCoins(src.totalRecovered ?? 0)\n            .storeUint(src.currentVsetHash ?? 0, 256)\n            .storeUint(src.stakeHeldFor ?? 0, 32)\n            .storeUint(src.stakeHeldUntil ?? 0, 32)\n    },\n    parse: function (src: Slice): Participation {\n        return {\n            state: src.loadUint(4),\n            size: src.loadUintBig(16),\n            sorted: src.loadDict(Dictionary.Keys.BigUint(112), sortedDictionaryValue),\n            requests: src.loadDict(Dictionary.Keys.BigUint(256), requestDictionaryValue),\n            rejected: src.loadDict(Dictionary.Keys.BigUint(256), requestDictionaryValue),\n            accepted: src.loadDict(Dictionary.Keys.BigUint(256), requestDictionaryValue),\n            accrued: src.loadDict(Dictionary.Keys.BigUint(256), requestDictionaryValue),\n            staked: src.loadDict(Dictionary.Keys.BigUint(256), requestDictionaryValue),\n            recovering: src.loadDict(Dictionary.Keys.BigUint(256), requestDictionaryValue),\n            totalStaked: src.loadCoins(),\n            totalRecovered: src.loadCoins(),\n            currentVsetHash: src.loadUintBig(256),\n            stakeHeldFor: src.loadUintBig(32),\n            stakeHeldUntil: src.loadUintBig(32),\n        }\n    },\n}\n\nexport class Treasury implements Contract {\n    constructor(readonly address: Address) {}\n\n    static createFromAddress(address: Address) {\n        return new Treasury(address)\n    }\n\n    async getTimes(provider: ContractProvider): Promise<Times> {\n        const { stack } = await provider.get('get_times', [])\n        return {\n            currentRoundSince: stack.readBigNumber(),\n            participateSince: stack.readBigNumber(),\n            participateUntil: stack.readBigNumber(),\n            nextRoundSince: stack.readBigNumber(),\n            nextRoundUntil: stack.readBigNumber(),\n            stakeHeldFor: stack.readBigNumber(),\n        }\n    }\n\n    async getTreasuryState(provider: ContractProvider): Promise<TreasuryConfig> {\n        const { stack } = await provider.get('get_treasury_state', [])\n        return {\n            totalCoins: stack.readBigNumber(),\n            totalTokens: stack.readBigNumber(),\n            totalStaking: stack.readBigNumber(),\n            totalUnstaking: stack.readBigNumber(),\n            totalBorrowersStake: stack.readBigNumber(),\n            parent: stack.readAddressOpt(),\n            participations: Dictionary.loadDirect(\n                Dictionary.Keys.BigUint(32),\n                participationDictionaryValue,\n                stack.readCellOpt(),\n            ),\n            roundsImbalance: stack.readBigNumber(),\n            stopped: stack.readBoolean(),\n            instantMint: stack.readBoolean(),\n            loanCodes: Dictionary.loadDirect(Dictionary.Keys.BigUint(32), Dictionary.Values.Cell(), stack.readCell()),\n            lastStaked: stack.readBigNumber(),\n            lastRecovered: stack.readBigNumber(),\n            halter: stack.readAddress(),\n            governor: stack.readAddress(),\n            proposedGovernor: stack.readCellOpt(),\n            governanceFee: stack.readBigNumber(),\n            collectionCodes: Dictionary.loadDirect(\n                Dictionary.Keys.BigUint(32),\n                Dictionary.Values.Cell(),\n                stack.readCell(),\n            ),\n            billCodes: Dictionary.loadDirect(Dictionary.Keys.BigUint(32), Dictionary.Values.Cell(), stack.readCell()),\n            oldParents: Dictionary.loadDirect(Dictionary.Keys.BigUint(256), emptyDictionaryValue, stack.readCellOpt()),\n        }\n    }\n}\n","import { Address, Contract, ContractProvider, TupleBuilder } from '@ton/ton'\n\nexport class Parent implements Contract {\n    constructor(readonly address: Address) {}\n\n    static createFromAddress(address: Address) {\n        return new Parent(address)\n    }\n\n    async getWalletAddress(provider: ContractProvider, owner: Address): Promise<Address> {\n        const tb = new TupleBuilder()\n        tb.writeAddress(owner)\n        const { stack } = await provider.get('get_wallet_address', tb.build())\n        return stack.readAddress()\n    }\n}\n","import { Address, Contract, ContractProvider, Dictionary } from '@ton/ton'\n\nexport interface WalletState {\n    tokens: bigint\n    staking: Dictionary<bigint, bigint>\n    unstaking: bigint\n}\n\nexport class Wallet implements Contract {\n    constructor(readonly address: Address) {}\n\n    static createFromAddress(address: Address) {\n        return new Wallet(address)\n    }\n\n    async getWalletState(provider: ContractProvider): Promise<WalletState> {\n        const { stack } = await provider.get('get_wallet_state', [])\n        return {\n            tokens: stack.readBigNumber(),\n            staking: Dictionary.loadDirect(\n                Dictionary.Keys.BigUint(32),\n                Dictionary.Values.BigVarUint(4),\n                stack.readCellOpt(),\n            ),\n            unstaking: stack.readBigNumber(),\n        }\n    }\n}\n","import { Address, fromNano } from \"@ton/ton\"; \n\nexport const truncateTONAddress = (address: Address) => {\n    const addressString = address.toString()\n    if (addressString.length <= 12) return addressString;\n    return `${addressString.slice(0, 6)}...${addressString.slice(-6)}`;\n};\n\n// Helper function to format numbers with 2 decimal places\nexport const formatTON = (value: bigint) => {\n    const num = parseFloat(fromNano(value));\n    return num.toFixed(2);\n};","import {\n    elizaLogger,\n    composeContext,\n    type Content,\n    type HandlerCallback,\n    ModelClass,\n    generateObject,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { z } from \"zod\";\nimport { initStakingProvider, IStakingProvider } from \"../providers/staking\";\n\nexport interface UnstakeContent extends Content {\n    poolId: string;\n    amount: string | number;\n}\n\nfunction isUnstakeContent(content: Content): content is UnstakeContent {\n    return (\n        typeof content.poolId === \"string\" &&\n        (typeof content.amount === \"string\" ||\n            typeof content.amount === \"number\")\n    );\n}\n\nconst unstakeTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"poolId\": \"pool123\",\n    \"amount\": \"1.0\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information for unstaking TON:\n- Pool identifier (poolId)\n- Amount to unstake\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport class UnstakeAction {\n    constructor(private stakingProvider: IStakingProvider) {}\n\n    async unstake(params: UnstakeContent): Promise<string> {\n        elizaLogger.log(\n            `Unstaking: ${params.amount} TON from pool (${params.poolId})`\n        );\n        try {\n            // Call the staking provider's unstake method.\n            return await this.stakingProvider.unstake(\n                params.poolId,\n                Number(params.amount)\n            );\n        } catch (error) {\n            throw new Error(`Unstaking failed: ${error.message}`);\n        }\n    }\n}\n\nconst buildUnstakeDetails = async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State\n): Promise<UnstakeContent> => {\n    if (!state) {\n        state = (await runtime.composeState(message)) as State;\n    } else {\n        state = await runtime.updateRecentMessageState(state);\n    }\n    const unstakeSchema = z.object({\n        poolId: z.string(),\n        amount: z.union([z.string(), z.number()]),\n    });\n\n    const unstakeContext = composeContext({\n        state,\n        template: unstakeTemplate,\n    });\n\n    const content = await generateObject({\n        runtime,\n        context: unstakeContext,\n        schema: unstakeSchema,\n        modelClass: ModelClass.SMALL,\n    });\n\n    return content.object as UnstakeContent;\n};\n\nexport default {\n    name: \"WITHDRAW_TON\",\n    similes: [\"UNSTAKE_TOKENS\", \"WITHDRAW_TON\", \"TON_UNSTAKE\"],\n    description:\n        \"Withdraw TON tokens from a specified pool.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting WITHDRAW_TON handler...\");\n        const unstakeDetails = await buildUnstakeDetails(\n            runtime,\n            message,\n            state\n        );\n\n        if (!isUnstakeContent(unstakeDetails)) {\n            elizaLogger.error(\"Invalid content for WITHDRAW_TON action.\");\n            if (callback) {\n                callback({\n                    text: \"Invalid unstake details provided.\",\n                    content: { error: \"Invalid unstake content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const stakingProvider = await initStakingProvider(runtime);\n            const action = new UnstakeAction(stakingProvider);\n            const txHash = await action.unstake(unstakeDetails);\n\n            if (callback) {\n                callback({\n                    text: `Successfully unstaked ${unstakeDetails.amount} TON from pool ${unstakeDetails.poolId}. Transaction: ${txHash}`,\n                    content: {\n                        success: true,\n                        hash: txHash,\n                        amount: unstakeDetails.amount,\n                        poolId: unstakeDetails.poolId,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during unstaking:\", error);\n            if (callback) {\n                callback({\n                    text: `Error unstaking TON: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    template: unstakeTemplate,\n    validate: async (runtime: IAgentRuntime) => true,\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Withdraw 1 TON from pool pool123\",\n                    action: \"WITHDRAW_TON\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll unstake 1 TON now...\",\n                    action: \"WITHDRAW_TON\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully unstaked 1 TON from pool pool123, Transaction: efgh5678abcd1234\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"withdraw 12 TON from pool eqw237595asd432\",\n                    action: \"WITHDRAW_TON\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Withdrawing 12 TON right now...\",\n                    action: \"WITHDRAW_TON\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully unstaked 12 TON from pool eqw237595asd432, Transaction: efgesdrf234h5678abcd1234\",\n                },\n            },\n        ],\n    ],\n};\n","import {\n    elizaLogger,\n    composeContext,\n    type Content,\n    type HandlerCallback,\n    ModelClass,\n    generateObject,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { z } from \"zod\";\nimport { initStakingProvider, IStakingProvider } from \"../providers/staking\";\n\n\nexport interface PoolInfoContent extends Content {\n    poolId: string;\n}\n\nfunction isPoolInfoContent(content: Content): content is PoolInfoContent {\n    return typeof content.poolId === \"string\";\n}\n\nconst getPoolInfoTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"poolId\": string\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the pool identifier (TON address) for which to fetch staking pool information.\n\nRespond with a JSON markdown block containing only the extracted value.`;\n\nexport class GetPoolInfoAction {\n    constructor(private stakingProvider: IStakingProvider) {}\n\n    async getPoolInfo(params: PoolInfoContent): Promise<any> {\n        elizaLogger.log(`Fetching pool info for pool (${params.poolId})`);\n        try {\n            // Call the staking provider's getPoolInfo method.\n            const poolInfo = await this.stakingProvider.getFormattedPoolInfo(\n                params.poolId,\n            );\n            return poolInfo;\n        } catch (error) {\n            throw new Error(`Fetching pool info failed: ${error.message}`);\n        }\n    }\n}\n\nconst buildPoolInfoDetails = async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n): Promise<PoolInfoContent> => {\n    if (!state) {\n        state = (await runtime.composeState(message)) as State;\n    } else {\n        state = await runtime.updateRecentMessageState(state);\n    }\n    const poolInfoSchema = z.object({\n        poolId: z.string(),\n    });\n\n    const poolInfoContext = composeContext({\n        state,\n        template: getPoolInfoTemplate,\n    });\n\n    const content = await generateObject({\n        runtime,\n        context: poolInfoContext,\n        schema: poolInfoSchema,\n        modelClass: ModelClass.SMALL,\n    });\n\n    return content.object as PoolInfoContent;\n};\n\nexport default {\n    name: \"GET_POOL_INFO\",\n    similes: [\"FETCH_POOL_INFO\", \"POOL_DATA\", \"GET_STAKING_INFO\"],\n    description: \"Fetch detailed global staking pool information. Only perform if user is asking for a specific Pool Info, and NOT your stake.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: HandlerCallback,\n    ) => {\n        elizaLogger.log(\"Starting GET_POOL_INFO handler...\");\n        const poolInfoDetails = await buildPoolInfoDetails(\n            runtime,\n            message,\n            state,\n        );\n\n        if (!isPoolInfoContent(poolInfoDetails)) {\n            elizaLogger.error(\"Invalid content for GET_POOL_INFO action.\");\n            if (callback) {\n                callback({\n                    text: \"Invalid pool info details provided.\",\n                    content: { error: \"Invalid pool info content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const stakingProvider = await initStakingProvider(runtime);\n            const action = new GetPoolInfoAction(stakingProvider);\n            const poolInfo = await action.getPoolInfo(poolInfoDetails);\n\n            if (callback) {\n                callback({\n                    text: `Successfully fetched pool info: \\n${poolInfo}`,\n                    content: poolInfo,\n                });\n            }\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error fetching pool info:\", error);\n            if (callback) {\n                callback({\n                    text: `Error fetching pool info: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    template: getPoolInfoTemplate,\n    validate: async (runtime: IAgentRuntime) => true,\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get info for pool pool123\",\n                    action: \"GET_POOL_INFO\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Fetching pool info...\",\n                    action: \"GET_POOL_INFO\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: 'Fetched pool info for pool pool123: { \"totalStaked\": 1000, \"rewardRate\": 0.05, ...}',\n                },\n            },\n        ],\n    ],\n};","import {\n    elizaLogger,\n    composeContext,\n    generateObject,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    Content,\n  } from \"@elizaos/core\";\n  import { Address, beginCell, internal, JettonMaster, SendMode, toNano } from \"@ton/ton\";\n  import { Builder } from \"@ton/ton\";\n  import { z } from \"zod\";\n  import { initWalletProvider, nativeWalletProvider, WalletProvider } from \"../providers/wallet\";\n  import { base64ToHex, sanitizeTonAddress, sleep, waitSeqnoContract } from \"../utils/util\";\n  \n  export interface SingleTransferContent {\n    type: \"ton\" | \"token\" | \"nft\";\n    recipientAddress: string;\n    amount?: string;\n    tokenId?: string;\n    jettonMasterAddress?: string;\n    metadata?: string;\n  }\n  \n  export type BatchTransferContent = SingleTransferContent[];\n  \n  interface Report {\n    type: string;\n    recipientAddress: string;\n    amount?: string;\n    tokenId?: string;\n    status: string;\n    error?: string;\n  }\n  \n  interface ReportWithMessage {\n    report: Report;\n    message?: any;\n  }\n  \n  // Schema for each transfer item in the batch.\n  const transferItemSchema = z\n    .object({\n      type: z.enum([\"ton\", \"token\", \"nft\"]),\n      recipientAddress: z.string().nonempty(\"Recipient address is required\"),\n      amount: z.string().optional(),\n      tokenId: z.string().optional(),\n      jettonMasterAddress: z.string().optional(),\n      metadata: z.string().optional(),\n    })\n    // TON transfers require an amount.\n    .refine((data) => (data.type === \"ton\" ? !!data.amount : true), {\n      message: \"Amount is required for TON transfers\",\n      path: [\"amount\"],\n    })\n    // Token transfers require jettonMasterAddress and amount\n    .refine((data) => (data.type === \"token\" ? !!data.jettonMasterAddress : true), {\n      message: \"jettonMasterAddress is required for token transfers\",\n      path: [\"jettonMasterAddress\"],\n    })\n    .refine((data) => (data.type === \"token\" ? !!data.amount : true), {\n      message: \"Amount is required for token transfers\",\n      path: [\"amount\"],\n    })\n    // NFT transfers require a tokenId\n    .refine((data) => (data.type === \"nft\" ? !!data.tokenId : true), {\n      message: \"tokenId is required for NFT transfers\",\n      path: [\"tokenId\"],\n    });\n  \n  // Schema for a batch transfer request with relaxed validation\n  const batchTransferSchema = z.union([\n    transferItemSchema,\n    z.array(transferItemSchema)\n  ])\n  .transform(data => {\n    // Normalize to array\n    return Array.isArray(data) ? data : [data];\n  });\n  \n  const batchTransferTemplate = `Return a JSON array for the transfer(s). The response should contain no schema information or additional properties.\n  \n  Example:\n  [\n    {\n      \"type\": \"ton\",\n      \"recipientAddress\": \"address1\",\n      \"amount\": \"1\"\n    },\n    {\n      \"type\": \"token\",\n      \"recipientAddress\": \"address2\",\n      \"amount\": \"1\",\n      \"jettonMasterAddress\": \"master1\"\n    },\n    {\n      \"type\": \"nft\",\n      \"recipientAddress\": \"address3\",\n      \"tokenId\": \"nft1\"\n    }\n  ]\n  \n  Rules:\n  - Each recipient address should appear only once per asset type\n  - Each token (jettonMasterAddress) should appear only once\n  - Each NFT (tokenId) should appear only once\n  - Do not create both NFT and token transfers for the same address\n  - Amounts are required for TON and token transfers\n  - JettonMasterAddress is required for token transfers\n  - TokenId is required for NFT transfers\n  \n  {{recentMessages}}\n  \n  IMPORTANT: Return ONLY the transfer object(s) with no schema information or wrapper object.`;\n  \n  type TransferItem = z.infer<typeof transferItemSchema>;\n  \n  function isBatchTransferContent(content: any): content is BatchTransferContent {\n    if (Array.isArray(content)) {\n      return content.every(transfer => transferItemSchema.safeParse(transfer).success);\n    }\n    return transferItemSchema.safeParse(content).success;\n  }\n  \n  /**\n   * Deduplicates transfer items based on type and relevant properties.\n   * Rules:\n   * - Keep only one TON transfer per recipient\n   * - Keep only one token transfer per jettonMasterAddress\n   * - Keep only one NFT transfer per tokenId\n   * - Don't allow both NFT and token transfers for the same address\n   */\n  function deduplicateTransfers(transfers: BatchTransferContent): BatchTransferContent {\n    const uniqueTransfers = new Map<string, SingleTransferContent>();\n    const processedRecipients = new Map<string, Set<string>>();\n\n    for (const transfer of transfers) {\n      let key: string;\n      \n      // Initialize recipient's transfer types set if not exists\n      if (!processedRecipients.has(transfer.recipientAddress)) {\n        processedRecipients.set(transfer.recipientAddress, new Set());\n      }\n      const recipientTransfers = processedRecipients.get(transfer.recipientAddress)!;\n\n      // Generate unique key and check conditions based on transfer type\n      switch (transfer.type) {\n        case 'ton':\n          key = `ton:${transfer.recipientAddress}`;\n          break;\n        case 'token':\n          if (recipientTransfers.has('token') || recipientTransfers.has('nft')) {\n            continue; // Skip if recipient already has token/nft transfer\n          }\n          key = `token:${transfer.jettonMasterAddress}`;\n          break;\n        case 'nft':\n          if (recipientTransfers.has('token') || recipientTransfers.has('nft')) {\n            continue; // Skip if recipient already has token/nft transfer\n          }\n          key = `nft:${transfer.tokenId}`;\n          break;\n        default:\n          continue;\n      }\n\n      // Store transfer if key is unique\n      if (!uniqueTransfers.has(key)) {\n        uniqueTransfers.set(key, transfer);\n        recipientTransfers.add(transfer.type);\n      }\n    }\n\n    const result = Array.from(uniqueTransfers.values());\n    // console.log('Deduplication input:', transfers);\n    // console.log('Deduplication output:', result);\n    return result;\n  }\n  \n  /**\n   * BatchTransferAction encapsulates the core logic for creating a batch transfer which can include\n   * TON coins, fungible tokens (e.g., Jettons), and NFTs. Each transfer item is processed individually,\n   * and any errors are recorded per item.\n   */\n  export class BatchTransferAction {\n    private walletProvider: WalletProvider;\n    constructor(walletProvider: WalletProvider) {\n      this.walletProvider = walletProvider;\n    }\n  \n    /**\n     * Build a TON transfer message.\n     */\n    private buildTonTransfer(item: TransferItem): ReportWithMessage{\n      const message = internal({\n        to: Address.parse(item.recipientAddress),\n        value: toNano(item.amount!),\n        bounce: true,\n        body: \"\",\n      });\n      return {\n        report: {\n          type: item.type,\n          recipientAddress: item.recipientAddress,\n          amount: item.amount,\n          status: \"pending\",\n        },\n        message,\n      };\n    }\n  \n    /**\n     * Build a token transfer message.\n     */\n    private async buildTokenTransfer(item: TransferItem): Promise<ReportWithMessage> {\n      const tokenAddress = Address.parse(item.jettonMasterAddress!);\n      const client = this.walletProvider.getWalletClient();\n      const jettonMaster = client.open(JettonMaster.create(tokenAddress));\n      \n      const jettonWalletAddress = await jettonMaster.getWalletAddress(this.walletProvider.wallet.address);\n      \n      const forwardPayload = beginCell()\n        .storeUint(0, 32) // 0 opcode means we have a comment\n        .storeStringTail(item.metadata || \"Hello, TON!\")\n        .endCell();\n  \n      const tokenTransferBody = new Builder()\n        .storeUint(0x0f8a7ea5, 32)\n        .storeUint(0, 64)\n        .storeCoins(toNano(item.amount!))\n        .storeAddress(Address.parse(item.recipientAddress))\n        .storeAddress(Address.parse(item.recipientAddress))\n        .storeBit(0)\n        .storeCoins(toNano(\"0.02\"))\n        .storeBit(1)\n        .storeRef(forwardPayload)\n        .endCell();\n  \n      const message = internal({\n        to: jettonWalletAddress,\n        value: toNano('0.1'),\n        bounce: true,\n        body: tokenTransferBody,\n      });\n  \n      const report: ReportWithMessage = {\n        report: {\n          type: item.type,\n          recipientAddress: item.recipientAddress,\n          tokenId: item.tokenId,\n          amount: item.amount,\n          status: \"pending\",\n        },\n        message,\n    };\n      return report;\n    }\n  \n    /**\n     * Build an NFT transfer message.\n     */\n    private buildNftTransfer(item: TransferItem): ReportWithMessage {\n      const nftTransferBody = beginCell()\n        .storeUint(0x5fcc3d14, 32) // OP transfer\n        .storeUint(0, 64) // query_id\n        .storeAddress(Address.parse(item.recipientAddress)) // new_owner\n        .storeAddress(this.walletProvider.wallet.address) // response_destination (sender's address)\n        .storeMaybeRef(null) // custom_payload (null in this case)\n        .storeCoins(toNano('0.01')) // forward_amount (0.01 TON for notification)\n        .storeMaybeRef(null) // forward_payload (null in this case)\n        .endCell();\n  \n      const message = internal({\n        to: Address.parse(item.tokenId!),\n        value: toNano('0.05'), // Gas fee for the transfer\n        bounce: true,\n        body: nftTransferBody,\n      });\n  \n      return {\n        message,\n        report: {\n          type: item.type,\n          recipientAddress: item.recipientAddress,\n          tokenId: item.tokenId,\n          status: \"pending\",\n        },\n      };\n    }\n  \n    private async processTransferItem(item: TransferItem): Promise<ReportWithMessage> {\n      const recipientAddress = sanitizeTonAddress(item.recipientAddress);\n      if (!recipientAddress) {\n        throw new Error(`Invalid recipient address: ${item.recipientAddress}`);\n      }\n      item.recipientAddress = recipientAddress;\n\n      if (item.type === \"nft\" && item.tokenId) {\n        const tokenAddress = sanitizeTonAddress(item.tokenId);\n        if (!tokenAddress) {\n          throw new Error(`Invalid token address: ${item.tokenId}`);\n        }\n        item.tokenId = tokenAddress;\n      }\n\n      switch (item.type) {\n        case \"ton\":\n          return this.buildTonTransfer(item);\n        case \"token\":\n          elizaLogger.debug(`Processing token transfer to ${recipientAddress} for token ${item.jettonMasterAddress}`);\n          const result = await this.buildTokenTransfer(item);\n          elizaLogger.debug(`Token transfer build complete`);\n          return result;\n        case \"nft\":\n          return this.buildNftTransfer(item);\n        default:\n          throw new Error(`Unsupported transfer type: ${item.type}`);\n      }\n    }\n\n    private async executeTransfer(messages: any[], transferReports: Report[]): Promise<string | null> {\n      try {\n        const walletClient = this.walletProvider.getWalletClient();\n        const contract = walletClient.open(this.walletProvider.wallet);\n\n        const seqno: number = await contract.getSeqno();\n        await sleep(1500);\n\n        const transfer = await contract.createTransfer({\n          seqno,\n          secretKey: this.walletProvider.keypair.secretKey,\n          messages,\n          sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n        });\n\n        await sleep(1500);\n        await contract.send(transfer);\n\n        await waitSeqnoContract(seqno, contract);\n        const state = await walletClient.getContractState(this.walletProvider.wallet.address);\n        const { hash: lastHash } = state.lastTransaction;\n        const txHash = base64ToHex(lastHash);\n\n        elizaLogger.log(JSON.stringify(transfer));\n\n        // Update reports for successfully processed transfers\n        transferReports.forEach(report => {\n          if (report.status === \"pending\") {\n            report.status = \"success\";\n          }\n        });\n\n        return txHash;\n      } catch (error: any) {\n        // Mark any pending transfers as failures\n        transferReports.forEach(report => {\n          if (report.status === \"pending\") {\n            report.status = \"failure\";\n            report.error = error.message;\n          }\n        });\n        console.error(JSON.stringify(error));\n        elizaLogger.error(\"Error during batch transfer:\", JSON.stringify(error));\n        return null;\n      }\n    }\n\n    /**\n     * Creates a batch transfer based on an array of transfer items.\n     * Each item is processed with a try/catch inside the for loop to ensure that individual errors\n     * do not abort the entire batch.\n     *\n     * @param params - The batch transfer input parameters.\n     * @returns An object with a detailed report for each transfer.\n     */\n    async createBatchTransfer(params: BatchTransferContent): Promise<{hash?: string; reports: Report[]}> {\n      // Deduplicate transfers before processing\n      const uniqueTransfers = deduplicateTransfers(params);\n      \n      const processResults = await Promise.all(\n        uniqueTransfers.map(async (item) => {\n          try {\n            elizaLogger.debug(`Processing transfer item of type ${item.type}`);\n            const result = await this.processTransferItem(item);\n            return {\n              success: true,\n              message: result.message,\n              report: result.report\n            };\n          } catch (error: any) {\n            elizaLogger.error(`Error processing transfer: ${error.message}`);\n            return {\n              success: false,\n              message: null,\n              report: {\n                type: item.type,\n                recipientAddress: item.recipientAddress,\n                amount: item.amount,\n                tokenId: item.tokenId,\n                status: \"failure\",\n                error: error.message,\n              }\n            };\n          }\n        })\n      );\n\n      const transferReports: Report[] = [];\n      const messages: any[] = [];\n\n      processResults.forEach(result => {\n        if (result.success && result.message) {\n          messages.push(result.message);\n        }\n        transferReports.push(result.report);\n      });\n\n      const hash = await this.executeTransfer(messages, transferReports);\n      return { hash, reports: transferReports };\n    }\n  }\n  \n  \n  const buildBatchTransferDetails = async (\n      runtime: IAgentRuntime,\n      message: Memory,\n      state: State,\n  ): Promise<BatchTransferContent> => {\n      const walletInfo = await nativeWalletProvider.get(runtime, message, state);\n      state.walletInfo = walletInfo;\n  \n      // Initialize or update state\n      let currentState = state;\n      if (!currentState) {\n          currentState = (await runtime.composeState(message)) as State;\n      } else {\n          currentState = await runtime.updateRecentMessageState(currentState);\n      }\n  \n  \n      // Compose transfer context\n      const batchTransferContext = composeContext({\n          state,\n          template: batchTransferTemplate,\n      });\n  \n      // Generate transfer content with the schema\n      const content = await generateObject({\n          runtime,\n          context: batchTransferContext,\n          schema: batchTransferSchema,\n          modelClass: ModelClass.SMALL,\n      });\n  \n      let batchTransferContent: BatchTransferContent = content.object as BatchTransferContent;\n  \n      if (batchTransferContent === undefined) {\n          batchTransferContent = content as unknown as BatchTransferContent;\n      }\n  \n      return batchTransferContent;\n  };\n  \n  export default {\n    name: \"BATCH_TRANSFER\",\n    similes: [\"BATCH_ASSET_TRANSFER\", \"MULTI_ASSET_TRANSFER\"],\n    description:\n      \"Creates a unified batch transfer for TON coins, tokens (e.g., Jettons), and NFTs. \" +\n      \"Supports flexible input parameters including recipient addresses, amounts, token identifiers, and optional metadata. \" +\n      \"Returns a detailed report summarizing the outcome for each transfer.\",\n    handler: async (\n      runtime: IAgentRuntime,\n      message: Memory,\n      state: State,\n      options: any,\n      callback?: HandlerCallback\n    ) => {\n      elizaLogger.log(\"Starting BATCH_TRANSFER handler...\");\n  \n      const details: BatchTransferContent = await buildBatchTransferDetails(runtime, message, state);\n      console.log(details);\n      if(!isBatchTransferContent(details)) {\n          console.error(\"Invalid content for BATCH_TRANSFER action.\");\n          if (callback) {\n              callback({\n                  text: \"Unable to process transfer request. Invalid content provided.\",\n                  content: { error: \"Invalid transfer content\" },\n              });\n          }\n          return false;\n      }\n      try {\n  \n        const walletProvider = await initWalletProvider(runtime);\n        const batchTransferAction = new BatchTransferAction(walletProvider);\n        const res = await batchTransferAction.createBatchTransfer(details);\n        let text = \"\";\n  \n        const reports: Report[] = res.reports;\n        if(!res.hash) {\n          // for each failed result i want to describe the error in the final message\n          const erroredReports = reports.filter((report: Report) => report.error);\n          erroredReports.forEach((report: Report) => {\n            text += `Error in transfer to ${report.recipientAddress}: ${report.error}\\n\\n`;\n          });\n        }\n  \n        if(text === \"\") {\n          text = `Batch transfer processed successfully. \\n\\n${reports.map((report: Report) => `Transfer to ${report.recipientAddress} ${report.status === \"success\" ? \"succeeded\" : \"failed\"}`).join(\"\\n\")} \\n\\nTotal transfers: ${reports.length} \\n\\nTransaction hash: ${res.hash}`;\n        }\n  \n        if (callback) {\n          callback({\n            text: text,\n            content: reports,\n          });\n        }\n      } catch (error: any) {\n        elizaLogger.error(\"Error in BATCH_TRANSFER handler:\", error);\n        if (callback) {\n          callback({\n            text: `Error in BATCH_TRANSFER: ${error.message}`,\n            content: { error: error.message },\n          });\n        }\n      }\n      return true;\n    },\n    template: batchTransferTemplate,\n    validate: async (_runtime: IAgentRuntime) => true,\n    examples: [\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Transfer 1 TON to 0QBLy_5Fr6f8NSpMt8SmPGiItnUE0JxgTJZ6m6E8aXoLtJHB and 1 SCALE token to 0QBLy_5Fr6f8NSpMt8SmPGiItnUE0JxgTJZ6m6E8aXoLtJHB\",\n            action: \"BATCH_TRANSFER\"\n          }\n        },\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Batch transfer processed successfully\",\n          },\n        },\n      ],\n    ],\n  }; ","import {\n  elizaLogger,\n  composeContext,\n  generateObject,\n  ModelClass,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  type HandlerCallback,\n  Content,\n} from \"@elizaos/core\";\nimport { Address, internal, SendMode, toNano, beginCell } from \"@ton/ton\";\nimport { Builder } from \"@ton/ton\";\nimport { z } from \"zod\";\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport { waitSeqnoContract } from \"../utils/util\";\nimport { buildNftFixPriceSaleV3R3DeploymentBody, destinationAddress, marketplaceAddress, marketplaceFeeAddress } from \"../services/nft-marketplace/listingFactory\";\n\n/**\n * Schema for auction interaction input.\n *\n * - auctionAddress: The auction contract address.\n * - auctionAction: One of \"getAuctionData\", \"bid\", \"stop\", \"cancel\", \"list\", \"buy\", \"changePrice\", \"addValue\", \"cancelOffer\", \"getOfferData\".\n * - bidAmount: For a bid action, the bid value (e.g., \"2\" for 2 TON) as a string.\n * - senderAddress: For actions that send an internal message (bid, stop, cancel); represents the caller's address.\n * - nftAddress: For a list action, the NFT contract address.\n * - fullPrice: For a list action, the full price of the NFT in TON.\n * - marketplaceAddress: For a list action, the marketplace contract address.\n * - marketplaceFeeAddress: For a list action, the fee recipient address.\n * - marketplaceFeePercent: For a list action, the marketplace fee percentage.\n * - royaltyAddress: For a list action, the royalty recipient address.\n * - royaltyPercent: For a list action, the royalty percentage.\n * - newPrice: For a changePrice action, the new price of the NFT in TON.\n * - additionalValue: For addValue action, the additional value to add to the offer.\n */\nconst OP_CODES = {\n  FIX_PRICE_BUY: 2n,\n  FIX_PRICE_CANCEL: 3n,\n  FIX_PRICE_CHANGE_PRICE: 0xfd135f7bn,\n  OFFER_CANCEL: 3n,\n} as const;\n\nconst auctionInteractionSchema = z\n  .object({\n    auctionAddress: z.string().nonempty(\"Auction address is required\"),\n    auctionAction: z.enum([\n      \"getAuctionData\",\n      \"bid\",\n      \"stop\",\n      \"cancel\",\n      \"list\",\n      \"buy\",\n      \"changePrice\",\n      \"addValue\",\n      \"cancelOffer\",\n      \"getOfferData\",\n    ]),\n    bidAmount: z.string().optional(),\n    senderAddress: z.string().optional(),\n    nftAddress: z.string().optional(),\n    fullPrice: z.string().optional(),\n    marketplaceAddress: z.string().optional(),\n    marketplaceFeeAddress: z.string().optional(),\n    marketplaceFeePercent: z.number().optional(),\n    royaltyAddress: z.string().optional(),\n    royaltyPercent: z.number().optional(),\n    newPrice: z.string().optional(),\n    additionalValue: z.string().optional(),\n  })\n  .refine(\n    (data) =>\n      data.auctionAction !== \"bid\" ||\n      (data.auctionAction === \"bid\" && data.bidAmount && data.senderAddress),\n    {\n      message: \"For a bid action, bidAmount and senderAddress are required\",\n      path: [\"bidAmount\", \"senderAddress\"],\n    }\n  )\n  .refine(\n    (data) =>\n      (data.auctionAction === \"stop\" || data.auctionAction === \"cancel\") ===\n        false || !!data.senderAddress,\n    {\n      message: \"For stop or cancel actions, senderAddress is required\",\n      path: [\"senderAddress\"],\n    }\n  )\n  .refine(\n    (data) =>\n      data.auctionAction !== \"list\" ||\n      (data.auctionAction === \"list\" &&\n        data.nftAddress &&\n        data.fullPrice &&\n        data.marketplaceAddress &&\n        data.marketplaceFeeAddress &&\n        data.marketplaceFeePercent &&\n        data.royaltyAddress &&\n        data.royaltyPercent),\n    {\n      message: \"For list action, all NFT sale parameters are required\",\n      path: [\"nftAddress\", \"fullPrice\", \"marketplaceAddress\"],\n    }\n  )\n  .refine(\n    (data) =>\n      data.auctionAction !== \"changePrice\" ||\n      (data.auctionAction === \"changePrice\" && data.newPrice),\n    {\n      message: \"For changePrice action, newPrice is required\",\n      path: [\"newPrice\"],\n    }\n  )\n  .refine(\n    (data) =>\n      data.auctionAction !== \"addValue\" ||\n      (data.auctionAction === \"addValue\" && data.additionalValue),\n    {\n      message: \"For addValue action, additionalValue is required\",\n      path: [\"additionalValue\"],\n    }\n  );\n\nexport interface AuctionInteractionContent extends Content {\n  auctionAddress: string;\n  auctionAction:\n    | \"getAuctionData\"\n    | \"bid\"\n    | \"stop\"\n    | \"cancel\"\n    | \"list\"\n    | \"buy\"\n    | \"changePrice\"\n    | \"addValue\"\n    | \"cancelOffer\"\n    | \"getOfferData\";\n  bidAmount?: string;\n  senderAddress?: string;\n  nftAddress?: string;\n  fullPrice?: string;\n  marketplaceAddress?: string;\n  marketplaceFeeAddress?: string;\n  marketplaceFeePercent?: number;\n  royaltyAddress?: string;\n  royaltyPercent?: number;\n  newPrice?: string;\n  additionalValue?: string;\n}\n\nfunction isAuctionInteractionContent(\n  content: Content\n): content is AuctionInteractionContent {\n  return (\n    typeof content.auctionAddress === \"string\" &&\n    typeof content.auctionAction === \"string\"\n  );\n}\n\nconst auctionInteractionTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\nExample response:\n\\`\\`\\`json\n{\n  \"auctionAddress\": \"<Auction contract address>\",\n  \"auctionAction\": \"<getAuctionData|bid|stop|cancel|list|buy|changePrice|addValue|cancelOffer|getOfferData>\",\n  \"bidAmount\": \"<Bid amount in TON, required for 'bid' action>\",\n  \"senderAddress\": \"<Sender's TON address, required for actions other than 'getAuctionData'>\",\n  \"nftAddress\": \"<NFT address for listing>\",\n  \"fullPrice\": \"<Full price in TON>\",\n  \"marketplaceAddress\": \"<Marketplace address>\",\n  \"marketplaceFeeAddress\": \"<Fee recipient address>\",\n  \"marketplaceFeePercent\": \"<Marketplace fee percentage>\",\n  \"royaltyAddress\": \"<Royalty recipient address>\",\n  \"royaltyPercent\": \"<Royalty percentage>\",\n  \"newPrice\": \"<New price in TON>\",\n  \"additionalValue\": \"<Additional value for addValue action>\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\n/**\n * Helper function to build auction interaction parameters.\n */\nconst buildAuctionInteractionData = async (\n  runtime: IAgentRuntime,\n  message: Memory,\n  state: State\n): Promise<AuctionInteractionContent> => {\n  const context = composeContext({\n    state,\n    template: auctionInteractionTemplate,\n  });\n  const content = await generateObject({\n    runtime,\n    context,\n    schema: auctionInteractionSchema as any,\n    modelClass: ModelClass.SMALL,\n  });\n  return content.object as any;\n};\n\n/**\n * AuctionInteractionAction encapsulates the core logic to interact with an auction contract.\n */\nexport class AuctionInteractionAction {\n  private walletProvider: WalletProvider;\n  constructor(walletProvider: WalletProvider) {\n    this.walletProvider = walletProvider;\n  }\n\n  /**\n   * Retrieves auction sale data by calling the \"get_auction_data\" method on the auction contract.\n   * The decoding here is demonstrative; actual fields depend on your auction contract's ABI.\n   */\n  async getAuctionData(auctionAddress: string): Promise<any> {\n    const client = this.walletProvider.getWalletClient();\n    const addr = Address.parse(auctionAddress);\n    const result = await client.runMethod(addr, \"get_auction_data\");\n\n    // console.log(\"getSaleData result:\", result);\n\n    try {\n      const activated = result.stack.readNumber();\n      const end = result.stack.readNumber();\n      const end_time = result.stack.readNumber();\n      const mp_addr = result.stack.readAddress()?.toString() || \"\";\n      const nft_addr = result.stack.readAddress()?.toString() || \"\";\n      let nft_owner: string;\n      try {\n        nft_owner = result.stack.readAddress()?.toString() || \"\";\n      } catch (e) {\n        nft_owner = \"\";\n      }\n      const last_bid = result.stack.readNumber();\n      const last_member = result.stack.readAddress()?.toString() || \"\";\n      const min_step = result.stack.readNumber();\n      const mp_fee_addr = result.stack.readAddress()?.toString() || \"\";\n      const mp_fee_factor = result.stack.readNumber();\n      const mp_fee_base = result.stack.readNumber();\n      const royalty_fee_addr = result.stack.readAddress()?.toString() || \"\";\n      const royalty_fee_factor = result.stack.readNumber();\n      const royalty_fee_base = result.stack.readNumber();\n      const max_bid = result.stack.readNumber();\n      const min_bid = result.stack.readNumber();\n      let created_at: number | null = null;\n      try {\n        created_at = result.stack.readNumber();\n      } catch (e) {\n        created_at = null;\n      }\n      const last_bid_at = result.stack.readNumber();\n      const is_canceled = result.stack.readNumber();\n      const step_time = result.stack.readNumber();\n      const last_query_id = result.stack.readNumber();\n\n      return {\n        auctionAddress,\n        activated,\n        end,\n        end_time,\n        mp_addr,\n        nft_addr,\n        nft_owner,\n        last_bid,\n        last_member,\n        min_step,\n        mp_fee_addr,\n        mp_fee_factor,\n        mp_fee_base,\n        royalty_fee_addr,\n        royalty_fee_factor,\n        royalty_fee_base,\n        max_bid,\n        min_bid,\n        created_at,\n        last_bid_at,\n        is_canceled,\n        step_time,\n        last_query_id,\n        message: \"Auction sale data fetched successfully\",\n      };\n    } catch (parseError) {\n      elizaLogger.error(\"Error parsing sale data:\", parseError);\n      return { error: \"Failed to parse sale data\" };\n    }\n  }\n\n  /**\n   * Sends a bid by creating and sending an internal message with an empty bid body.\n   */\n  async bid(auctionAddress: string, bidAmount: string): Promise<any> {\n    const auctionAddr = Address.parse(auctionAddress);\n    // Create an empty cell for the bid message body.\n    const bidMessage = internal({\n      to: auctionAddr,\n      value: toNano(bidAmount),\n      bounce: true,\n      body: \"\",\n    });\n\n    const contract = this.walletProvider\n      .getWalletClient()\n      .open(this.walletProvider.wallet);\n\n    const seqno = await contract.getSeqno();\n    // Send message using the TON client.\n    const transfer = await contract.createTransfer({\n      seqno,\n      secretKey: this.walletProvider.keypair.secretKey,\n      messages: [bidMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n\n    await contract.send(transfer);\n    await waitSeqnoContract(seqno, contract);\n\n    return {\n      auctionAddress,\n      bidAmount,\n      message: \"Bid placed successfully\",\n    };\n  }\n\n  /**\n   * Sends a stop-auction message.\n   */\n  async stop(auctionAddress: string): Promise<any> {\n    const client = this.walletProvider.getWalletClient();\n    const contract = client.open(this.walletProvider.wallet);\n\n    const seqno = await contract.getSeqno();\n\n    const auctionAddr = Address.parse(auctionAddress);\n    // based on https://github.com/getgems-io/nft-contracts/blob/7654183fea73422808281c8336649b49ce9939a2/packages/contracts/nft-auction-v2/NftAuctionV2.data.ts#L86\n    const stopBody = new Builder()\n      .storeUint(0, 32)\n      .storeBuffer(Buffer.from(\"stop\"))\n      .endCell();\n    const stopMessage = internal({\n      to: auctionAddr,\n      value: toNano(\"0.05\"),\n      bounce: true,\n      body: stopBody,\n    });\n    const transfer = await contract.createTransfer({\n      seqno,\n      secretKey: this.walletProvider.keypair.secretKey,\n      messages: [stopMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n    await contract.send(transfer);\n    await waitSeqnoContract(seqno, contract);\n    return {\n      auctionAddress,\n      message: \"Stop auction message sent successfully\",\n    };\n  }\n\n  /**\n   * Sends a cancel auction message using a placeholder opcode (0xDEADBEEF).\n   */\n  async cancel(auctionAddress: string): Promise<any> {\n    const client = this.walletProvider.getWalletClient();\n    const contract = client.open(this.walletProvider.wallet);\n\n    const auctionAddr = Address.parse(auctionAddress);\n    // based on https://github.com/getgems-io/nft-contracts/blob/7654183fea73422808281c8336649b49ce9939a2/packages/contracts/nft-auction-v2/NftAuctionV2.data.ts#L90\n    const cancelBody = new Builder()\n      .storeUint(0, 32)\n      .storeBuffer(Buffer.from(\"cancel\"))\n      .endCell();\n    const seqno = await contract.getSeqno();\n    const cancelMessage = internal({\n      to: auctionAddr,\n      value: toNano(\"0.05\"),\n      bounce: true,\n      body: cancelBody,\n    });\n    const transfer = await contract.createTransfer({\n      seqno,\n      secretKey: this.walletProvider.keypair.secretKey,\n      messages: [cancelMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n    await contract.send(transfer);\n    await waitSeqnoContract(seqno, contract);\n    return {\n      auctionAddress,\n      message: \"Cancel auction message sent successfully\",\n    };\n  }\n\n  /**\n   * Lists an NFT for sale\n   */\n  async list(params: AuctionInteractionContent): Promise<any> {\n    const client = this.walletProvider.getWalletClient();\n    const contract = client.open(this.walletProvider.wallet);\n\n    const auctionAddr = Address.parse(params.auctionAddress);\n\n    //const saleData = {\n    //  isComplete: false,\n    //  marketplaceAddress: Address.parse(params.marketplaceAddress!),\n    //  nftOwnerAddress: this.walletProvider.wallet.address,\n    //  fullTonPrice: toNano(params.fullPrice!),\n    //  soldAtTime: 0,\n    //  soldQueryId: 0n,\n    //  marketplaceFeeAddress: Address.parse(params.marketplaceFeeAddress!),\n    //  royaltyAddress: Address.parse(params.royaltyAddress!),\n    //  marketplaceFeePercent: params.marketplaceFeePercent!,\n    //  royaltyPercent: params.royaltyPercent!,\n    //  nftAddress: Address.parse(params.nftAddress!),\n    //  createdAt: Math.floor(Date.now() / 1000),\n    //  publicKey: null,\n    //};\n\n    const fullPrice = toNano(params.fullPrice!);\n    const royalty = 5;\n    const fee = 5;\n\n    const saleData = {\n      nftAddress: Address.parse(params.nftAddress),\n      nftOwnerAddress: this.walletProvider.wallet.address,\n      deployerAddress: destinationAddress,\n      marketplaceAddress: marketplaceAddress,\n      marketplaceFeeAddress: marketplaceFeeAddress,\n      marketplaceFeePercent: (fullPrice / BigInt(100)) * BigInt(fee),\n      royaltyAddress: this.walletProvider.wallet.address,\n      royaltyPercent: (fullPrice / BigInt(100)) * BigInt(royalty),\n      fullTonPrice: fullPrice,\n    };\n\n    const saleBody = await buildNftFixPriceSaleV3R3DeploymentBody(saleData); //buildNftFixPriceSaleV4R1Data(saleData);\n\n    const seqno = await contract.getSeqno();\n    const listMessage = internal({\n      to: params.nftAddress,\n      value: toNano(\"0.3\"), // Sufficient value for all operations\n      bounce: true,\n      body: saleBody\n    });\n\n    const transfer = await contract.sendTransfer({\n      seqno,\n      secretKey: this.walletProvider.keypair.secretKey,\n      messages: [listMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n\n    await waitSeqnoContract(seqno, contract);\n\n    return {\n      auctionAddress: params.auctionAddress,\n      nftAddress: params.nftAddress,\n      fullPrice: params.fullPrice,\n      message: \"NFT listed for sale successfully\",\n    };\n  }\n\n  /**\n   * Buys an NFT from a fixed price sale contract\n   */\n  async buy(auctionAddress: string): Promise<any> {\n    const client = this.walletProvider.getWalletClient();\n    const contract = client.open(this.walletProvider.wallet);\n\n    const addr = Address.parse(auctionAddress);\n    const result = await client.runMethod(addr, \"get_fix_price_data_v4\");\n\n    const fullPrice = result.stack.readNumber();\n    const minGasAmount = toNano(\"0.1\"); // 0.1 TON as specified in contract\n\n    const seqno = await contract.getSeqno();\n    const buyMessage = internal({\n      to: addr,\n      value: BigInt(fullPrice) + minGasAmount,\n      bounce: true,\n      body: new Builder().storeUint(OP_CODES.FIX_PRICE_BUY, 32).endCell(),\n    });\n\n    const transfer = await contract.createTransfer({\n      seqno,\n      secretKey: this.walletProvider.keypair.secretKey,\n      messages: [buyMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n\n    await contract.send(transfer);\n    await waitSeqnoContract(seqno, contract);\n\n    return {\n      auctionAddress,\n      price: fullPrice.toString(),\n      message: \"Buy message sent successfully\",\n    };\n  }\n\n  /**\n   * Changes the price of a listed NFT\n   */\n  async changePrice(auctionAddress: string, newPrice: string): Promise<any> {\n    const client = this.walletProvider.getWalletClient();\n    const contract = client.open(this.walletProvider.wallet);\n\n    const addr = Address.parse(auctionAddress);\n    const seqno = await contract.getSeqno();\n\n    const changePriceMessage = internal({\n      to: addr,\n      value: toNano(\"0.05\"),\n      bounce: true,\n      body: new Builder()\n        .storeUint(OP_CODES.FIX_PRICE_CHANGE_PRICE, 32)\n        .storeCoins(toNano(newPrice))\n        .storeDict(undefined)\n        .endCell(),\n    });\n\n    const transfer = await contract.createTransfer({\n      seqno,\n      secretKey: this.walletProvider.keypair.secretKey,\n      messages: [changePriceMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n\n    await contract.send(transfer);\n    await waitSeqnoContract(seqno, contract);\n\n    return {\n      auctionAddress,\n      newPrice,\n      message: \"Price changed successfully\",\n    };\n  }\n\n  /**\n   * Adds value to an existing offer\n   */\n  async addValue(\n    auctionAddress: string,\n    additionalValue: string\n  ): Promise<any> {\n    const client = this.walletProvider.getWalletClient();\n    const contract = client.open(this.walletProvider.wallet);\n\n    const addr = Address.parse(auctionAddress);\n    const seqno = await contract.getSeqno();\n\n    const addValueMessage = internal({\n      to: addr,\n      value: toNano(additionalValue),\n      bounce: true,\n      body: new Builder().storeUint(0, 32).endCell(), // op = 0 for adding value\n    });\n\n    const transfer = await contract.createTransfer({\n      seqno,\n      secretKey: this.walletProvider.keypair.secretKey,\n      messages: [addValueMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n\n    await contract.send(transfer);\n    await waitSeqnoContract(seqno, contract);\n\n    return {\n      auctionAddress,\n      additionalValue,\n      message: \"Value added to offer successfully\",\n    };\n  }\n\n  /**\n   * Cancels an NFT offer\n   */\n  async cancelOffer(auctionAddress: string): Promise<any> {\n    const client = this.walletProvider.getWalletClient();\n    const contract = client.open(this.walletProvider.wallet);\n\n    const addr = Address.parse(auctionAddress);\n    const seqno = await contract.getSeqno();\n\n    const cancelMessage = internal({\n      to: addr,\n      value: toNano(\"0.05\"),\n      bounce: true,\n      body: new Builder().storeUint(OP_CODES.OFFER_CANCEL, 32).endCell(),\n    });\n\n    const transfer = await contract.createTransfer({\n      seqno,\n      secretKey: this.walletProvider.keypair.secretKey,\n      messages: [cancelMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n\n    await contract.send(transfer);\n    await waitSeqnoContract(seqno, contract);\n\n    return {\n      auctionAddress,\n      message: \"Offer cancelled successfully\",\n    };\n  }\n\n  /**\n   * Gets offer data\n   */\n  async getOfferData(auctionAddress: string): Promise<any> {\n    const client = this.walletProvider.getWalletClient();\n    const addr = Address.parse(auctionAddress);\n    const result = await client.runMethod(addr, \"get_offer_data_v2\");\n\n    // Read values individually from stack\n    const magic = result.stack.readNumber();\n    const isComplete = result.stack.readNumber();\n    const createdAt = result.stack.readNumber();\n    const finishAt = result.stack.readNumber();\n    const swapAt = result.stack.readNumber();\n    const marketplaceAddress = result.stack.readAddress();\n    const nftAddress = result.stack.readAddress();\n    const offerOwnerAddress = result.stack.readAddress();\n    const fullPrice = result.stack.readNumber();\n    const marketplaceFeeAddress = result.stack.readAddress();\n    const marketplaceFactor = result.stack.readNumber();\n    const marketplaceBase = result.stack.readNumber();\n    const royaltyAddress = result.stack.readAddress();\n    const royaltyFactor = result.stack.readNumber();\n    const royaltyBase = result.stack.readNumber();\n    const profitPrice = result.stack.readNumber();\n\n    return {\n      auctionAddress,\n      isComplete: isComplete.toString(),\n      createdAt: createdAt.toString(),\n      finishAt: finishAt.toString(),\n      swapAt: swapAt.toString(),\n      marketplaceAddress: marketplaceAddress?.toString() || \"\",\n      nftAddress: nftAddress?.toString() || \"\",\n      offerOwnerAddress: offerOwnerAddress?.toString() || \"\",\n      fullPrice: fullPrice.toString(),\n      marketplaceFeeAddress: marketplaceFeeAddress?.toString() || \"\",\n      marketplaceFactor: marketplaceFactor.toString(),\n      marketplaceBase: marketplaceBase.toString(),\n      royaltyAddress: royaltyAddress?.toString() || \"\",\n      royaltyFactor: royaltyFactor.toString(),\n      royaltyBase: royaltyBase.toString(),\n      profitPrice: profitPrice.toString(),\n      message: \"Offer data fetched successfully\",\n    };\n  }\n}\n\nexport default {\n  name: \"INTERACT_AUCTION\",\n  similes: [\"AUCTION_INTERACT\", \"AUCTION_ACTION\"],\n  description:\n    \"Interacts with an auction contract. Supports actions: getSaleData, bid, stop, and cancel.\",\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    options: any,\n    callback?: HandlerCallback\n  ) => {\n    elizaLogger.log(\"Starting INTERACT_AUCTION handler...\");\n    const params = await buildAuctionInteractionData(runtime, message, state);\n\n    if (!isAuctionInteractionContent(params)) {\n      if (callback) {\n        callback({\n          text: \"Unable to process auction interaction request. Invalid content provided.\",\n          content: { error: \"Invalid get auction interaction content\" },\n        });\n      }\n      return false;\n    }\n\n    try {\n      const walletProvider = await initWalletProvider(runtime);\n      const auctionAction = new AuctionInteractionAction(walletProvider);\n      let result: any;\n      switch (params.auctionAction) {\n        case \"getAuctionData\":\n          result = await auctionAction.getAuctionData(params.auctionAddress);\n          break;\n        case \"bid\":\n          result = await auctionAction.bid(\n            params.auctionAddress,\n            params.bidAmount!\n          );\n          break;\n        case \"stop\":\n          result = await auctionAction.stop(params.auctionAddress);\n          break;\n        case \"cancel\":\n          result = await auctionAction.cancel(params.auctionAddress);\n          break;\n        case \"list\":\n          result = await auctionAction.list(params);\n          break;\n        case \"buy\":\n          result = await auctionAction.buy(params.auctionAddress);\n          break;\n        case \"changePrice\":\n          result = await auctionAction.changePrice(\n            params.auctionAddress,\n            params.newPrice!\n          );\n          break;\n        case \"addValue\":\n          result = await auctionAction.addValue(\n            params.auctionAddress,\n            params.additionalValue!\n          );\n          break;\n        case \"cancelOffer\":\n          result = await auctionAction.cancelOffer(params.auctionAddress);\n          break;\n        case \"getOfferData\":\n          result = await auctionAction.getOfferData(params.auctionAddress);\n          break;\n        default:\n          throw new Error(\"Invalid auction action\");\n      }\n      if (callback) {\n        callback({\n          text: JSON.stringify(result, null, 2),\n          content: result,\n        });\n      }\n    } catch (error: any) {\n      elizaLogger.error(\"Error in INTERACT_AUCTION handler:\", error);\n      if (callback) {\n        callback({\n          text: `Error in INTERACT_AUCTION: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n    }\n    return true;\n  },\n  template: auctionInteractionTemplate,\n  // eslint-disable-next-line\n  validate: async (_runtime: IAgentRuntime) => {\n    return true;\n  },\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          auctionAddress: \"EQAuctionAddressExample\",\n          auctionAction: \"getAuctionData\",\n          action: \"INTERACT_AUCTION\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Auction sale data fetched successfully\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          auctionAddress: \"EQAuctionAddressExample\",\n          auctionAction: \"bid\",\n          bidAmount: \"2\",\n          senderAddress: \"EQBidderAddressExample\",\n          action: \"INTERACT_AUCTION\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Bid placed successfully\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          auctionAddress: \"EQAuctionAddressExample\",\n          auctionAction: \"stop\",\n          senderAddress: \"EQOwnerAddressExample\",\n          action: \"INTERACT_AUCTION\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Stop auction message sent successfully\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          auctionAddress: \"EQAuctionAddressExample\",\n          auctionAction: \"cancel\",\n          senderAddress: \"EQOwnerAddressExample\",\n          action: \"INTERACT_AUCTION\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Cancel auction message sent successfully\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          auctionAddress: \"EQAuctionAddressExample\",\n          auctionAction: \"list\",\n          nftAddress: \"EQNftAddressExample\",\n          fullPrice: \"10\",\n          marketplaceAddress: \"EQMarketplaceAddressExample\",\n          marketplaceFeeAddress: \"EQFeeAddressExample\",\n          marketplaceFeePercent: 5,\n          royaltyAddress: \"EQRoyaltyAddressExample\",\n          royaltyPercent: 2,\n          action: \"INTERACT_AUCTION\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"NFT listed for sale successfully\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          auctionAddress: \"EQAuctionAddressExample\",\n          auctionAction: \"buy\",\n          action: \"INTERACT_AUCTION\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Buy message sent successfully\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          auctionAddress: \"EQAuctionAddressExample\",\n          auctionAction: \"changePrice\",\n          newPrice: \"15\",\n          action: \"INTERACT_AUCTION\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Price changed successfully\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          auctionAddress: \"EQAuctionAddressExample\",\n          auctionAction: \"addValue\",\n          additionalValue: \"10\",\n          action: \"INTERACT_AUCTION\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Value added to offer successfully\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          auctionAddress: \"EQAuctionAddressExample\",\n          auctionAction: \"cancelOffer\",\n          action: \"INTERACT_AUCTION\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Offer cancelled successfully\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          auctionAddress: \"EQAuctionAddressExample\",\n          auctionAction: \"getOfferData\",\n          action: \"INTERACT_AUCTION\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Offer data fetched successfully\",\n        },\n      },\n    ],\n  ],\n};\n","import {\n  Address,\n  beginCell,\n  Cell,\n  StateInit,\n  storeStateInit,\n  toNano,\n  TupleReader,\n} from \"@ton/ton\";\n\nexport interface NftFixPriceSaleV4DR1Data {\n  isComplete: boolean;\n  marketplaceAddress: Address;\n  nftOwnerAddress: Address;\n  fullTonPrice: bigint;\n  soldAtTime: number;\n  soldQueryId: bigint;\n  marketplaceFeeAddress: Address;\n  royaltyAddress: Address;\n  marketplaceFeePercent: number;\n  royaltyPercent: number;\n  nftAddress: Address;\n  createdAt: number;\n}\n\nexport interface NftFixPriceSaleV3R3Data {\n  nftAddress: Address;\n  nftOwnerAddress: Address;\n  deployerAddress: Address;\n  marketplaceAddress: Address;\n  marketplaceFeeAddress: Address;\n  marketplaceFeePercent: bigint;\n  royaltyAddress: Address;\n  royaltyPercent: bigint;\n  fullTonPrice: bigint;\n}\n\nexport interface NftAuctionV3R3Data {\n  nftAddress: Address;\n  nftOwnerAddress: Address;\n  deployerAddress: Address;\n  marketplaceAddress: Address;\n  marketplaceFeeAddress: Address;\n  marketplaceFeePercent: bigint;\n  royaltyAddress: Address;\n  royaltyPercent: bigint;\n  minimumBid: bigint;\n  maximumBid: bigint;\n  expiryTime: number;\n}\n\nfunction assertPercent(value: number): number {\n  if (value < 0 || value > 100) throw new Error(\"Invalid percent value\");\n  return Math.floor(value * 1000);\n}\n\nexport function buildNftFixPriceSaleV4R1DeploymentBody(\n  cfg: NftFixPriceSaleV4DR1Data & { publicKey: Buffer | null }\n) {\n  return beginCell()\n    .storeBit(cfg.isComplete)\n    .storeAddress(cfg.marketplaceAddress)\n    .storeAddress(cfg.nftOwnerAddress)\n    .storeCoins(cfg.fullTonPrice)\n    .storeUint(cfg.soldAtTime, 32)\n    .storeUint(cfg.soldQueryId, 64)\n    .storeRef(\n      beginCell()\n        .storeAddress(cfg.marketplaceFeeAddress)\n        .storeAddress(cfg.royaltyAddress)\n        .storeUint(assertPercent(cfg.marketplaceFeePercent), 17)\n        .storeUint(assertPercent(cfg.royaltyPercent), 17)\n        .storeAddress(cfg.nftAddress)\n        .storeUint(cfg.createdAt, 32)\n        .endCell()\n    )\n    .storeDict(undefined) // empty jetton dict\n    .storeMaybeBuffer(cfg.publicKey, 256 / 8)\n    .endCell();\n}\n\nexport async function buildNftFixPriceSaleV3R3DeploymentBody(\n  cfg: NftFixPriceSaleV3R3Data\n) {\n  // func:0.4.4 src:op-codes.fc, imports/stdlib.fc, nft-fixprice-sale-v3r3.fc\n  // If GetGems updates its sale smart contract, you will need to obtain the new smart contract from https://github.com/getgems-io/nft-contracts/blob/main/packages/contracts/nft-fixprice-sale-v3/NftFixpriceSaleV3.source.ts.\n  const NftFixPriceSaleV3R3CodeBoc =\n    \"te6ccgECDwEAA5MAART/APSkE/S88sgLAQIBYgIDAgLNBAUCASANDgL30A6GmBgLjYSS+CcH0gGHaiaGmAaY/9IH0gfSB9AGppj+mfmBg4KYVjgGAASpiFaY+F7xDhgEoYBWmfxwjFsxsLcxsrZBZjgsk5mW8oBfEV4ADJL4dwEuuk4QEWQIEV3RXgAJFZ2Ngp5OOC2HGBFWAA+WjKFkEINjYQQF1AYHAdFmCEAX14QBSYKBSML7y4cIk0PpA+gD6QPoAMFOSoSGhUIehFqBSkCH6RFtwgBDIywVQA88WAfoCy2rJcfsAJcIAJddJwgKwjhtQRSH6RFtwgBDIywVQA88WAfoCy2rJcfsAECOSNDTiWoMAGQwMWyy1DDQ0wchgCCw8tGVIsMAjhSBAlj4I1NBobwE+CMCoLkTsPLRlpEy4gHUMAH7AATwU8fHBbCOXRNfAzI3Nzc3BPoA+gD6ADBTIaEhocEB8tGYBdD6QPoA+kD6ADAwyDICzxZY+gIBzxZQBPoCyXAgEEgQNxBFEDQIyMsAF8sfUAXPFlADzxYBzxYB+gLMyx/LP8ntVOCz4wIwMTcowAPjAijAAOMCCMACCAkKCwCGNTs7U3THBZJfC+BRc8cF8uH0ghAFE42RGLry4fX6QDAQSBA3VTIIyMsAF8sfUAXPFlADzxYBzxYB+gLMyx/LP8ntVADiODmCEAX14QAYvvLhyVNGxwVRUscFFbHy4cpwIIIQX8w9FCGAEMjLBSjPFiH6Astqyx8Vyz8nzxYnzxYUygAj+gITygDJgwb7AHFwVBcAXjMQNBAjCMjLABfLH1AFzxZQA88WAc8WAfoCzMsfyz/J7VQAGDY3EDhHZRRDMHDwBQAgmFVEECQQI/AF4F8KhA/y8ADsIfpEW3CAEMjLBVADzxYB+gLLaslx+wBwIIIQX8w9FMjLH1Iwyz8kzxZQBM8WE8oAggnJw4D6AhLKAMlxgBjIywUnzxZw+gLLaswl+kRbyYMG+wBxVWD4IwEIyMsAF8sfUAXPFlADzxYBzxYB+gLMyx/LP8ntVACHvOFnaiaGmAaY/9IH0gfSB9AGppj+mfmC3ofSB9AH0gfQAYKaFQkNDggPlozJP9Ii2TfSItkf0iLcEIIySsKAVgAKrAQAgb7l72omhpgGmP/SB9IH0gfQBqaY/pn5gBaH0gfQB9IH0AGCmxUJDQ4ID5aM0U/SItlH0iLZH9Ii2F4ACFiBqqiU\";\n  const NftFixPriceSaleV3R3CodeCell = Cell.fromBoc(\n    Buffer.from(NftFixPriceSaleV3R3CodeBoc, \"base64\")\n  )[0];\n\n  const feesData = beginCell()\n    .storeAddress(cfg.marketplaceFeeAddress)\n    // 5% - GetGems fee\n    .storeCoins((cfg.fullTonPrice / BigInt(100)) * BigInt(5))\n    .storeAddress(cfg.royaltyAddress)\n    // 5% - Royalty, can be changed\n    .storeCoins((cfg.fullTonPrice / BigInt(100)) * BigInt(0))\n    .endCell();\n\n  const saleData = beginCell()\n    .storeBit(0) // is_complete\n    .storeUint(Math.round(Date.now() / 1000), 32) // created_at\n    .storeAddress(cfg.marketplaceAddress) // marketplace_address\n    .storeAddress(cfg.nftAddress) // nft_address\n    .storeAddress(cfg.nftOwnerAddress) // previous_owner_address\n    .storeCoins(cfg.fullTonPrice) // full price in nanotons\n    .storeRef(feesData) // fees_cell\n    .storeUint(0, 32) // sold_at\n    .storeUint(0, 64) // query_id\n    .endCell();\n\n  const stateInit: StateInit = {\n    code: NftFixPriceSaleV3R3CodeCell,\n    data: saleData,\n  };\n  const stateInitCell = beginCell().store(storeStateInit(stateInit)).endCell();\n\n  // not needed, just for example\n  const saleContractAddress = new Address(0, stateInitCell.hash());\n\n  const saleBody = beginCell()\n    .storeUint(1, 32) // just accept coins on deploy\n    .storeUint(0, 64)\n    .endCell();\n\n  const transferNftBody = beginCell()\n    .storeUint(0x5fcc3d14, 32) // Opcode for NFT transfer\n    .storeUint(0, 64) // query_id\n    .storeAddress(cfg.deployerAddress) // new_owner\n    .storeAddress(cfg.nftOwnerAddress) // response_destination for excesses\n    .storeBit(0) // we do not have custom_payload\n    .storeCoins(toNano(\"0.2\")) // forward_amount\n    .storeBit(0) // we store forward_payload is this cell\n    .storeUint(0x0fe0ede, 31) // not 32, because we stored 0 bit before | do_sale opcode for deployer\n    .storeRef(stateInitCell)\n    .storeRef(saleBody)\n    .endCell();\n\n  return transferNftBody;\n}\n\nexport async function buildNftAuctionV3R3DeploymentBody(\n  cfg: NftAuctionV3R3Data\n) {\n  // func:0.4.4 src:op-codes.fc, imports/stdlib.fc, nft-fixprice-sale-v3r3.fc\n  // If GetGems updates its sale smart contract, you will need to obtain the new smart contract from https://github.com/getgems-io/nft-contracts/blob/main/packages/contracts/nft-fixprice-sale-v3/NftFixpriceSaleV3.source.ts.\n  const NftAuctionV3R3CodeBoc =\n    \"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\"; // func:0.4.4 src:struct/msg-utils.func, struct/math.func, struct/exit-codes.func, struct/op-codes.func, ../imports/stdlib.fc, nft-auction-v3r3.func\n  const NftAuctionV3R3CodeCell = Cell.fromBoc(\n    Buffer.from(NftAuctionV3R3CodeBoc, \"base64\")\n  )[0];\n\n  const royaltyAddress = cfg.nftOwnerAddress;\n\n  // For now we'll keep these hardcoded\n  const minPercentStep = 5;\n  const stepTimeSeconds = 60 * 60 * 24;\n\n  const createdAt = Math.round(Date.now() / 1000);\n\n  const constantData = beginCell()\n    .storeAddress(cfg.marketplaceAddress)\n    .storeCoins(cfg.minimumBid)\n    .storeCoins(cfg.maximumBid)\n    .storeUint(minPercentStep, 7)\n    .storeUint(stepTimeSeconds, 17)\n    .storeAddress(cfg.nftAddress)\n    .storeUint(createdAt, 32)\n    .endCell();\n\n  const feesData = beginCell()\n    .storeAddress(cfg.marketplaceFeeAddress)\n    .storeAddress(cfg.royaltyAddress)\n    .endCell();\n\n  const storage = beginCell()\n    .storeBit(0) // is_complete\n    .storeBit(0) // is_active\n    .storeBit(0)\n    .storeBit(0) // current_bidder\n    .storeCoins(0)\n    .storeUint(0, 32) //last_bid_time\n    .storeUint(cfg.expiryTime, 32) //end_timestamp\n    .storeAddress(cfg.nftOwnerAddress)\n    .storeUint(0, 64) //queryid\n    .storeUint(0, 32)\n    .storeUint(0, 32)\n    .storeUint(0, 32)\n    .storeUint(0, 32)\n    .storeRef(feesData)\n    .storeRef(constantData)\n    .endCell();\n\n  const stateInit: StateInit = {\n    code: NftAuctionV3R3CodeCell,\n    data: storage,\n  };\n  const stateInitCell = beginCell().store(storeStateInit(stateInit)).endCell();\n\n  // not needed, just for example\n  const saleContractAddress = new Address(0, stateInitCell.hash());\n\n  const saleBody = beginCell()\n    .storeUint(3, 32) // just accept coins on deploy\n    .storeUint(0, 64)\n    .endCell();\n\n  const transferNftBody = beginCell()\n    .storeUint(0x5fcc3d14, 32) // Opcode for NFT transfer\n    .storeUint(0, 64) // query_id\n    .storeAddress(cfg.deployerAddress) // new_owner\n    .storeAddress(cfg.nftOwnerAddress) // response_destination for excesses\n    .storeBit(0) // we do not have custom_payload\n    .storeCoins(toNano(\"0.2\")) // forward_amount\n    .storeBit(0) // we store forward_payload is this cell\n    .storeUint(0x0fe0ede, 31) // not 32, because we stored 0 bit before | do_sale opcode for deployer\n    .storeRef(stateInitCell)\n    .storeRef(saleBody)\n    .endCell();\n\n  return transferNftBody;\n}\n\nexport const marketplaceAddress = Address.parse(\n  \"EQBYTuYbLf8INxFtD8tQeNk5ZLy-nAX9ahQbG_yl1qQ-GEMS\"\n); // GetGems Address\nexport const marketplaceFeeAddress = Address.parse(\n  \"EQCjk1hh952vWaE9bRguFkAhDAL5jj3xj9p0uPWrFBq_GEMS\"\n); // GetGems Address for Fees\nexport const destinationAddress = Address.parse(\n  \"EQAIFunALREOeQ99syMbO6sSzM_Fa1RsPD5TBoS0qVeKQ-AR\"\n); // GetGems sale contracts deployer\n","import {\n  elizaLogger,\n  composeContext,\n  generateObject,\n  ModelClass,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  type HandlerCallback,\n  Content,\n} from \"@elizaos/core\";\nimport { Address, internal, SendMode, toNano } from \"@ton/ton\";\nimport { z } from \"zod\";\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport { waitSeqnoContract } from \"../utils/util\";\nimport {\n  buildNftFixPriceSaleV3R3DeploymentBody,\n  destinationAddress,\n  marketplaceAddress,\n  marketplaceFeeAddress,\n} from \"../services/nft-marketplace/listingFactory\";\n\n// Configuration constants\nconst CONFIG = {\n  royaltyPercent: 5,\n  marketplaceFeePercent: 5,\n};\n\n/**\n * Schema for create listing input.\n * Only requires:\n * - nftAddress: The NFT contract address.\n * - fullPrice: The full price of the NFT in TON.\n */\nconst createListingSchema = z\n  .object({\n    nftAddress: z.string().nonempty(\"NFT address is required\"),\n    fullPrice: z.string().nonempty(\"Full price is required\"),\n  })\n  .refine((data) => data.nftAddress && data.fullPrice, {\n    message: \"NFT address and full price are required\",\n    path: [\"nftAddress\", \"fullPrice\"],\n  });\n\nexport interface CreateListingContent extends Content {\n  nftAddress: string;\n  fullPrice: string;\n}\n\nfunction isCreateListingContent(\n  content: Content\n): content is CreateListingContent {\n  return (\n    typeof content.nftAddress === \"string\" &&\n    typeof content.fullPrice === \"string\"\n  );\n}\n\nconst createListingTemplate = `Respond with a JSON markdown block containing only the extracted values.\nExample response:\n\\`\\`\\`json\n{\n  \"nftAddress\": \"<NFT address for listing>\",\n  \"fullPrice\": \"<Full price in TON>\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\n/**\n * Helper function to build create listing parameters.\n */\nconst buildCreateListingData = async (\n  runtime: IAgentRuntime,\n  message: Memory,\n  state: State\n): Promise<CreateListingContent> => {\n  const context = composeContext({\n    state,\n    template: createListingTemplate,\n  });\n  const content = await generateObject({\n    runtime,\n    context,\n    schema: createListingSchema as any,\n    modelClass: ModelClass.SMALL,\n  });\n  return content.object as any;\n};\n\n/**\n * CreateListingAction encapsulates the logic to list an NFT for sale.\n */\nexport class CreateListingAction {\n  private walletProvider: WalletProvider;\n  constructor(walletProvider: WalletProvider) {\n    this.walletProvider = walletProvider;\n  }\n\n  /**\n   * Lists an NFT for sale using default marketplace configuration\n   */\n  async list(params: CreateListingContent): Promise<any> {\n    const client = this.walletProvider.getWalletClient();\n    const contract = client.open(this.walletProvider.wallet);\n\n    const fullPrice = toNano(params.fullPrice);\n    const royalty = CONFIG.royaltyPercent;\n    const fee = CONFIG.marketplaceFeePercent;\n\n    const saleData = {\n      nftAddress: Address.parse(params.nftAddress),\n      nftOwnerAddress: this.walletProvider.wallet.address,\n      deployerAddress: destinationAddress,\n      marketplaceAddress: marketplaceAddress,\n      marketplaceFeeAddress: marketplaceFeeAddress,\n      marketplaceFeePercent: (fullPrice / BigInt(100)) * BigInt(fee),\n      royaltyAddress: this.walletProvider.wallet.address, // Using wallet address as royalty recipient\n      royaltyPercent: (fullPrice / BigInt(100)) * BigInt(royalty),\n      fullTonPrice: fullPrice,\n    };\n\n    const saleBody = await buildNftFixPriceSaleV3R3DeploymentBody(saleData);\n\n    const seqno = await contract.getSeqno();\n    const listMessage = internal({\n      to: params.nftAddress,\n      value: toNano(\"0.3\"), // Sufficient value for all operations\n      bounce: true,\n      body: saleBody,\n    });\n\n    const transfer = await contract.sendTransfer({\n      seqno,\n      secretKey: this.walletProvider.keypair.secretKey,\n      messages: [listMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n\n    await waitSeqnoContract(seqno, contract);\n\n    return {\n      nftAddress: params.nftAddress,\n      fullPrice: params.fullPrice,\n      message: \"NFT listed for sale successfully\",\n      marketplaceFee: `${fee}%`,\n      royaltyFee: `${royalty}%`,\n    };\n  }\n}\n\nexport default {\n  name: \"CREATE_LISTING\",\n  similes: [\"NFT_LISTING\", \"LIST_NFT\", \"SELL_NFT\"],\n  description:\n    \"Creates a listing for an NFT by sending the appropriate message to the NFT contract. Only requires NFT address and price.\",\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    options: any,\n    callback?: HandlerCallback\n  ) => {\n    elizaLogger.log(\"Starting CREATE_LISTING handler...\");\n    const params = await buildCreateListingData(runtime, message, state);\n\n    if (!isCreateListingContent(params)) {\n      if (callback) {\n        callback({\n          text: \"Unable to process create listing request. Invalid content provided.\",\n          content: { error: \"Invalid create listing content\" },\n        });\n      }\n      return false;\n    }\n\n    try {\n      const walletProvider = await initWalletProvider(runtime);\n      const createListingAction = new CreateListingAction(walletProvider);\n\n      const result = await createListingAction.list(params);\n\n      if (callback) {\n        callback({\n          text: JSON.stringify(result, null, 2),\n          content: result,\n        });\n      }\n    } catch (error: any) {\n      elizaLogger.error(\"Error in CREATE_LISTING handler:\", error);\n      if (callback) {\n        callback({\n          text: `Error in CREATE_LISTING: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n    }\n    return true;\n  },\n  template: createListingTemplate,\n  // eslint-disable-next-line\n  validate: async (_runtime: IAgentRuntime) => {\n    return true;\n  },\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          nftAddress: \"EQNftAddressExample\",\n          fullPrice: \"10\",\n          action: \"CREATE_LISTING\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"NFT listed for sale successfully\",\n        },\n      },\n    ],\n  ],\n};\n","import {\n    elizaLogger,\n    composeContext,\n    generateObject,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    Content,\n  } from \"@elizaos/core\";\n  import { Address, internal, SendMode, toNano } from \"@ton/ton\";\n  import { z } from \"zod\";\n  import { initWalletProvider, WalletProvider } from \"../providers/wallet\";\n  import { waitSeqnoContract } from \"../utils/util\";\nimport { getBuyPrice, getListingData } from \"../services/nft-marketplace/listingData\";\nimport { buyListing } from \"../services/nft-marketplace/listingTransactions\";\n\n  /**\n   * Schema for buy listing input.\n   * Only requires:\n   * - nftAddress: The NFT contract address.\n   */\n  const buyListingSchema = z\n    .object({\n      nftAddress: z.string().nonempty(\"NFT address is required\"),\n    })\n    .refine(\n      (data) => data.nftAddress,\n      {\n        message: \"NFT address is required\",\n        path: [\"nftAddress\"],\n      }\n    );\n\n  export interface BuyListingContent extends Content {\n    nftAddress: string;\n  }\n\n  function isBuyListingContent(\n    content: Content\n  ): content is BuyListingContent {\n    return typeof content.nftAddress === \"string\";\n  }\n\n  const buyListingTemplate = `Respond with a JSON markdown block containing only the extracted values.\n  Example response:\n  \\`\\`\\`json\n  {\n    \"nftAddress\": \"<NFT address to buy>\"\n  }\n  \\`\\`\\`\n\n  {{recentMessages}}\n\n  Respond with a JSON markdown block containing only the extracted values.`;\n\n  /**\n   * Helper function to build buy listing parameters.\n   */\n  const buildBuyListingData = async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State\n  ): Promise<BuyListingContent> => {\n    const context = composeContext({\n      state,\n      template: buyListingTemplate,\n    });\n    const content = await generateObject({\n      runtime,\n      context,\n      schema: buyListingSchema as any,\n      modelClass: ModelClass.SMALL,\n    });\n    return content.object as any;\n  };\n\n  /**\n   * BuyListingAction encapsulates the logic to buy an NFT listing.\n   */\n  export class BuyListingAction {\n    private walletProvider: WalletProvider;\n    constructor(walletProvider: WalletProvider) {\n      this.walletProvider = walletProvider;\n    }\n\n    /**\n     * Buys an NFT listing\n     */\n    async buy(nftAddress: string): Promise<any> {\n      try {\n        elizaLogger.log(`Starting purchase of NFT: ${nftAddress}`);\n\n        const receipt = await buyListing(this.walletProvider, nftAddress);\n\n        return receipt;\n      } catch (error) {\n        elizaLogger.error(`Error buying NFT ${nftAddress}: ${error}`);\n        throw new Error(`Failed to buy NFT: ${error.message}`);\n      }\n    }\n  }\n\n  export default {\n    name: \"BUY_LISTING\",\n    similes: [\"NFT_BUY\", \"PURCHASE_NFT\", \"BUY_NFT\"],\n    description:\n      \"Buys a listed NFT by sending the required payment to the listing contract.\",\n    handler: async (\n      runtime: IAgentRuntime,\n      message: Memory,\n      state: State,\n      options: any,\n      callback?: HandlerCallback\n    ) => {\n      elizaLogger.log(\"Starting BUY_LISTING handler...\");\n      const params = await buildBuyListingData(runtime, message, state);\n\n      if (!isBuyListingContent(params)) {\n        if (callback) {\n          callback({\n            text: \"Unable to process buy listing request. Invalid content provided.\",\n            content: { error: \"Invalid buy listing content\" },\n          });\n        }\n        return false;\n      }\n\n      try {\n        const walletProvider = await initWalletProvider(runtime);\n        const buyListingAction = new BuyListingAction(walletProvider);\n\n        const result = await buyListingAction.buy(params.nftAddress);\n\n        if (callback) {\n          callback({\n            text: JSON.stringify(result, null, 2),\n            content: result,\n          });\n        }\n      } catch (error: any) {\n        elizaLogger.error(\"Error in BUY_LISTING handler:\", error);\n        if (callback) {\n          callback({\n            text: `Error in BUY_LISTING: ${error.message}`,\n            content: { error: error.message },\n          });\n        }\n      }\n      return true;\n    },\n    template: buyListingTemplate,\n    // eslint-disable-next-line\n    validate: async (_runtime: IAgentRuntime) => {\n      return true;\n    },\n    examples: [\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            nftAddress: \"EQNftAddressExample\",\n            action: \"BUY_LISTING\",\n          },\n        },\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Buy transaction sent successfully\",\n          },\n        },\n      ]\n    ],\n  };\n","import { beginCell, internal, SendMode, toNano } from \"@ton/ton\";\nimport {\n  getBuyPrice,\n  getListingData,\n  getMinBid,\n  getNextValidBidAmount,\n  isAuction,\n  isAuctionEnded\n} from \"./listingData\";\nimport { waitSeqnoContract } from \"../../utils/util\";\nimport { WalletProvider } from \"../../providers/wallet\";\n\nexport async function buyListing(\n  walletProvider: WalletProvider,\n  nftAddress: string\n): Promise<any> {\n  try {\n    const { listingAddress } = await getListingData(walletProvider, nftAddress);\n    const fullPrice = await getBuyPrice(walletProvider, nftAddress);\n\n    // Calculate amount to send (price + gas)\n    const gasAmount = toNano(\"1\"); // 1 TON for gas\n    const amountToSend = fullPrice + gasAmount;\n\n    // Send the transaction to buy\n    const client = walletProvider.getWalletClient();\n    const contract = client.open(walletProvider.wallet);\n\n    const seqno = await contract.getSeqno();\n    const transferMessage = internal({\n      to: listingAddress,\n      value: amountToSend,\n      bounce: true,\n      body: \"\", // Empty body for default buy operation\n    });\n\n    await contract.sendTransfer({\n      seqno,\n      secretKey: walletProvider.keypair.secretKey,\n      messages: [transferMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n\n    await waitSeqnoContract(seqno, contract);\n\n    return {\n      nftAddress,\n      listingAddress: listingAddress.toString(),\n      price: fullPrice.toString(),\n      message: \"Buy transaction sent successfully\",\n    };\n  } catch (error) {\n    throw new Error(`Failed to buy NFT: ${error.message}`);\n  }\n}\n\nexport async function cancelListing(\n  walletProvider: WalletProvider,\n  nftAddress: string\n): Promise<any> {\n  try {\n    const listingData = await getListingData(walletProvider, nftAddress);\n\n    // Opcode for cancellation\n    const opcode = listingData.isAuction ? 1 : 3; // 1 for auction, 3 for fixed price\n\n    const msgBody = beginCell().storeUint(opcode, 32).storeUint(0, 64).endCell(); // queryId = 0\n    const gasAmount = toNano(\"0.2\"); // 0.2 TON for cancellation gas\n\n    // Send the transaction to cancel\n    const client = walletProvider.getWalletClient();\n    const contract = client.open(walletProvider.wallet);\n\n    const seqno = await contract.getSeqno();\n    const transferMessage = internal({\n      to: listingData.listingAddress,\n      value: gasAmount,\n      bounce: true,\n      body: msgBody,\n    });\n\n    await contract.sendTransfer({\n      seqno,\n      secretKey: walletProvider.keypair.secretKey,\n      messages: [transferMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n\n    await waitSeqnoContract(seqno, contract);\n\n    return {\n      nftAddress,\n      listingAddress: listingData.listingAddress.toString(),\n      message: \"Cancel listing transaction sent successfully\",\n    };\n  } catch (error) {\n    throw new Error(`Failed to cancel NFT listing: ${error.message}`);\n  }\n}\n\nexport async function bidOnAuction(\n  walletProvider: WalletProvider,\n  nftAddress: string,\n  bidAmount: bigint\n): Promise<any> {\n  try {\n    const listingData = await getListingData(walletProvider, nftAddress);\n\n    if (!listingData.isAuction) {\n      throw new Error(\"Cannot bid on a fixed-price listing. Use buyListing instead.\");\n    }\n\n    // Check if auction has ended\n    const auctionEnded = await isAuctionEnded(walletProvider, nftAddress);\n    if (auctionEnded) {\n      throw new Error(\"Auction has already ended.\");\n    }\n\n    // If no bidAmount provided, get the next valid bid amount\n    const bid = bidAmount;\n\n    // Check if bid is valid\n    const minBid = await getMinBid(walletProvider, nftAddress);\n    if (bid < minBid) {\n      throw new Error(`Bid too low. Minimum bid is ${minBid.toString()}.`);\n    }\n\n    // Gas amount for the transaction\n    const gasAmount = toNano(\"0.1\");\n    const amountToSend = bid + gasAmount;\n\n    // Send the bid transaction\n    const client = walletProvider.getWalletClient();\n    const contract = client.open(walletProvider.wallet);\n\n    const seqno = await contract.getSeqno();\n\n    const transferMessage = internal({\n      to: listingData.listingAddress,\n      value: amountToSend,\n      bounce: true,\n      body: \"\",\n    });\n\n    await contract.sendTransfer({\n      seqno,\n      secretKey: walletProvider.keypair.secretKey,\n      messages: [transferMessage],\n      sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n    });\n\n    await waitSeqnoContract(seqno, contract);\n\n    return {\n      nftAddress,\n      listingAddress: listingData.listingAddress.toString(),\n      bidAmount: bid.toString(),\n      message: \"Bid placed successfully\",\n    };\n  } catch (error) {\n    throw new Error(`Failed to place bid: ${error.message}`);\n  }\n}\n","import {\n  Address,\n  beginCell,\n  Cell,\n  internal,\n  SendMode,\n  TonClient,\n} from \"@ton/ton\";\nimport { MintParams, NFTCollection } from \"./NFTCollection\";\nimport { WalletProvider } from \"../providers/wallet\";\n\nexport async function getAddressByIndex(\n  client: TonClient,\n  collectionAddress: Address,\n  itemIndex: number\n): Promise<Address> {\n  const response = await client.runMethod(\n    collectionAddress,\n    \"get_nft_address_by_index\",\n    [{ type: \"int\", value: BigInt(itemIndex) }]\n  );\n  return response.stack.readAddress();\n}\n\nexport async function getNftOwner(walletProvider: WalletProvider, nftAddress: string): Promise<Address> {\n  try {\n    const client = walletProvider.getWalletClient();\n    const result = await client.runMethod(\n      Address.parse(nftAddress),\n      \"get_nft_data\"\n    );\n\n    result.stack.skip(3);\n    const owner = result.stack.readAddress() as Address;\n\n    // Create a clean operational address\n    const rawString = owner.toRawString();\n    const operationalAddress = Address.parseRaw(rawString);\n\n    return operationalAddress;\n  } catch (error) {\n    throw new Error(`Failed to get NFT owner: ${error.message}`);\n  }\n}\n\nexport class NftItem {\n  private readonly collectionAddress: Address;\n\n  constructor(collection: string) {\n    this.collectionAddress = Address.parse(collection);\n  }\n\n    public createMintBody(params: MintParams): Cell {\n        const body = beginCell();\n        body.storeUint(1, 32);\n        body.storeUint(params.queryId || 0, 64);\n        body.storeUint(params.itemIndex, 64);\n        body.storeCoins(params.amount);\n        const nftItemContent = beginCell();\n        nftItemContent.storeAddress(params.itemOwnerAddress);\n        const uriContent = beginCell();\n        uriContent.storeBuffer(Buffer.from(params.commonContentUrl));\n        nftItemContent.storeRef(uriContent.endCell());\n        body.storeRef(nftItemContent.endCell());\n        return body.endCell();\n    }\n  \n    public async deploy(\n      walletProvider: WalletProvider,\n      params: MintParams\n    ): Promise<number> {\n\n      const walletClient = walletProvider.getWalletClient();\n      const contract = walletClient.open(walletProvider.wallet);\n      const seqno = await contract.getSeqno();\n      await contract.sendTransfer({\n        seqno,\n        secretKey: walletProvider.keypair.secretKey,\n        messages: [\n          internal({\n            value: \"0.05\",\n            to: this.collectionAddress,\n            body: this.createMintBody(params),\n          }),\n        ],\n        sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n      });\n      return seqno;\n    }\n  }\n","import { Address, TupleReader } from \"@ton/ton\";\n\ninterface BaseListingData {\n  listingAddress: Address;\n  isAuction: boolean;\n}\n\nexport interface FixedPriceListingData extends BaseListingData {\n  isAuction: false;\n  owner: Address;\n  fullPrice: bigint;\n}\n\nexport interface AuctionListingData extends BaseListingData {\n  isAuction: true;\n  owner: Address;\n  fullPrice: bigint;\n  minBid: bigint;\n  lastBid: bigint;\n  maxBid: bigint;\n  endTime: number;\n}\n\nexport type ListingData = FixedPriceListingData | AuctionListingData;\n\nexport interface FixedPriceData {\n  magic: number;\n  isComplete: boolean;\n  createdAt: number;\n  marketplace: Address;\n  nft: Address;\n  owner: Address;\n  fullPrice: bigint;\n  marketFeeAddress: Address;\n  marketFee: bigint;\n  royaltyAddress: Address;\n  royaltyAmount: bigint;\n}\n\nexport interface AuctionData {\n  magic: number;\n  end: boolean;\n  endTime: number;\n  marketplace: Address;\n  nft: Address;\n  owner: Address;\n  lastBid: bigint;\n  lastMember: Address | null;\n  minStep: number;\n  marketFeeAddress: Address;\n  mpFeeFactor: number;\n  mpFeeBase: number;\n  royaltyAddress: Address;\n  royaltyFeeFactor: number;\n  royaltyFeeBase: number;\n  maxBid: bigint;\n  minBid: bigint;\n  createdAt: number;\n  lastBidAt: number;\n  isCanceled: boolean;\n}\n\nexport function parseFixedPriceDataFromStack(\n  stack: TupleReader\n): FixedPriceData {\n  return {\n    magic: stack.readNumber(),\n    isComplete: stack.readBoolean(),\n    createdAt: stack.readNumber(),\n    marketplace: stack.readAddress(),\n    nft: stack.readAddress(),\n    owner: stack.readAddress(),\n    fullPrice: stack.readBigNumber(),\n    marketFeeAddress: stack.readAddress(),\n    marketFee: stack.readBigNumber(),\n    royaltyAddress: stack.readAddress(),\n    royaltyAmount: stack.readBigNumber(),\n  };\n}\n\nexport function parseAuctionDataFromStack(stack: TupleReader): AuctionData {\n  return {\n    magic: stack.readNumber(),\n    end: stack.readBoolean(),\n    endTime: stack.readNumber(),\n    marketplace: stack.readAddress(),\n    nft: stack.readAddress(),\n    owner: stack.readAddress(),\n    lastBid: stack.readBigNumber(),\n    lastMember: stack.readAddressOpt(),\n    minStep: stack.readNumber(),\n    marketFeeAddress: stack.readAddress(),\n    mpFeeFactor: stack.readNumber(),\n    mpFeeBase: stack.readNumber(),\n    royaltyAddress: stack.readAddress(),\n    royaltyFeeFactor: stack.readNumber(),\n    royaltyFeeBase: stack.readNumber(),\n    maxBid: stack.readBigNumber(),\n    minBid: stack.readBigNumber(),\n    createdAt: stack.readNumber(),\n    lastBidAt: stack.readNumber(),\n    isCanceled: stack.readBoolean(),\n  };\n}\n","import { Address, TupleReader } from \"@ton/ton\";\nimport { WalletProvider } from \"../../providers/wallet\";\nimport { getNftOwner } from \"../../utils/NFTItem\";\nimport {\n  ListingData,\n  FixedPriceListingData,\n  AuctionListingData,\n  FixedPriceData,\n  AuctionData,\n  parseFixedPriceDataFromStack,\n  parseAuctionDataFromStack\n} from \"./interfaces/listings.ts\";\n\nexport function isAuction(stack: TupleReader): boolean {\n  return stack.remaining === 20;\n}\n\nexport async function getListingData(walletProvider: WalletProvider, nftAddress: string): Promise<ListingData> {\n  try {\n    const listingAddress = await getNftOwner(walletProvider, nftAddress);\n    const client = walletProvider.getWalletClient();\n    const result = await client.runMethod(listingAddress, \"get_sale_data\");\n\n    if (!isAuction(result.stack)) {\n      return parseFixedPriceData(listingAddress, result.stack);\n    } else {\n      return parseAuctionData(listingAddress, result.stack);\n    }\n  } catch (error) {\n    throw new Error(`Failed to get listing data: ${error.message}`);\n  }\n}\n\nfunction parseFixedPriceData(listingAddress: Address, stack: TupleReader): FixedPriceListingData {\n  const fullData = parseFixedPriceDataFromStack(stack);\n\n  // Return only what's needed for the simplified interface\n  return {\n    listingAddress,\n    owner: fullData.owner,\n    fullPrice: fullData.fullPrice,\n    isAuction: false\n  };\n}\n\nfunction parseAuctionData(listingAddress: Address, stack: TupleReader): AuctionListingData {\n  const fullData = parseAuctionDataFromStack(stack);\n\n  // Return only what's needed for the simplified interface\n  return {\n    listingAddress,\n    owner: fullData.owner,\n    fullPrice: fullData.maxBid, // Max bid serves as the \"buy now\" price\n    minBid: fullData.minBid,\n    lastBid: fullData.lastBid,\n    maxBid: fullData.maxBid,\n    endTime: fullData.endTime,\n    isAuction: true\n  };\n}\n\nexport async function getFixedPriceData(walletProvider: WalletProvider, nftAddress: string): Promise<FixedPriceData & { listingAddress: Address }> {\n  try {\n    const listingAddress = await getNftOwner(walletProvider, nftAddress);\n    const client = walletProvider.getWalletClient();\n    const result = await client.runMethod(listingAddress, \"get_sale_data\");\n\n    if (isAuction(result.stack)) {\n      throw new Error(\"Not a fixed price listing\");\n    }\n\n    const data = parseFixedPriceDataFromStack(result.stack);\n\n    // Return with listingAddress attached\n    return {\n      ...data,\n      listingAddress\n    };\n  } catch (error) {\n    throw new Error(`Failed to get fixed price data: ${error.message}`);\n  }\n}\n\nexport async function getAuctionData(walletProvider: WalletProvider, nftAddress: string): Promise<AuctionData & { listingAddress: Address }> {\n  try {\n    const listingAddress = await getNftOwner(walletProvider, nftAddress);\n    const client = walletProvider.getWalletClient();\n    const result = await client.runMethod(listingAddress, \"get_sale_data\");\n\n    if (!isAuction(result.stack)) {\n      throw new Error(\"Not an auction listing\");\n    }\n\n    const data = parseAuctionDataFromStack(result.stack);\n\n    // Return with listingAddress attached\n    return {\n      ...data,\n      listingAddress\n    };\n  } catch (error) {\n    throw new Error(`Failed to get auction data: ${error.message}`);\n  }\n}\n\nexport async function getBuyPrice(walletProvider: WalletProvider, nftAddress: string): Promise<bigint> {\n  const listingData = await getListingData(walletProvider, nftAddress);\n  return listingData.fullPrice;\n}\n\nexport async function getMinBid(walletProvider: WalletProvider, nftAddress: string): Promise<bigint> {\n  const listingData = await getListingData(walletProvider, nftAddress);\n  if (!listingData.isAuction) {\n    throw new Error(\"Not an auction listing\");\n  }\n  return listingData.minBid;\n}\n\nexport async function getLastBid(walletProvider: WalletProvider, nftAddress: string): Promise<bigint> {\n  const listingData = await getListingData(walletProvider, nftAddress);\n  if (!listingData.isAuction) {\n    throw new Error(\"Not an auction listing\");\n  }\n  return listingData.lastBid;\n}\n\nexport async function isAuctionEnded(walletProvider: WalletProvider, nftAddress: string): Promise<boolean> {\n  const listingData = await getListingData(walletProvider, nftAddress);\n  if (!listingData.isAuction) {\n    throw new Error(\"Not an auction listing\");\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  return now > listingData.endTime;\n}\n\nexport async function getNextValidBidAmount(walletProvider: WalletProvider, nftAddress: string): Promise<bigint> {\n  const listingData = await getListingData(walletProvider, nftAddress);\n  if (!listingData.isAuction) {\n    throw new Error(\"Not an auction listing\");\n  }\n\n  if (listingData.lastBid === BigInt(0)) {\n    return listingData.minBid;\n  }\n\n  // Get complete auction data to access minStep\n  const auctionData = await getAuctionData(walletProvider, nftAddress);\n  const minIncrement = (listingData.lastBid * BigInt(auctionData.minStep)) / BigInt(100);\n  return listingData.lastBid + minIncrement;\n}\n","import {\n    elizaLogger,\n    composeContext,\n    generateObject,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    Content,\n  } from \"@elizaos/core\";\n  import { Address, internal, SendMode, toNano } from \"@ton/ton\";\n  import { z } from \"zod\";\n  import { initWalletProvider, WalletProvider } from \"../providers/wallet\";\n  import { waitSeqnoContract } from \"../utils/util\";\n  import {\n    buildNftAuctionV3R3DeploymentBody,  // This function would need to be implemented in the utils\n    destinationAddress,\n    marketplaceAddress,\n    marketplaceFeeAddress,\n  } from \"../services/nft-marketplace/listingFactory\";\n\n  // Configuration constants\n  const CONFIG = {\n    royaltyPercent: 5,\n    marketplaceFeePercent: 5,\n  };\n\n  /**\n   * Schema for create auction input.\n   * Requires:\n   * - nftAddress: The NFT contract address.\n   * - minimumBid: The minimum bid for the auction in TON.\n   * - maximumBid: The maximum bid (or buyout price) for the auction in TON.\n   * - expiryTime: The expiry time for the auction in hours.\n   */\n  const createAuctionSchema = z\n    .object({\n      nftAddress: z.string().nonempty(\"NFT address is required\"),\n      minimumBid: z.string().nonempty(\"Minimum bid is required\"),\n      maximumBid: z.string().nonempty(\"Maximum bid (buyout price) is required\"),\n      expiryTime: z.string().nonempty(\"Expiry time is required\"),\n    })\n    .refine((data) => data.nftAddress && data.minimumBid && data.maximumBid && data.expiryTime, {\n      message: \"NFT address, minimum bid, maximum bid, and expiry time are required\",\n      path: [\"nftAddress\", \"minimumBid\", \"maximumBid\", \"expiryTime\"],\n    });\n\n  export interface CreateAuctionContent extends Content {\n    nftAddress: string;\n    minimumBid: string;\n    maximumBid: string;\n    expiryTime: string;\n  }\n\n  function isCreateAuctionContent(\n    content: Content\n  ): content is CreateAuctionContent {\n    return (\n      typeof content.nftAddress === \"string\" &&\n      typeof content.minimumBid === \"string\" &&\n      typeof content.maximumBid === \"string\" &&\n      typeof content.expiryTime === \"string\"\n    );\n  }\n\n  const createAuctionTemplate = `Respond with a JSON markdown block containing only the extracted values.\n  Example response:\n  \\`\\`\\`json\n  {\n    \"nftAddress\": \"<NFT address for auction>\",\n    \"minimumBid\": \"<Minimum bid in TON>\",\n    \"maximumBid\": \"<Maximum bid/buyout price in TON>\",\n    \"expiryTime\": \"<Auction expiry time in hours>\"\n  }\n  \\`\\`\\`\n\n  {{recentMessages}}\n  If a parameter is missing, respond with a question asking specifically for that parameter.\n  Respond with a JSON markdown block containing only the extracted values.`;\n\n  /**\n   * Helper function to build create auction parameters.\n   */\n  const buildCreateAuctionData = async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State\n  ): Promise<CreateAuctionContent> => {\n    const context = composeContext({\n      state,\n      template: createAuctionTemplate,\n    });\n    const content = await generateObject({\n      runtime,\n      context,\n      schema: createAuctionSchema as any,\n      modelClass: ModelClass.SMALL,\n    });\n    return content.object as any;\n  };\n\n  /**\n   * CreateAuctionAction encapsulates the logic to create an auction for an NFT.\n   */\n  export class CreateAuctionAction {\n    private walletProvider: WalletProvider;\n    constructor(walletProvider: WalletProvider) {\n      this.walletProvider = walletProvider;\n    }\n\n    /**\n     * Creates an auction for an NFT using default marketplace configuration\n     */\n    async createAuction(params: CreateAuctionContent): Promise<any> {\n      const client = this.walletProvider.getWalletClient();\n      const contract = client.open(this.walletProvider.wallet);\n\n      elizaLogger.info(\"Creating auction with params: \", params);\n\n      const minimumBid = toNano(params.minimumBid);\n      const maximumBid = toNano(params.maximumBid);\n      const expiryTime = Math.floor(Date.now() / 1000) + parseInt(params.expiryTime) * 3600; // Convert hours to seconds and add to current timestamp\n      const royalty = CONFIG.royaltyPercent;\n      const fee = CONFIG.marketplaceFeePercent;\n\n      const auctionData = {\n        nftAddress: Address.parse(params.nftAddress),\n        nftOwnerAddress: this.walletProvider.wallet.address,\n        deployerAddress: destinationAddress,\n        marketplaceAddress: marketplaceAddress,\n        marketplaceFeeAddress: marketplaceFeeAddress,\n        marketplaceFeePercent: (maximumBid / BigInt(100)) * BigInt(fee),\n        royaltyAddress: this.walletProvider.wallet.address, // Using wallet address as royalty recipient\n        royaltyPercent: (maximumBid / BigInt(100)) * BigInt(royalty),\n        minimumBid: minimumBid,\n        maximumBid: maximumBid,\n        expiryTime: expiryTime,\n      };\n\n      elizaLogger.info(\"Minbid: \", minimumBid);\n\n      const auctionBody = await buildNftAuctionV3R3DeploymentBody(auctionData);\n\n      const seqno = await contract.getSeqno();\n      const auctionMessage = internal({\n        to: params.nftAddress,\n        value: toNano(\"0.5\"), // Increased value for auction operations\n        bounce: true,\n        body: auctionBody,\n      });\n\n      const transfer = await contract.sendTransfer({\n        seqno,\n        secretKey: this.walletProvider.keypair.secretKey,\n        messages: [auctionMessage],\n        sendMode: SendMode.IGNORE_ERRORS + SendMode.PAY_GAS_SEPARATELY,\n      });\n\n      await waitSeqnoContract(seqno, contract);\n\n      return {\n        nftAddress: params.nftAddress,\n        minimumBid: params.minimumBid,\n        maximumBid: params.maximumBid,\n        expiryTime: params.expiryTime,\n        message: \"NFT auction created successfully\",\n        marketplaceFee: `${fee}%`,\n        royaltyFee: `${royalty}%`,\n        expiryTimestamp: new Date(Number(expiryTime) * 1000).toISOString(),\n      };\n    }\n  }\n\n  export default {\n    name: \"CREATE_AUCTION\",\n    similes: [\"NFT_AUCTION\", \"AUCTION_NFT\", \"START_AUCTION\"],\n    description:\n      \"Creates an auction for an NFT by sending the appropriate message to the NFT contract. Requires NFT address, minimum bid, maximum bid (buyout price), and auction expiry time in hours.\",\n    handler: async (\n      runtime: IAgentRuntime,\n      message: Memory,\n      state: State,\n      options: any,\n      callback?: HandlerCallback\n    ) => {\n      elizaLogger.log(\"Starting CREATE_AUCTION handler...\");\n      const params = await buildCreateAuctionData(runtime, message, state);\n\n      if (!isCreateAuctionContent(params)) {\n        if (callback) {\n          callback({\n            text: \"Unable to process create auction request. Invalid content provided.\",\n            content: { error: \"Invalid create auction content\" },\n          });\n        }\n        return false;\n      }\n\n      try {\n        const walletProvider = await initWalletProvider(runtime);\n        const createAuctionAction = new CreateAuctionAction(walletProvider);\n\n        const result = await createAuctionAction.createAuction(params);\n\n        if (callback) {\n          callback({\n            text: JSON.stringify(result, null, 2),\n            content: result,\n          });\n        }\n      } catch (error: any) {\n        elizaLogger.error(\"Error in CREATE_AUCTION handler:\", error);\n        if (callback) {\n          callback({\n            text: `Error in CREATE_AUCTION: ${error.message}`,\n            content: { error: error.message },\n          });\n        }\n      }\n      return true;\n    },\n    template: createAuctionTemplate,\n    // eslint-disable-next-line\n    validate: async (_runtime: IAgentRuntime) => {\n      return true;\n    },\n    examples: [\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            nftAddress: \"EQNftAddressExample\",\n            minimumBid: \"5\",\n            maximumBid: \"20\",\n            expiryTime: \"48\",\n            action: \"CREATE_AUCTION\",\n          },\n        },\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"NFT auction created successfully\",\n          },\n        },\n      ],\n    ],\n  };\n","import {\n    elizaLogger,\n    composeContext,\n    generateObject,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    Content,\n  } from \"@elizaos/core\";\n  import { z } from \"zod\";\n  import { initWalletProvider, WalletProvider } from \"../providers/wallet\";\n  import { getMinBid, getNextValidBidAmount, isAuctionEnded } from \"../services/nft-marketplace/listingData\";\n  import { bidOnAuction } from \"../services/nft-marketplace/listingTransactions\";\nimport { toNano } from \"@ton/ton\";\n\n  /**\n   * Schema for bid input.\n   * Requires:\n   * - nftAddress: The NFT contract address.\n   * - Optional: bidAmount: The amount to bid (in nanoTON).\n   */\n  const bidAuctionSchema = z\n    .object({\n      nftAddress: z.string().nonempty(\"NFT address is required\"),\n      bidAmount: z.string().optional(),\n    })\n    .refine(\n      (data) => data.nftAddress,\n      {\n        message: \"NFT address is required\",\n        path: [\"nftAddress\"],\n      }\n    );\n\n  export interface BidAuctionContent extends Content {\n    nftAddress: string;\n    bidAmount?: string;\n  }\n\n  function isBidAuctionContent(\n    content: Content\n  ): content is BidAuctionContent {\n    return typeof content.nftAddress === \"string\";\n  }\n\n  const bidAuctionTemplate = `Respond with a JSON markdown block containing only the extracted values.\n  Example response:\n  \\`\\`\\`json\n  {\n    \"nftAddress\": \"<NFT address to bid on>\",\n    \"bidAmount\": \"<optional bid amount in TON>\"\n  }\n  \\`\\`\\`\n\n  {{recentMessages}}\n\n  If no bid amount is provided, make bidAmount null or omit it.\n  Respond with a JSON markdown block containing only the extracted values.`;\n\n  /**\n   * Helper function to build bid parameters.\n   */\n  const buildBidAuctionData = async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State\n  ): Promise<BidAuctionContent> => {\n    const context = composeContext({\n      state,\n      template: bidAuctionTemplate,\n    });\n    const content = await generateObject({\n      runtime,\n      context,\n      schema: bidAuctionSchema as any,\n      modelClass: ModelClass.SMALL,\n    });\n    return content.object as any;\n  };\n\n  /**\n   * BidAuctionAction encapsulates the logic to bid on an NFT auction.\n   */\n  export class BidAuctionAction {\n    private walletProvider: WalletProvider;\n\n    constructor(walletProvider: WalletProvider) {\n      this.walletProvider = walletProvider;\n    }\n\n    /**\n     * Validates whether the auction is valid for bidding\n     */\n    async validateAuction(nftAddress: string): Promise<{valid: boolean, message?: string}> {\n      try {\n        // Check if auction has ended\n        const auctionEnded = await isAuctionEnded(this.walletProvider, nftAddress);\n        if (auctionEnded) {\n          return { valid: false, message: \"This auction has already ended\" };\n        }\n\n        return { valid: true };\n      } catch (error: any) {\n        if (error.message.includes(\"Not an auction listing\")) {\n          return { valid: false, message: \"This is not an auction. Please use BUY_LISTING instead\" };\n        }\n        throw error;\n      }\n    }\n\n    /**\n     * Places a bid on an NFT auction\n     */\n    async bid(nftAddress: string, bidAmount?: string): Promise<any> {\n      try {\n        elizaLogger.log(`Starting bid process for NFT: ${nftAddress}`);\n\n        // First validate the auction\n        const validationResult = await this.validateAuction(nftAddress);\n        if (!validationResult.valid) {\n          throw new Error(validationResult.message);\n        }\n\n        // Determine the bid amount\n        let amount: bigint;\n        if(!bidAmount) {\n            amount = await getNextValidBidAmount(this.walletProvider, nftAddress);\n        } else {\n            amount = toNano(bidAmount);\n        }\n\n        // Place the bid\n        const receipt = await bidOnAuction(this.walletProvider, nftAddress, amount);\n\n        return receipt;\n      } catch (error) {\n        elizaLogger.error(`Error bidding on NFT ${nftAddress}: ${error}`);\n        throw new Error(`Failed to bid on NFT: ${error.message}`);\n      }\n    }\n  }\n\n  export default {\n    name: \"BID_AUCTION\",\n    similes: [\"NFT_BID\", \"PLACE_BID\", \"BID_NFT\", \"AUCTION_BID\"],\n    description:\n      \"Places a bid on an NFT auction by sending a transaction with the bid amount. If no bid is mentioned, the next valid bid amount is used.\",\n    handler: async (\n      runtime: IAgentRuntime,\n      message: Memory,\n      state: State,\n      options: any,\n      callback?: HandlerCallback\n    ) => {\n      elizaLogger.log(\"Starting BID_AUCTION handler...\");\n      const params = await buildBidAuctionData(runtime, message, state);\n\n      if (!isBidAuctionContent(params)) {\n        if (callback) {\n          callback({\n            text: \"Unable to process bid request. Invalid content provided.\",\n            content: { error: \"Invalid bid content\" },\n          });\n        }\n        return false;\n      }\n\n      try {\n        const walletProvider = await initWalletProvider(runtime);\n        const bidAuctionAction = new BidAuctionAction(walletProvider);\n\n        const result = await bidAuctionAction.bid(params.nftAddress, params.bidAmount);\n\n        if (callback) {\n          callback({\n            text: JSON.stringify(result, null, 2),\n            content: result,\n          });\n        }\n      } catch (error: any) {\n        elizaLogger.error(\"Error in BID_AUCTION handler:\", error);\n        if (callback) {\n          callback({\n            text: `Error in BID_AUCTION: ${error.message}`,\n            content: { error: error.message },\n          });\n        }\n      }\n      return true;\n    },\n    template: bidAuctionTemplate,\n    // eslint-disable-next-line\n    validate: async (_runtime: IAgentRuntime) => {\n      return true;\n    },\n    examples: [\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            nftAddress: \"EQNftAuctionAddressExample\",\n            bidAmount: \"5000000000\",\n            action: \"BID_AUCTION\",\n          },\n        },\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Bid placed successfully\",\n          },\n        },\n      ],\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            nftAddress: \"EQNftAuctionAddressExample\",\n            action: \"BID_AUCTION\",\n          },\n        },\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Bid placed successfully with minimum valid bid\",\n          },\n        },\n      ]\n    ],\n  };\n","import {\n  elizaLogger,\n  composeContext,\n  generateObject,\n  ModelClass,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  type HandlerCallback,\n  Content,\n} from \"@elizaos/core\";\nimport {\n  Address,\n  internal,\n  SendMode,\n  toNano,\n  Cell,\n  beginCell,\n} from \"@ton/ton\";\nimport { z } from \"zod\";\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport { waitSeqnoContract } from \"../utils/util\";\nimport { getListingData } from \"../services/nft-marketplace/listingData\";\nimport { cancelListing } from \"../services/nft-marketplace/listingTransactions\";\n\n/**\n * Schema for cancel listing input.\n * Only requires:\n * - nftAddress: The NFT contract address.\n */\nconst cancelListingSchema = z\n  .object({\n    nftAddress: z.string().nonempty(\"NFT address is required\"),\n  })\n  .refine((data) => data.nftAddress, {\n    message: \"NFT address is required\",\n    path: [\"nftAddress\"],\n  });\n\nexport interface CancelListingContent extends Content {\n  nftAddress: string;\n}\n\nfunction isCancelListingContent(\n  content: Content\n): content is CancelListingContent {\n  return typeof content.nftAddress === \"string\";\n}\n\nconst cancelListingTemplate = `Respond with a JSON markdown block containing only the extracted values.\nExample response:\n\\`\\`\\`json\n{\n  \"nftAddress\": \"<NFT address to cancel listing>\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\n/**\n * Helper function to build cancel listing parameters.\n */\nconst buildCancelListingData = async (\n  runtime: IAgentRuntime,\n  message: Memory,\n  state: State\n): Promise<CancelListingContent> => {\n  const context = composeContext({\n    state,\n    template: cancelListingTemplate,\n  });\n  const content = await generateObject({\n    runtime,\n    context,\n    schema: cancelListingSchema as any,\n    modelClass: ModelClass.SMALL,\n  });\n  return content.object as any;\n};\n\n/**\n * CancelListingAction encapsulates the logic to cancel an NFT listing.\n */\nexport class CancelListingAction {\n  private walletProvider: WalletProvider;\n  constructor(walletProvider: WalletProvider) {\n    this.walletProvider = walletProvider;\n  }\n\n  /**\n   * Cancels an NFT listing\n   */\n  async cancel(nftAddress: string): Promise<any> {\n    try {\n      elizaLogger.log(`Starting cancellation of NFT listing: ${nftAddress}`);\n\n      const receipt = await cancelListing(this.walletProvider, nftAddress);\n      return receipt;\n    } catch (error) {\n      elizaLogger.error(`Error cancelling NFT listing ${nftAddress}: ${error}`);\n      throw new Error(`Failed to cancel NFT listing: ${error.message}`);\n    }\n  }\n}\n\nexport default {\n  name: \"CANCEL_LISTING\",\n  similes: [\"NFT_CANCEL\", \"CANCEL_NFT\", \"CANCEL_SALE\"],\n  description:\n    \"Cancels a listed NFT by sending a cancel operation to the listing contract.\",\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    options: any,\n    callback?: HandlerCallback\n  ) => {\n    elizaLogger.log(\"Starting CANCEL_LISTING handler...\");\n    const params = await buildCancelListingData(runtime, message, state);\n\n    if (!isCancelListingContent(params)) {\n      if (callback) {\n        callback({\n          text: \"Unable to process cancel listing request. Invalid content provided.\",\n          content: { error: \"Invalid cancel listing content\" },\n        });\n      }\n      return false;\n    }\n\n    try {\n      const walletProvider = await initWalletProvider(runtime);\n      const cancelListingAction = new CancelListingAction(walletProvider);\n\n      const result = await cancelListingAction.cancel(params.nftAddress);\n\n      if (callback) {\n        callback({\n          text: JSON.stringify(result, null, 2),\n          content: result,\n        });\n      }\n    } catch (error: any) {\n      elizaLogger.error(\"Error in CANCEL_LISTING handler:\", error);\n      if (callback) {\n        callback({\n          text: `Error in CANCEL_LISTING: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n    }\n    return true;\n  },\n  template: cancelListingTemplate,\n  // eslint-disable-next-line\n  validate: async (_runtime: IAgentRuntime) => {\n    return true;\n  },\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          nftAddress: \"EQNftAddressExample\",\n          action: \"CANCEL_LISTING\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Cancel listing transaction sent successfully\",\n        },\n      },\n    ],\n  ],\n};\n","import {\n  elizaLogger,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  type HandlerCallback,\n  type Content,\n  composeContext,\n  generateObject,\n  ModelClass,\n} from \"@elizaos/core\";\nimport { Address, beginCell, Cell, internal, toNano } from \"@ton/ton\";\nimport { z } from \"zod\";\nimport { initWalletProvider, type WalletProvider } from \"../providers/wallet\";\nimport { base64ToHex, waitSeqnoContract } from \"../utils/util\";\n\nexport interface TransferNFTContent extends Content {\n    nftAddress: string;\n    newOwner: string;\n}\n\nfunction isTransferNFTContent(content: Content): content is TransferNFTContent {\n    console.log(\"Content for transfer\", content);\n    return (\n        typeof content.nftAddress === \"string\" &&\n        typeof content.newOwner === \"string\"\n    );\n}\n\n/**\n * Defines the schema for transferring an NFT.\n * - nftAddress: The address of the NFT smart contract.\n * - newOwner: The TON address of the new owner.\n */\nconst transferNFTSchema = z.object({\n  nftAddress: z.string().nonempty({ message: \"NFT address is required\" }),\n  newOwner: z.string().nonempty({ message: \"New owner address is required\" }),\n});\n\n/**\n * Template string to guide the AI agent (if needed).\n */\nconst transferNFTTemplate = `Respond with a JSON markdown block containing only the extracted values.\nExample:\n\\`\\`\\`json\n{\n  \"nftAddress\": \"0QDIUnzAEsgHLL7YSrvm_u7OYSKw93AQbtdidRdcbm7tQep5\",\n  \"newOwner\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract and output only the values as a JSON markdown block.`;\n\n/**\n * The TransferNFTAction class encapsulates the logic for transferring NFT ownership.\n */\nclass TransferNFTAction {\n\n    private walletProvider: WalletProvider;\n\n    constructor(walletProvider: WalletProvider) {\n        this.walletProvider = walletProvider;\n    }\n\n    private createTransferBody(params: {\n      newOwner: Address;\n      responseTo?: Address;\n      forwardAmount?: bigint;\n    }): Cell {\n      const msgBody = beginCell();\n      msgBody.storeUint(0x5fcc3d14, 32); // op-code for transfer\n      msgBody.storeUint(0, 64); // query-id\n      msgBody.storeAddress(params.newOwner);\n      msgBody.storeAddress(params.responseTo || null);\n      msgBody.storeBit(false); // no custom payload\n      msgBody.storeCoins(params.forwardAmount || 0);\n      msgBody.storeBit(0); // no forward_payload \n    \n      return msgBody.endCell();\n    }\n  /**\n   * Crafts and sends a transfer message to the NFT smart contract.\n   * Note: This implementation simulates the deployment of the transfer transaction.\n   */\n  async transfer(params: TransferNFTContent): Promise<string> {\n    // Use a TON client (using testnet endpoint; adjust as needed).\n    elizaLogger.log(\n        `[Plugin-TON] Transferring: ${params.nftAddress} to (${params.newOwner})`,\n    );\n\n    const walletClient = this.walletProvider.getWalletClient();\n    const contract = walletClient.open(this.walletProvider.wallet);\n\n    try {\n      // Parse the NFT smart contract address.\n      const nftAddressParsed = Address.parse(params.nftAddress);\n\n      // Parse the new owner and authorized wallet addresses.\n      const newOwnerAddress = Address.parse(params.newOwner);\n\n      // Create a transfer\n      const seqno: number = await contract.getSeqno();\n      \n      const transfer = contract.createTransfer({\n          seqno,\n          secretKey: this.walletProvider.keypair.secretKey,\n          messages: [\n            internal({\n              value: \"0.05\",\n              to: nftAddressParsed,\n              body: this.createTransferBody({\n                newOwner: newOwnerAddress,\n                responseTo: contract.address,\n                forwardAmount: toNano(\"0.02\"),\n              }),\n            }),\n          ],\n      });\n      \n      await contract.send(transfer);\n      elizaLogger.log(\"Transaction sent, waiting for confirmation...\");\n      \n      // Wait for transaction confirmation using waitSeqnoContract\n      await waitSeqnoContract(seqno, contract);\n      \n      const state = await walletClient.getContractState(\n          this.walletProvider.wallet.address,\n      );\n      \n      const { lt: _, hash: lastHash } = state.lastTransaction;\n      return base64ToHex(lastHash);\n    } catch (error) {\n      throw new Error(`Transfer failed: ${error.message}`);\n    }\n  }\n}\n\nconst buildTransferNFTContent = async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n): Promise<TransferNFTContent> => {\n\n    // Initialize or update state\n    let currentState = state;\n    if (!currentState) {\n        currentState = (await runtime.composeState(message)) as State;\n    } else {\n        currentState = await runtime.updateRecentMessageState(currentState);\n    }\n\n    // Compose transfer context\n    const transferContext = composeContext({\n        state,\n        template: transferNFTTemplate,\n    });\n\n    // Generate transfer content with the schema\n    const content = await generateObject({\n        runtime,\n        context: transferContext,\n        schema: transferNFTSchema,\n        modelClass: ModelClass.SMALL,\n    });\n\n    let transferContent: TransferNFTContent = content.object as TransferNFTContent;\n\n    if (transferContent === undefined) {\n        transferContent = content as unknown as TransferNFTContent;\n    }\n\n    return transferContent;\n};\n\n/**\n * The action to initiate an NFT ownership transfer.\n * It verifies that the calling (authorized) wallet is the current owner of the NFT.\n */\nexport default {\n  name: \"TRANSFER_NFT\",\n  similes: [\"NFT_TRANSFER\", \"TRANSFER_OWNERSHIP\"],\n  description:\n    \"Transfers ownership of an existing NFT item. Only an authorized agent (matching the NFT's current owner) can invoke this action. The authorized wallet is verified using the wallet provider (via runtime settings).\",\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: Record<string, unknown>,\n    callback?: HandlerCallback\n  ) => {\n    elizaLogger.log(\"Starting TRANSFER_NFT handler...\");\n\n    const transferDetails = await buildTransferNFTContent(\n        runtime,\n        message,\n        state,\n    );\n\n\n    // Validate transfer content\n    if (!isTransferNFTContent(transferDetails)) {\n        if (callback) {\n            callback({\n                text: \"Unable to process transfer request. Invalid content provided.\",\n                content: { error: \"Invalid transfer content\" },\n            });\n        }\n        return false;\n    }\n    try {\n\n      const walletProvider = await initWalletProvider(runtime);\n      // Fetch the current NFT owner via get_nft_data.\n      const result = await walletProvider.getWalletClient().runMethod(Address.parse(transferDetails.nftAddress), \"get_nft_data\");\n\n      // Custom serializer for BigInt values\n      const safeStringify = (obj: any) => {\n        return JSON.stringify(obj, (_, value) => \n          typeof value === 'bigint' ? value.toString() : value\n        );\n      };\n\n      elizaLogger.log(`NFT data result: ${safeStringify(result)}`);\n\n      // Read the elements from the stack in order\n      const init = result.stack.readNumber();           // Read the init flag (1st element)\n      const index = result.stack.readNumber();          // Read the index (2nd element)\n      const collectionAddress = result.stack.readAddress(); // Read collection address (3rd element)\n      const ownerAddress = result.stack.readAddress();  // Read owner address (4th element)\n\n      // Now we have the owner address\n      const currentOwnerAddress = ownerAddress?.toString();\n      elizaLogger.log(`Current NFT owner: ${currentOwnerAddress}`);\n      if (!currentOwnerAddress) {\n        throw new Error(\"Could not retrieve current NFT owner address.\");\n      }\n      if(currentOwnerAddress !== walletProvider.wallet.address.toString()) {\n        throw new Error(\"You are not the owner of this NFT.\");\n      }\n      elizaLogger.log(`Current NFT owner: ${currentOwnerAddress}`);\n\n\n      // Proceed with the transfer.\n      const transferAction = new TransferNFTAction(walletProvider);\n      await transferAction.transfer(transferDetails);\n\n      const response = {\n        status: \"success\",\n        nftAddress: transferDetails.nftAddress,\n        newOwner: transferDetails.newOwner,\n        message: \"NFT ownership transfer initiated successfully\",\n      };\n\n      if (callback) {\n        callback({\n          text: `Successfully transferred NFT from ${currentOwnerAddress} to ${transferDetails.newOwner}`,\n          content: response,\n        });\n      }\n      return true;\n    } catch (error: any) {\n      elizaLogger.error(\"Error transferring NFT:\", error);\n      if (callback) {\n        callback({\n          text: `Error transferring NFT: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n      return false;\n    }\n  },\n  validate: async (_runtime: IAgentRuntime) => true,\n  template: transferNFTTemplate,\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        text: \"Transfer NFT with address {{nftAddress}} from {{user1}} to {{user2}}\",\n        content: {\n          nftAddress: \"NFT_123456789\",\n          newOwner: \"EQNewOwnerAddressExample\",\n          action: \"TRANSFER_NFT\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"NFT ownership transfer initiated successfully\",\n        },\n      },\n    ],\n  ],\n}; ","import {\n  elizaLogger,\n  composeContext,\n  generateObject,\n  ModelClass,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  type HandlerCallback,\n  type Content,\n} from \"@elizaos/core\";\nimport { z } from \"zod\";\nimport { Address, toNano } from \"@ton/ton\";\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\n\nimport path from \"path\";\nimport { CollectionData, NFTCollection } from \"../utils/NFTCollection\";\nimport { topUpBalance, updateMetadataFiles, uploadFolderToIPFS, uploadJSONToIPFS, waitSeqnoContract } from \"../utils/util\";\nimport { readdir } from \"fs/promises\";\nimport { NftItem } from \"../utils/NFTItem\";\nimport { getAddressByIndex } from \"../utils/NFTItem\";\n/**\n * Extended interface for minting content.\n * - nftType: Defines if the NFT is part of a collection (\"standalone\") or if a new collection should be created (\"collection\").\n * - collection: For standalone NFTs, a valid NFT collection address must be provided. For new collections, this field can be omitted.\n * - metadata: NFT metadata including storage option and an optional IPFS provider for off-chain storage.\n */\nexport interface MintContent extends Content {\n  nftType: \"collection\" | \"standalone\";\n  collection?: string;\n  owner: string;\n  storage: \"file\" | \"prompt\";\n  imagesFolderPath?: string;\n  metadataFolderPath?: string;\n  metadata?: {\n    name: string;\n    description?: string;\n    image: string;\n    content_url?: string;\n    attributes?: any[];\n  };\n  royaltyPercent?: number;\n  royaltyAddress?: string;\n}\n\n/**\n * A type guard to verify the MintContent payload.\n */\nfunction isMintContent(content: Content): content is MintContent {\n  elizaLogger.log(\"Validating mint content:\", content);\n  \n  // Basic validation\n  if (!content.nftType || !content.storage) {\n    elizaLogger.error(\"Missing required fields: nftType or storage\");\n    return false;\n  }\n  \n  // Validate nftType\n  if (content.nftType !== \"collection\" && content.nftType !== \"standalone\") {\n    elizaLogger.error(`Invalid nftType: ${content.nftType}`);\n    return false;\n  }\n  \n  // Validate collection address for standalone NFTs\n  if (content.nftType === \"standalone\" && !content.collection) {\n    elizaLogger.error(\"Collection address is required for standalone NFTs\");\n    return false;\n  }\n  \n  // Validate storage type\n  if (content.storage !== \"file\" && content.storage !== \"prompt\") {\n    elizaLogger.error(`Invalid storage type: ${content.storage}`);\n    return false;\n  }\n  \n  return true;\n}\n\n/**\n * Define the schema for NFT minting.\n * - nftType: \"collection\" to initialize a new NFT Collection, \"standalone\" for existing collection NFTs.\n * - collection: Required for standalone NFTs, optional (and ignored) if initializing a new collection.\n * - owner: NFT owner address.\n * - metadata: NFT metadata according to TEP-64.\n *   * storage: Option for metadata storage (\"on-chain\" or \"off-chain\").\n *   * ipfsProvider: Optional IPFS provider to use in case of off-chain metadata.\n */\nconst mintNFTSchema = z\n  .object({\n    nftType: z.enum([\"collection\", \"standalone\"]).default(\"standalone\"),\n    collection: z.string().optional().nullable(),\n    owner: z.string().nonempty({ message: \"Owner address is required\" }),\n    storage: z.enum([\"file\", \"prompt\"]).default(\"file\"),\n    imagesFolderPath: z.string().optional().nullable(),\n    metadataFolderPath: z.string().optional().nullable(),\n    royaltyPercent: z.number().optional().nullable(),\n    royaltyAddress: z.string().optional().nullable(),\n    metadata: z.object({\n      name: z.string().nonempty({ message: \"NFT name is required\" }),\n      description: z.string().optional(),\n      image: z.string().nonempty({ message: \"Image URL is required\" }),\n      cover_image: z.string().optional(),\n      social_links: z.array(z.string().optional()).optional(),\n    }).optional().nullable(),\n  })\n  .refine((data) => {\n    if (data.nftType === \"standalone\") {\n      return data.collection && data.collection.trim() !== \"\";\n    }\n    return true;\n  }, {\n    message: \"Collection address is required for standalone NFTs\",\n    path: [\"collection\"],\n  });\n\n  \n/**\n * Template string to guide the AI agent.\n */\nconst mintNFTTemplate = `Respond with a JSON markdown block containing only the extracted values.\nUse null for any values that cannot be determined.\n\nExample response for standalone NFT (belongs to a collection):\n\\`\\`\\`json\n{\n    \"nftType\": \"standalone\",\n    \"collection\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\",\n    \"owner\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\",\n    \"storage\": \"prompt\",\n    \"metadata\": {\n        \"name\": \"Rare NFT Artwork\",\n        \"description\": \"A unique NFT artwork minted on TON\",\n        \"image\": \"https://example.com/nft-image.png\",\n        \"cover_image\": \"https://example.com/nft-cover-image.png\",\n        \"social_links\": {\n            \"twitter\": \"https://x.com/example\",\n            \"telegram\": \"https://t.me/example\",\n            \"website\": \"https://example.com\"\n        }\n    }\n}\n\\`\\`\\`\n\nExample response for collection NFT (new collection):\n\\`\\`\\`json\n{\n    \"nftType\": \"collection\",\n    \"owner\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\",\n    \"storage\": \"file\",\n    \"imagesFolderPath\": \"path/to/images\",\n    \"metadataFolderPath\": \"path/to/metadata\",\n    \"royaltyPercent\": 0.05,\n    \"royaltyAddress\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the required information to mint an NFT:\n- NFT type: \"collection\" or \"standalone\"\n- Collection address: For collection NFTs, the collection address must be provided.\n- The owner address.\n- Storage option: \"file\" or \"prompt\"\n- NFT metadata including name, image, optional description for \"prompt\" storage,\n- Images folder path: For \"file\" storage, the path to the images folder.\n- Metadata folder path: For \"file\" storage, the path to the metadata folder.\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\n/**\n * Builds the mint details by composing the context using the mintNFTTemplate,\n * then generating the desired object using the provided schema.\n */\nconst buildMintDetails = async (\n  runtime: IAgentRuntime,\n  message: Memory,\n  state: State,\n): Promise<MintContent> => {\n  // Initialize or update state.\n  let currentState = state;\n  if (!currentState) {\n    currentState = (await runtime.composeState(message)) as State;\n  } else {\n    currentState = await runtime.updateRecentMessageState(currentState);\n  }\n\n  const mintContext = composeContext({\n    state: currentState,\n    template: mintNFTTemplate,\n  });\n\n  try {\n    const content = await generateObject({\n      runtime,\n      context: mintContext,\n      schema: mintNFTSchema,\n      modelClass: ModelClass.SMALL,\n    });\n\n    let mintContent: MintContent = content.object as MintContent;\n    if (mintContent === undefined) {\n      mintContent = content as unknown as MintContent;\n    }\n    return mintContent;\n  } catch (error) {\n    elizaLogger.error(\"Error generating mint content:\", error);\n    throw new Error(`Failed to generate mint content: ${error.message}`);\n  }\n};\n\n/**\n * The MintNFTAction class simulates NFT minting.\n * If nftType is \"collection\", a new NFT Collection contract is initialized and its address is generated.\n * Then an NFT item is minted. For \"standalone\", an NFT is minted under the provided collection address.\n * Depending on metadata.storage, the metadata is either stored on-chain or uploaded to IPFS.\n * Finally, a deploy transaction is crafted and sent using the TON SDK.\n */\n\nclass MintNFTAction {\n  private walletProvider: WalletProvider;\n\n  constructor(walletProvider: WalletProvider) {\n    this.walletProvider = walletProvider;\n  }\n\n  /**\n   * Uploads content to IPFS based on storage type\n   */\n  private async uploadContent(params: MintContent): Promise<{ metadataIpfsHash: string, imagesIpfsHash?: string }> {\n    let metadataIpfsHash: string;\n    let imagesIpfsHash: string | undefined;\n    \n    try {\n      if (params.storage === \"file\") {\n        if (!params.imagesFolderPath || !params.metadataFolderPath) {\n          throw new Error(\"Image and metadata folder paths are required for file storage\");\n        }\n        \n        elizaLogger.log(\"Started uploading images to IPFS...\");\n        imagesIpfsHash = await uploadFolderToIPFS(params.imagesFolderPath);\n        elizaLogger.log(\n          `Successfully uploaded the pictures to ipfs: https://gateway.pinata.cloud/ipfs/${imagesIpfsHash}`\n        );\n      \n        elizaLogger.log(\"Started uploading metadata files to IPFS...\");\n        await updateMetadataFiles(params.metadataFolderPath, imagesIpfsHash);\n        metadataIpfsHash = await uploadFolderToIPFS(params.metadataFolderPath);\n        elizaLogger.log(\n          `Successfully uploaded the metadata to ipfs: https://gateway.pinata.cloud/ipfs/${metadataIpfsHash}`\n        );\n        return { metadataIpfsHash, imagesIpfsHash };\n      } else if(params.storage === \"prompt\"){\n        if(!params.metadata) {\n          throw new Error(\"Metadata is required for prompt storage\");\n        }\n        elizaLogger.log(\"Uploading metadata JSON to IPFS...\");\n        metadataIpfsHash = await uploadJSONToIPFS(params.metadata);\n        elizaLogger.log(`Successfully uploaded metadata to IPFS: ${metadataIpfsHash}`);\n        return { metadataIpfsHash };\n      }\n      \n      throw new Error(\"Invalid storage type\");\n    } catch (error) {\n      elizaLogger.error(\"Error uploading content to IPFS:\", error);\n      throw new Error(`Failed to upload content: ${error.message}`);\n    }\n  }\n\n  /**\n   * Deploys a standalone NFT to an existing collection\n   */\n  private async deployStandaloneNFT(params: MintContent): Promise<any> {\n    if(!params.collection) {\n      throw new Error(\"Collection address is required for standalone NFTs\");\n    }\n    \n    try {\n      elizaLogger.log(`Reading metadata files from ${params.metadataFolderPath}`);\n      const files = await readdir(params.metadataFolderPath as string);\n      files.pop(); // Remove collection.json\n      let index = 0;\n      \n      elizaLogger.log(`Found ${files.length} NFT metadata files to deploy`);\n      elizaLogger.log(\"Topping up wallet balance...\");\n      let seqno = await topUpBalance(this.walletProvider, files.length, params.collection);\n      const walletClient = this.walletProvider.getWalletClient();\n      const contract = walletClient.open(this.walletProvider.wallet);\n      await waitSeqnoContract(seqno, contract);\n      \n      for (const file of files) {\n        elizaLogger.log(`Starting deployment of NFT ${index + 1}/${files.length}`);\n        const mintParams = {\n          queryId: 0,\n          itemOwnerAddress: this.walletProvider.wallet.address,\n          itemIndex: index,\n          amount: toNano(\"0.05\"),\n          commonContentUrl: file,\n        };\n    \n        const nftItem = new NftItem(params.collection);\n        seqno = await nftItem.deploy(this.walletProvider, mintParams);\n        await waitSeqnoContract(seqno, this.walletProvider.wallet);\n\n        // Get the NFT address using the getAddressByIndex function\n        const client = this.walletProvider.getWalletClient();\n        const nftAddress = await getAddressByIndex(\n          client, \n          Address.parse(params.collection), \n          index\n        );\n        elizaLogger.log(`Successfully deployed NFT ${index + 1}/${files.length} with address: ${nftAddress}`);\n\n        // Add to deployedNfts array if you want to track them\n        index++;\n      }\n      \n    } catch (error) {\n      elizaLogger.error(\"Error deploying standalone NFT:\", error);\n      throw new Error(`Failed to deploy standalone NFT: ${error.message}`);\n    }\n  }\n\n  /**\n   * Deploys a new NFT collection\n   */\n  private async deployCollection(params: MintContent, metadataIpfsHash: string): Promise<string> {\n    try {\n      elizaLogger.log(\"[TON] Starting deployment of NFT collection...\");\n      \n      // Use default values if not provided\n      const royaltyPercent = params.royaltyPercent ?? 5;\n      const royaltyAddress = params.royaltyAddress \n        ? Address.parse(params.royaltyAddress) \n        : this.walletProvider.wallet.address;\n      \n      const collectionData: CollectionData = {\n        ownerAddress: this.walletProvider.wallet.address,\n        royaltyPercent: royaltyPercent, \n        royaltyAddress: royaltyAddress,\n        nextItemIndex: 0,\n        collectionContentUrl: `ipfs://${metadataIpfsHash}/collection.json`,\n        commonContentUrl: `ipfs://${metadataIpfsHash}/`,\n      };\n      \n      elizaLogger.log(\"Creating NFT collection with data:\", {\n        owner: collectionData.ownerAddress.toString(),\n        royaltyPercent: collectionData.royaltyPercent,\n        royaltyAddress: collectionData.royaltyAddress.toString(),\n        collectionContentUrl: collectionData.collectionContentUrl,\n      });\n      \n      const collection = new NFTCollection(collectionData);\n      let seqno = await collection.deploy(this.walletProvider);\n      elizaLogger.log(`Collection deployment transaction sent, waiting for confirmation...`);\n\n      const walletClient = this.walletProvider.getWalletClient();\n      const contract = walletClient.open(this.walletProvider.wallet);\n      await waitSeqnoContract(seqno, contract);\n      elizaLogger.log(`Collection successfully deployed: ${collection.address}`);\n      \n      return collection.address.toString();\n    } catch (error) {\n      elizaLogger.error(\"Error deploying NFT collection:\", error);\n      throw new Error(`Failed to deploy NFT collection: ${error.message}`);\n    }\n  }\n\n  /**\n   * Main minting method.\n   * If file storage is selected, uploads contents to IPFS and updates metadata.\n   * If prompt storage is selected, uploads metadata to IPFS.\n   * Then, based on nftType:\n   * - For \"collection\": a new collection address is simulated and the first NFT (index 0) is minted.\n   * - For \"standalone\": uses the provided collection address and queries it to get the next available NFT index.\n   */\n  async mint(params: MintContent): Promise<string> {\n    try {\n      elizaLogger.log(`Starting NFT minting process for type: ${params.nftType}`);\n      elizaLogger.log(`Using storage type: ${params.storage}`);\n      \n      const { metadataIpfsHash } = await this.uploadContent(params);\n      elizaLogger.log(`Content uploaded to IPFS with hash: ${metadataIpfsHash}`);\n\n      if (params.nftType === \"standalone\") {\n        elizaLogger.log(`Deploying standalone NFT to collection: ${params.collection}`);\n        return await this.deployStandaloneNFT(params);\n      } else if(params.nftType === \"collection\"){\n        elizaLogger.log(\"Deploying new NFT collection\");\n        return await this.deployCollection(params, metadataIpfsHash);\n      } else {\n        throw new Error(`Invalid NFT type: ${params.nftType}`);\n      }\n    } catch (error) {\n      elizaLogger.error(\"Error in mint method:\", error);\n      throw new Error(`Mint operation failed: ${error.message}`);\n    }\n  }\n}\n\nexport default {\n  name: \"MINT_NFT\",\n  similes: [\"NFT_MINT\", \"MINT_NEW_NFT\"],\n  description:\n    \"Mints a new NFT. Can initialize a new NFT Collection (if selected) or mint a standalone NFT. Supports on-chain/off-chain metadata storage with IPFS upload and deploys the NFT contract using the TON SDK.\",\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: Record<string, unknown>,\n    callback?: HandlerCallback,\n  ) => {\n    elizaLogger.log(\"Starting MINT_NFT handler...\");\n    try {\n      // Build mint details using the helper method.\n      let mintParams = await buildMintDetails(runtime, message, state);\n\n      elizaLogger.log(\"Mint parameters extracted:\", {\n        nftType: mintParams.nftType,\n        storage: mintParams.storage,\n        collection: mintParams.collection || \"N/A\",\n      });\n\n      // Validate the content using the type guard\n      if (!isMintContent(mintParams)) {\n        elizaLogger.error(\"Invalid mint content:\", mintParams);\n        if (callback) {\n          callback({\n            text: \"Unable to process mint request. Invalid content provided.\",\n            content: { error: \"Invalid mint content\" },\n          });\n        }\n        return false;\n      }\n\n      // Set default paths if not provided\n      mintParams.imagesFolderPath = mintParams.imagesFolderPath || \n        runtime.getSetting(\"TON_NFT_IMAGES_FOLDER\") || \n        path.join(process.cwd(), \"ton_nft_images\");\n      \n      mintParams.metadataFolderPath = mintParams.metadataFolderPath || \n        runtime.getSetting(\"TON_NFT_METADATA_FOLDER\") || \n        path.join(process.cwd(), \"ton_nft_metadata\");\n\n      elizaLogger.log(\"Using paths:\", {\n        imagesFolderPath: mintParams.imagesFolderPath,\n        metadataFolderPath: mintParams.metadataFolderPath,\n      });\n\n      // Mint the NFT.\n      const walletProvider = await initWalletProvider(runtime);\n      const mintNFTAction = new MintNFTAction(walletProvider);\n      const nftAddress = await mintNFTAction.mint(mintParams);\n\n      // Prepare the result.\n      const result = {\n        status: \"success\",\n        nftAddress,\n        collection: mintParams.collection,\n        owner: mintParams.owner,\n        metadata: mintParams.metadata,\n        nftType: mintParams.nftType,\n        message: \"NFT minted successfully\",\n      };\n\n      elizaLogger.log(\"NFT minted successfully:\", result);\n\n      if (callback) {\n        callback({\n          text: `NFT minted successfully. NFT Address: ${nftAddress}`,\n          content: result,\n        });\n      }\n\n      return true;\n    } catch (error: any) {\n      elizaLogger.error(\"Error minting NFT:\", error);\n      if (callback) {\n        callback({\n          text: `Error minting NFT: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n      return false;\n    }\n  },\n  validate: async (_runtime: IAgentRuntime) => true,\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        text: \"Mint a new NFT, The metadata is: name: Rare NFT Artwork, description: A unique NFT artwork minted on TON, image: https://example.com/nft-image.png, storage: off-chain, ipfsProvider: ipfs.io\",\n        content: {\n          nftType: \"standalone\",\n          collection: \"EQC123CollectionAddress\", // required for standalone NFTs\n          owner: \"EQCOwnerAddress123\",\n          metadata: {\n            name: \"Rare NFT Artwork\",\n            description: \"A unique NFT artwork minted on TON\",\n            image: \"https://example.com/nft-image.png\",\n            storage: \"off-chain\",\n            ipfsProvider: \"ipfs.io\",\n          },\n          action: \"MINT_NFT\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"NFT minted successfully. NFT Address: NFT_...\",\n        },\n      },\n    ],\n  ],\n  template: mintNFTTemplate,\n}; ","import { beginCell, Address, Cell, internal, contractAddress, SendMode, StateInit } from \"@ton/ton\";\nimport { encodeOffChainContent } from \"./util\";\nimport { WalletProvider } from \"../providers/wallet\";\nexport type CollectionData = {\n    ownerAddress: Address;\n    royaltyPercent: number;\n    royaltyAddress: Address;\n    nextItemIndex: number;\n    collectionContentUrl: string;\n    commonContentUrl: string;\n  }\n\nexport type MintParams = {\n    queryId: number | null,\n    itemOwnerAddress: Address,\n    itemIndex: number,\n    amount: bigint,\n    commonContentUrl: string\n  }\n\nexport class NFTCollection {\n  private collectionData: CollectionData;\n\n  constructor(collectionData: CollectionData) {\n    this.collectionData = collectionData;\n  }\n\n\n  private createCodeCell(): Cell {\n    const NftCollectionCodeBoc =\n      \"te6cckECFAEAAh8AART/APSkE/S88sgLAQIBYgkCAgEgBAMAJbyC32omh9IGmf6mpqGC3oahgsQCASAIBQIBIAcGAC209H2omh9IGmf6mpqGAovgngCOAD4AsAAvtdr9qJofSBpn+pqahg2IOhph+mH/SAYQAEO4tdMe1E0PpA0z/U1NQwECRfBNDUMdQw0HHIywcBzxbMyYAgLNDwoCASAMCwA9Ra8ARwIfAFd4AYyMsFWM8WUAT6AhPLaxLMzMlx+wCAIBIA4NABs+QB0yMsCEsoHy//J0IAAtAHIyz/4KM8WyXAgyMsBE/QA9ADLAMmAE59EGOASK3wAOhpgYC42Eit8H0gGADpj+mf9qJofSBpn+pqahhBCDSenKgpQF1HFBuvgoDoQQhUZYBWuEAIZGWCqALnixJ9AQpltQnlj+WfgOeLZMAgfYBwGyi544L5cMiS4ADxgRLgAXGBEuAB8YEYGYHgAkExIREAA8jhXU1DAQNEEwyFAFzxYTyz/MzMzJ7VTgXwSED/LwACwyNAH6QDBBRMhQBc8WE8s/zMzMye1UAKY1cAPUMI43gED0lm+lII4pBqQggQD6vpPywY/egQGTIaBTJbvy9AL6ANQwIlRLMPAGI7qTAqQC3gSSbCHis+YwMlBEQxPIUAXPFhPLP8zMzMntVABgNQLTP1MTu/LhklMTugH6ANQwKBA0WfAGjhIBpENDyFAFzxYTyz/MzMzJ7VSSXwXiN0CayQ==\";\n    return Cell.fromBase64(NftCollectionCodeBoc);\n  }\n\n  private createDataCell(): Cell {\n    const data = this.collectionData;\n    const dataCell = beginCell();\n  \n    dataCell.storeAddress(data.ownerAddress);\n    dataCell.storeUint(data.nextItemIndex, 64);\n    const contentCell = beginCell();\n\n    const collectionContent = encodeOffChainContent(data.collectionContentUrl);\n    \n    const commonContent = beginCell();\n    commonContent.storeBuffer(Buffer.from(data.commonContentUrl));\n    \n    contentCell.storeRef(collectionContent);\n    contentCell.storeRef(commonContent.asCell());\n    dataCell.storeRef(contentCell);\n    const NftItemCodeCell = Cell.fromBase64(\n      \"te6cckECDQEAAdAAART/APSkE/S88sgLAQIBYgMCAAmhH5/gBQICzgcEAgEgBgUAHQDyMs/WM8WAc8WzMntVIAA7O1E0NM/+kAg10nCAJp/AfpA1DAQJBAj4DBwWW1tgAgEgCQgAET6RDBwuvLhTYALXDIhxwCSXwPg0NMDAXGwkl8D4PpA+kAx+gAxcdch+gAx+gAw8AIEs44UMGwiNFIyxwXy4ZUB+kDUMBAj8APgBtMf0z+CEF/MPRRSMLqOhzIQN14yQBPgMDQ0NTWCEC/LJqISuuMCXwSED/LwgCwoAcnCCEIt3FzUFyMv/UATPFhAkgEBwgBDIywVQB88WUAX6AhXLahLLH8s/Im6zlFjPFwGRMuIByQH7AAH2UTXHBfLhkfpAIfAB+kDSADH6AIIK+vCAG6EhlFMVoKHeItcLAcMAIJIGoZE24iDC//LhkiGOPoIQBRONkchQCc8WUAvPFnEkSRRURqBwgBDIywVQB88WUAX6AhXLahLLH8s/Im6zlFjPFwGRMuIByQH7ABBHlBAqN1viDACCAo41JvABghDVMnbbEDdEAG1xcIAQyMsFUAfPFlAF+gIVy2oSyx/LPyJus5RYzxcBkTLiAckB+wCTMDI04lUC8ANqhGIu\"\n    );\n    dataCell.storeRef(NftItemCodeCell);\n    const royaltyBase = 1000;\n    const royaltyFactor = Math.floor(data.royaltyPercent * royaltyBase);\n    const royaltyCell = beginCell();\n    royaltyCell.storeUint(royaltyFactor, 16);\n    royaltyCell.storeUint(royaltyBase, 16);\n    royaltyCell.storeAddress(data.royaltyAddress);\n    dataCell.storeRef(royaltyCell);\n\n    return dataCell.endCell();\n  }\n\n  public get stateInit(): StateInit {\n    const code = this.createCodeCell();\n    const data = this.createDataCell();\n  \n    return { code, data };\n  }\n\n  public get address(): Address {\n    return contractAddress(0, this.stateInit);\n  }\n\n  public async deploy(walletProvider: WalletProvider) {\n    const walletClient = walletProvider.getWalletClient();\n    const contract = walletClient.open(walletProvider.wallet);\n    const seqno = await contract.getSeqno();\n    await contract.sendTransfer({\n      seqno,\n      secretKey: walletProvider.keypair.secretKey,\n      messages: [\n        internal({\n          value: \"0.05\",\n          to: this.address,\n          init: this.stateInit,\n        }),\n      ],\n      sendMode: SendMode.PAY_GAS_SEPARATELY + SendMode.IGNORE_ERRORS,\n    });\n    return seqno;\n  }\n\n}","import {\n  elizaLogger,\n  composeContext,\n  generateObject,\n  ModelClass,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  type HandlerCallback,\n  Content,\n} from \"@elizaos/core\";\nimport {\n  Address,\n} from \"@ton/ton\";\nimport { z } from \"zod\";\nimport { initWalletProvider, type WalletProvider } from \"../providers/wallet\";\n\nexport interface GetCollectionDataContent extends Content {\n  collectionAddress: string;\n}\n\nfunction isGetCollectionDataContent(content: Content): content is GetCollectionDataContent {\n  return typeof content.collectionAddress === \"string\";\n}\n\n/**\n * Schema for retrieving NFT collection data.\n * - collectionAddress: the NFT collection smart contract address.\n */\nconst getCollectionDataSchema = z.object({\n  collectionAddress: z.string().nonempty(\"Collection address is required\"),\n});\n\n/**\n * Template guiding the extraction of collection data parameters.\n */\nconst getCollectionDataTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n  \"collectionAddress\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested NFT collection data:\n- Collection address\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\n/**\n * Custom serializer for BigInt values\n */\nconst safeStringify = (obj: any) => {\n  return JSON.stringify(obj, (_, value) => \n    typeof value === 'bigint' ? value.toString() : value\n  );\n};\n\n/**\n * GetCollectionDataAction encapsulates the core logic to retrieve NFT collection data.\n */\nclass GetCollectionDataAction {\n  private readonly walletProvider: WalletProvider;\n\n  constructor(walletProvider: WalletProvider) {\n    this.walletProvider = walletProvider;\n  }\n\n  /**\n   * Retrieves and parses collection data from the provided collection address.\n   * Returns an object containing the next NFT index, owner address, royalty info, and NFT items.\n   */\n  async getData(\n    collectionAddress: string,\n  ): Promise<{\n    collectionAddress: string;\n    nextItemIndex: number;\n    ownerAddress: string | null;\n    royaltyParams: {\n      numerator: number;\n      denominator: number;\n      destination: string;\n    } | null;\n    nftItems: Array<{ index: number; address: string }>;\n    message: string;\n  }> {\n    const walletClient = this.walletProvider.getWalletClient();\n    const addr = Address.parse(collectionAddress);\n\n    try {\n      // Get collection data\n      elizaLogger.log(\"Fetching collection data...\");\n      const collectionDataResult = await walletClient.runMethod(addr, \"get_collection_data\");\n      elizaLogger.log(`Collection data result: ${safeStringify(collectionDataResult)}`);\n      \n      // Extract the next NFT index and owner address\n      const nextItemIndex = collectionDataResult.stack.readNumber();\n      \n      // Skip the content cell\n      collectionDataResult.stack.readCell();\n      \n      let ownerAddressStr: string | null = null;\n      try {\n        const ownerAddress = collectionDataResult.stack.readAddress();\n        ownerAddressStr = ownerAddress.toString();\n      } catch (e) {\n        elizaLogger.error(\"Error reading owner address:\", e);\n        ownerAddressStr = null;\n      }\n      \n      // Get royalty parameters\n      let royaltyParams = null;\n      try {\n        elizaLogger.log(\"Fetching royalty parameters...\");\n        const royaltyResult = await walletClient.runMethod(addr, \"royalty_params\");\n        elizaLogger.log(`Royalty result: ${safeStringify(royaltyResult)}`);\n        \n        const numerator = royaltyResult.stack.readNumber();\n        const denominator = royaltyResult.stack.readNumber();\n        const destination = royaltyResult.stack.readAddress().toString();\n        \n        royaltyParams = {\n          numerator,\n          denominator,\n          destination\n        };\n      } catch (e) {\n        elizaLogger.error(\"Error fetching royalty parameters:\", e);\n      }\n      \n      // Get NFT items by index\n      const nftItems = [];\n      elizaLogger.log(`Collection has ${nextItemIndex} NFT items. Fetching addresses...`);\n      \n      for (let i = 0; i < nextItemIndex; i++) {\n        try {\n          const nftAddressResult = await walletClient.runMethod(addr, \"get_nft_address_by_index\", [\n            { type: \"int\", value: BigInt(i) }\n          ]);\n          \n          const nftAddress = nftAddressResult.stack.readAddress().toString();\n          nftItems.push({\n            index: i,\n            address: nftAddress\n          });\n        } catch (e) {\n          elizaLogger.error(`Error fetching NFT address for index ${i}:`, e);\n        }\n      }\n  \n      return {\n        collectionAddress,\n        nextItemIndex,\n        ownerAddress: ownerAddressStr,\n        royaltyParams,\n        nftItems,\n        message: \"Collection data fetched successfully\",\n      };\n    } catch (error: any) {\n      elizaLogger.error(\"Error fetching collection data:\", error);\n      throw error;\n    }\n  }\n}\n\n/**\n * Helper function that builds collection data details.\n */\nconst buildGetCollectionData = async (\n  runtime: IAgentRuntime,\n  message: Memory,\n  state: State\n): Promise<GetCollectionDataContent> => {\n  // Initialize or update state\n  let currentState = state;\n  if (!currentState) {\n    currentState = (await runtime.composeState(message)) as State;\n  } else {\n    currentState = await runtime.updateRecentMessageState(currentState);\n  }\n\n  const getCollectionContext = composeContext({\n    state: currentState,\n    template: getCollectionDataTemplate,\n  });\n  \n  const content = await generateObject({\n    runtime,\n    context: getCollectionContext,\n    schema: getCollectionDataSchema,\n    modelClass: ModelClass.SMALL,\n  });\n\n  let buildGetCollectionDataContent: GetCollectionDataContent = content.object as GetCollectionDataContent;\n\n  if (buildGetCollectionDataContent === undefined) {\n    buildGetCollectionDataContent = content as unknown as GetCollectionDataContent;\n  }\n\n  return buildGetCollectionDataContent;\n};\n\nexport default {\n  name: \"GET_NFT_COLLECTION_DATA\",\n  similes: [\"GET_COLLECTION_DATA\", \"FETCH_NFT_COLLECTION\"],\n  description:\n    \"Fetches collection data (next NFT index, owner address, royalty parameters, and NFT item addresses) from the provided NFT collection address.\",\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: Record<string, unknown>,\n    callback?: HandlerCallback\n  ) => {\n    elizaLogger.log(\"Starting GET_NFT_COLLECTION_DATA handler...\");\n    \n    try {\n      // Build collection data details using the helper method.\n      const getCollectionDetails = await buildGetCollectionData(runtime, message, state);\n\n      if (!isGetCollectionDataContent(getCollectionDetails)) {\n        if (callback) {\n          callback({\n            text: \"Unable to process get collection data request. Invalid content provided.\",\n            content: { error: \"Invalid get collection data content\" },\n          });\n        }\n        return false;\n      }\n\n      const walletProvider = await initWalletProvider(runtime);\n      const getCollectionDataAction = new GetCollectionDataAction(walletProvider);\n      const collectionData = await getCollectionDataAction.getData(getCollectionDetails.collectionAddress);\n\n      // Format a user-friendly response\n      const nftItemsText = collectionData.nftItems.length > 0 \n        ? `Contains ${collectionData.nftItems.length} NFT items.` \n        : \"No NFT items found in this collection.\";\n      \n      const royaltyText = collectionData.royaltyParams \n        ? `Royalty: ${collectionData.royaltyParams.numerator / collectionData.royaltyParams.denominator * 100}% to ${collectionData.royaltyParams.destination}` \n        : \"No royalty information available.\";\n      \n      const ownerText = collectionData.ownerAddress \n        ? `Owner: ${collectionData.ownerAddress}` \n        : \"Owner information not available.\";\n\n      const responseText = `Collection data fetched successfully.\\n${ownerText}\\n${royaltyText}\\n${nftItemsText}`;\n\n      if (callback) {\n        callback({\n          text: responseText,\n          content: collectionData,\n        });\n      }\n      return true;\n    } catch (error: any) {\n      elizaLogger.error(\"Error fetching collection data:\", error);\n      if (callback) {\n        callback({\n          text: `Error fetching collection data: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n      return false;\n    }\n  },\n  validate: async (_runtime: IAgentRuntime) => true,\n  template: getCollectionDataTemplate,\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        text: \"Get collection data for collection address {{collectionAddress}}\",\n        content: {\n          collectionAddress: \"EQSomeCollectionAddressExample\",\n          action: \"GET_NFT_COLLECTION_DATA\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Collection data fetched successfully. Owner: EQ..., Royalty: 5% to EQ..., Contains 10 NFT items.\",\n        },\n      },\n    ],\n  ],\n}; ","import {\n  elizaLogger,\n  composeContext,\n  generateObject,\n  ModelClass,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  type HandlerCallback,\n  Content,\n} from \"@elizaos/core\";\nimport { Address, beginCell, internal, toNano } from \"@ton/ton\";\nimport { z } from \"zod\";\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport { uploadFolderToIPFS, updateMetadataFiles, uploadJSONToIPFS, base64ToHex, waitSeqnoContract } from \"../utils/util\";\nimport path from \"path\";\n\n/**\n * Extended interface for NFT metadata update content.\n * - nftAddress: The target NFT smart contract address.\n * - metadata: Partial NFT metadata update. All fields are optional, supporting partial edits.\n *   * storage: Option for metadata storage (\"prompt\" or \"file\").\n * Additionally, for on-chain updates, optional fields below enable crafting the new on-chain content:\n * - newCollectionMeta: The new collection metadata URL.\n * - newNftCommonMeta: The new NFT common metadata URL.\n * - royaltyAddress: The address to receive royalties.\n */\nexport interface UpdateNFTMetadataContent extends Content {\n  nftAddress: string;\n  storage: \"prompt\" | \"file\";\n  imagesFolderPath?: string;\n  metadataFolderPath?: string;\n  metadata?: {\n    name?: string;\n    description?: string;\n    image?: string;\n    content_url?: string;\n    attributes?: any[];\n  };\n  newCollectionMeta?: string;\n  newNftCommonMeta?: string;\n  royaltyPercent?: number;\n  royaltyAddress?: string;\n}\n\n/**\n * Define schema for updating NFT metadata.\n */\nconst updateNFTMetadataSchema = z.object({\n  nftAddress: z.string().nonempty({ message: \"NFT address is required\" }),\n  storage: z.enum([\"prompt\", \"file\"]).default(\"prompt\"),\n  imagesFolderPath: z.string().optional(),\n  metadataFolderPath: z.string().optional(),\n  metadata: z.object({\n    name: z.string().optional(),\n    description: z.string().optional(),\n    image: z.string().optional(),\n    content_url: z.string().optional(),\n    attributes: z.array(z.any()).optional(),\n  }).optional(),\n  // New fields for on-chain update via custom message:\n  newCollectionMeta: z.string().optional(),\n  newNftCommonMeta: z.string().optional(),\n  royaltyPercent: z.number().optional(),\n  royaltyAddress: z.string().optional(),\n});\n\n\nconst updateNFTMetadataTemplate = `Respond with a JSON markdown block containing only the extracted values.\nExample response for NFT with metadata in prompt:\n\\`\\`\\`json\n{\n    \"nftAddress\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\",\n    \"storage\": \"prompt\",\n    \"royaltyPercent\": 0.05,\n    \"royaltyAddress\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\",\n    \"metadata\": {\n        \"name\": \"Rare NFT Artwork\",\n        \"description\": \"A unique NFT artwork minted on TON\",\n        \"image\": \"https://example.com/nft-image.png\"\n    }\n}\n\\`\\`\\`\n\nExample response for file-based storage:\n\\`\\`\\`json\n{\n    \"nftAddress\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\",\n    \"storage\": \"file\",\n    \"imagesFolderPath\": \"path/to/images\",\n    \"metadataFolderPath\": \"path/to/metadata\",\n    \"royaltyPercent\": 0.05,\n    \"royaltyAddress\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract and output only the values as a JSON markdown block.`;\n\nfunction isUpdateNFTMetadataContent(content: Content): content is UpdateNFTMetadataContent {\n  return (\n    typeof content.nftAddress === \"string\" && \n    typeof content.storage === \"string\" &&\n    (content.storage === \"prompt\" || content.storage === \"file\")\n  );\n}\n\n/**\n * Builds the update details by composing the context using the updateNFTMetadataTemplate\n * and generating the desired object using the provided schema.\n */\nconst buildUpdateDetails = async (\n  runtime: IAgentRuntime,\n  message: Memory,\n  state: State\n): Promise<UpdateNFTMetadataContent> => {\n  const updateContext = composeContext({\n    state,\n    template: updateNFTMetadataTemplate,\n  });\n\n  const content = await generateObject({\n    runtime,\n    context: updateContext,\n    schema: updateNFTMetadataSchema,\n    modelClass: ModelClass.SMALL,\n  });\n\n  return content.object as UpdateNFTMetadataContent;\n};\n\n/**\n * The UpdateNFTMetadataAction class processes metadata updates.\n */\nclass UpdateNFTMetadataAction {\n  private walletProvider: WalletProvider;\n\n  constructor(walletProvider: WalletProvider) {\n    this.walletProvider = walletProvider;\n  }\n\n  /**\n   * Uploads content to IPFS based on storage type\n   */\n  private async uploadContent(params: UpdateNFTMetadataContent): Promise<{ metadataIpfsHash: string, imagesIpfsHash?: string }> {\n    let metadataIpfsHash: string;\n    let imagesIpfsHash: string | undefined;\n    \n    if (params.storage === \"file\") {\n      if (!params.imagesFolderPath || !params.metadataFolderPath) {\n        throw new Error(\"Image and metadata folder paths are required for file storage\");\n      }\n      \n      elizaLogger.log(\"Started uploading images to IPFS...\");\n      imagesIpfsHash = await uploadFolderToIPFS(params.imagesFolderPath);\n      elizaLogger.log(\n        `Successfully uploaded the pictures to ipfs: https://gateway.pinata.cloud/ipfs/${imagesIpfsHash}`\n      );\n    \n      elizaLogger.log(\"Started uploading metadata files to IPFS...\");\n      await updateMetadataFiles(params.metadataFolderPath, imagesIpfsHash);\n      metadataIpfsHash = await uploadFolderToIPFS(params.metadataFolderPath);\n      elizaLogger.log(\n        `Successfully uploaded the metadata to ipfs: https://gateway.pinata.cloud/ipfs/${metadataIpfsHash}`\n      );\n      return { metadataIpfsHash, imagesIpfsHash };\n    } else if(params.storage === \"prompt\"){\n      if(!params.metadata) {\n        throw new Error(\"Metadata is required for prompt storage\");\n      }\n      metadataIpfsHash = await uploadJSONToIPFS(params.metadata);\n      return { metadataIpfsHash };\n    }\n    \n    throw new Error(\"Invalid storage type\");\n  }\n\n  /**\n   * Crafts and sends an on-chain update transaction that changes the NFT's content.\n   * The message follows the provided example:\n   * - Opcode 4 indicates a \"change content\" operation.\n   * - The message body stores a reference to a content cell (built from the new collection meta and NFT common meta)\n   *   and a royalty cell.\n   */\n  private async updateNFTMetadataOnChain(params: UpdateNFTMetadataContent): Promise<string> {\n    // Parse the NFT address.\n    const nftTonAddress = Address.parse(params.nftAddress);\n\n    // Build the collection metadata cell.\n    const collectionMetaCell = beginCell()\n      .storeUint(1, 8) // Indicates offchain metadata.\n      .storeStringTail(params.newCollectionMeta!)\n      .endCell();\n\n    // Build the NFT common metadata cell.\n    const nftCommonMetaCell = beginCell()\n      .storeUint(1, 8)\n      .storeStringTail(params.newNftCommonMeta!)\n      .endCell();\n\n    // Build the content cell which contains both references.\n    const contentCell = beginCell()\n      .storeRef(collectionMetaCell)\n      .storeRef(nftCommonMetaCell)\n      .endCell();\n\n    // Build the royalty cell.\n    const royaltyCell = beginCell()\n      .storeUint(params.royaltyPercent! * 100, 16) // factor (e.g., 5% = 500).\n      .storeUint(10000, 16) // base.\n      .storeAddress(Address.parse(params.royaltyAddress!))\n      .endCell();\n\n    // Build the update message body using opcode 4.\n    const messageBody = beginCell()\n      .storeUint(4, 32) // Opcode for changing content.\n      .storeUint(0, 64) // Query id (0).\n      .storeRef(contentCell)\n      .storeRef(royaltyCell)\n      .endCell();\n\n    // Create the internal update message.\n    const updateMessage = internal({\n      to: nftTonAddress,\n      value: toNano(\"0.05\"),\n      bounce: true,\n      body: messageBody,\n    });\n\n    const walletClient = this.walletProvider.getWalletClient();\n    const contract = walletClient.open(this.walletProvider.wallet);\n\n    const seqno: number = await contract.getSeqno();\n    const transfer = await contract.createTransfer({\n      seqno,\n      secretKey: this.walletProvider.keypair.secretKey,\n      messages: [updateMessage],\n    });\n    \n    await contract.send(transfer);\n    elizaLogger.log(\"Transaction sent, waiting for confirmation...\");\n\n    await waitSeqnoContract(seqno, contract);\n\n    const state = await walletClient.getContractState(\n        this.walletProvider.wallet.address,\n    );\n    const { lt: _, hash: lastHash } = state.lastTransaction;\n    return base64ToHex(lastHash);\n  }\n\n  async update(params: UpdateNFTMetadataContent): Promise<string> {\n    const { metadataIpfsHash } = await this.uploadContent(params);\n    \n    // Set the new metadata URLs if not already provided\n    if (!params.newCollectionMeta) {\n      params.newCollectionMeta = `ipfs://${metadataIpfsHash}/collection.json`;\n    }\n    \n    if (!params.newNftCommonMeta) {\n      params.newNftCommonMeta = `ipfs://${metadataIpfsHash}/`;\n    }\n\n    return await this.updateNFTMetadataOnChain(params);\n  }\n}\n\nexport default {\n  name: \"UPDATE_NFT_METADATA\",\n  similes: [\"NFT_UPDATE\", \"UPDATE_METADATA\"],\n  description:\n    \"Updates NFT metadata post-mint. Supports partial or full metadata edits with on-chain or off-chain constraints. For off-chain storage, metadata is uploaded using Helia. For on-chain updates, a custom update message (using opcode 4) is sent, updating content and royalty information.\",\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: Record<string, unknown>,\n    callback?: HandlerCallback\n  ) => {\n    elizaLogger.log(\"Starting UPDATE_NFT_METADATA handler...\");\n\n    const updateDetails = await buildUpdateDetails(runtime, message, state);\n\n    // Validate transfer content\n    if (!isUpdateNFTMetadataContent(updateDetails)) {\n      if (callback) {\n        callback({\n          text: \"Unable to process update request. Invalid content provided.\",\n          content: { error: \"Invalid update content\" },\n        });\n      }\n      return false;\n    }\n\n    try {\n      // Set default paths if using file storage\n      if (updateDetails.storage === \"file\") {\n        updateDetails.imagesFolderPath = runtime.getSetting(\"TON_NFT_IMAGES_FOLDER\") || \n          path.join(process.cwd(), \"ton_nft_images\");\n        updateDetails.metadataFolderPath = runtime.getSetting(\"TON_NFT_METADATA_FOLDER\") || \n          path.join(process.cwd(), \"ton_nft_metadata\");\n      }\n\n      // Process the metadata update.\n      const walletProvider = await initWalletProvider(runtime);\n      const updateAction = new UpdateNFTMetadataAction(walletProvider);\n      const hash = await updateAction.update(updateDetails);\n\n      // Prepare the result.\n      const result = {\n        status: \"success\",\n        nftAddress: updateDetails.nftAddress,\n        updatedMetadata: updateDetails.metadata,\n        message: \"NFT metadata updated successfully\",\n        hash: hash,\n      };\n\n      if (callback) {\n        callback({\n          text: `NFT metadata updated successfully`,\n          content: result,\n        });\n      }\n      return true;\n    } catch (error: any) {\n      elizaLogger.error(\"Error updating NFT metadata:\", error);\n      if (callback) {\n        callback({\n          text: `Error updating NFT metadata: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n      return false;\n    }\n  },\n  validate: async (_runtime: IAgentRuntime) => true,\n  template: updateNFTMetadataTemplate,\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          nftAddress: \"NFT_123456789\",\n          metadata: {\n            name: \"Updated NFT Artwork\",\n            description: \"New description for NFT\",\n            image: \"https://example.com/new-image.png\",\n            storage: \"off-chain\" // or \"on-chain\"\n          },\n          // Fields for on-chain update (if storage is \"on-chain\")\n          newCollectionMeta: \"https://example.com/new-collection-meta.json\",\n          newNftCommonMeta: \"https://example.com/new-nft-common-meta.json\",\n          royaltyAddress: \"EQRoyaltyAddressExample\",\n          action: \"UPDATE_NFT_METADATA\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"NFT metadata updated successfully\",\n        },\n      },\n    ],\n  ],\n}; ","import {\n  elizaLogger,\n  type Content,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  Action,\n} from \"@elizaos/core\";\nimport { TonTokenPriceProvider } from \"../providers/tokenProvider.ts\";\n\nexport interface PriceContent extends Content {\n  token: string;\n}\n\ninterface ActionOptions {\n  [key: string]: unknown;\n}\n\nexport class TONPriceAction {\n  private priceProvider: TonTokenPriceProvider;\n\n  constructor(priceProvider: TonTokenPriceProvider) {\n    this.priceProvider = priceProvider;\n  }\n}\n\nconst priceTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"token\": \"TON\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token price:\n- Token symbol or address\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n  name: \"GET_TOKEN_PRICE_TON\",\n  similes: [\n    \"FETCH_TOKEN_PRICE_TON\",\n    \"CHECK_TOKEN_PRICE_TON\",\n    \"TOKEN_PRICE_TON\",\n  ],\n  description: \"Fetches and returns token price information on TON blockchain\",\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: ActionOptions,\n    callback?: HandlerCallback\n  ) => {\n    console.log(\"token price action handler started\");\n    elizaLogger.log(\"Starting GET_TOKEN_PRICE_TON handler...\");\n\n    try {\n      const provider = runtime.providers.find(\n        (p) => p instanceof TonTokenPriceProvider\n      );\n      if (!provider) {\n        throw new Error(\"Token price provider not found\");\n      }\n      const priceData = await provider.get(runtime, message, state);\n      console.log(priceData);\n      //   console.log(\"callback\", callback);\n      if (callback) {\n        callback({\n          text: priceData,\n          content: {\n            success: true,\n            priceData: priceData,\n          },\n        });\n      }\n\n      return true;\n    } catch (error) {\n      console.error(\"Error during price fetch:\", error);\n      if (callback) {\n        callback({\n          text: `Error fetching token price: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n      return false;\n    }\n  },\n  template: priceTemplate,\n  validate: async (\n    _runtime: IAgentRuntime,\n    message: Memory\n  ): Promise<boolean> => {\n    const content =\n      typeof message.content === \"string\"\n        ? message.content\n        : message.content?.text;\n\n    console.log(\"content\", content);\n    if (!content) return false;\n    //  console.log(\"inside the token price action\");\n    const priceKeywords =\n      /\\b(price|market|status|situation|data|stats|insights|update|check)\\b/i;\n    const questionWords = /\\b(what'?s|how'?s|give|show|tell|check)\\b/i;\n    const tokenSymbols = /\\b(TON|NOT|NOTCOIN|DDST|DEDUST|DOGS|STON)\\b/i;\n\n    const hasContext = priceKeywords.test(content);\n    const hasQuestion = questionWords.test(content);\n    const hasToken = tokenSymbols.test(content);\n    console.log(\n      \"hasContext,\",\n      hasContext,\n      \"hasQuestion \",\n      hasQuestion,\n      hasToken\n    );\n    // Match if either a direct question about price/market or a general status request\n    return hasToken && (hasContext || hasQuestion);\n  },\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Hey, could you check TON market data?\",\n          action: \"GET_TOKEN_PRICE_TON\",\n        },\n      },\n      {\n        user: \"{{system}}\",\n        content: {\n          text: \"📊 Analyzing TON market data...\",\n          action: \"GET_TOKEN_PRICE_TON\",\n        },\n      },\n      {\n        user: \"{{system}}\",\n        content: {\n          text: \"📈 TON Market Update:\\n• Current Price: $5.67 (+5.43% 24h)\\n• Volume: $1.87B\\n• Liquidity: $233M\\n• Market Cap: $7.8B\",\n          metadata: {\n            price: 5.67,\n            change_24h: 5.43,\n            volume_24h: 1870000000,\n            liquidity: 233000000,\n            market_cap: 7800000000,\n          },\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"give me a quick update on the notcoin situation\",\n          action: \"GET_TOKEN_PRICE_TON\",\n        },\n      },\n      {\n        user: \"{{system}}\",\n        content: {\n          text: \"🔍 Fetching Notcoin stats...\",\n          action: \"GET_TOKEN_PRICE_TON\",\n        },\n      },\n      {\n        user: \"{{system}}\",\n        content: {\n          text: \"NOT Token Status:\\nPrice: $0.0003 | 24h: +2.19%\\nLiquidity Pool: $15M\\nDaily Volume: $1M\\nMarket Rank: #892\",\n          metadata: {\n            price: 0.0003,\n            change_24h: 2.19,\n            liquidity: 15000000,\n            volume_24h: 1000000,\n            rank: 892,\n          },\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"what's happening with dedust price?\",\n          action: \"GET_TOKEN_PRICE_TON\",\n        },\n      },\n      {\n        user: \"{{system}}\",\n        content: {\n          text: \"⚡ Getting DeDust market insights...\",\n          action: \"GET_TOKEN_PRICE_TON\",\n        },\n      },\n      {\n        user: \"{{system}}\",\n        content: {\n          text: \"DeDust (DDST)\\nTrading at: $1.23\\nTrend: -2.5% (24h)\\nVolume: $892K\\nPool: $4.2M\\nHolder Count: 15.2K\",\n          metadata: {\n            price: 1.23,\n            change_24h: -2.5,\n            volume_24h: 892000,\n            liquidity: 4200000,\n            holders: 15200,\n          },\n        },\n      },\n    ],\n  ],\n} as Action;\n","import type {\n  Provider,\n  IAgentRuntime,\n  Memory,\n  State,\n  Content,\n} from \"@elizaos/core\";\n\nimport { gunzip } from \"zlib\";\nimport { promisify } from \"util\";\n\nimport { DexScreenerResponse, TonApiRateResponse } from \"../types.ts\";\n\nconst gunzipAsync = promisify(gunzip);\n\nexport interface PriceContent extends Content {\n  token: string;\n}\n\nexport class TonTokenPriceProvider implements Provider {\n  private tokenCache: Map<string, string> = new Map(); // Symbol/Name -> Address\n  private poolCache: Map<string, string> = new Map(); // Pair Symbol -> Pool Address\n  private cacheTimestamp = 0;\n  private readonly CACHE_TTL = 300_000; // 5 minutes\n  private readonly TONAPI_ENDPOINT = \"https://tonapi.io/v2\";\n  private readonly DEDUST_API_ENDPOINT = \"https://api.dedust.io/v1/pools\";\n  private readonly DEXSCREENER_API_ENDPOINT =\n    \"https://api.dexscreener.com/latest/dex/pairs/ton\";\n\n  constructor() {\n    this.initializeTokenCache();\n    this.initializePoolCache();\n  }\n\n  private async initializeTokenCache(): Promise<void> {\n    try {\n      const response = await fetch(\"https://api.dedust.io/v2/assets\");\n      const tokens = await response.json();\n\n      // Build symbol/name -> address mapping\n      tokens.forEach((token: any) => {\n        this.tokenCache.set(token.symbol.toLowerCase(), token.address || \"TON\");\n        this.tokenCache.set(token.name.toLowerCase(), token.address || \"TON\");\n      });\n\n      this.cacheTimestamp = Date.now();\n    } catch (error) {\n      console.error(\"Failed to initialize token cache:\", error);\n    }\n  }\n\n  private async initializePoolCache(): Promise<void> {\n    try {\n      const response = await fetch(this.DEDUST_API_ENDPOINT);\n      const pools = await response.json();\n\n      // Build pair symbol -> pool address mapping\n      pools.forEach((pool: any) => {\n        const pairSymbol = `${pool.left_token_symbol}/${pool.right_token_symbol}`;\n        this.poolCache.set(pairSymbol.toLowerCase(), pool.address);\n      });\n\n      this.cacheTimestamp = Date.now();\n    } catch (error) {\n      console.error(\"Failed to initialize pool cache:\", error);\n    }\n  }\n\n  private async refreshCacheIfNeeded(): Promise<void> {\n    if (Date.now() - this.cacheTimestamp > this.CACHE_TTL) {\n      await this.initializeTokenCache();\n      await this.initializePoolCache();\n    }\n  }\n\n  public async getTokenAddress(symbolOrName: string): Promise<string> {\n    await this.refreshCacheIfNeeded();\n\n    const key = symbolOrName.toLowerCase();\n    const address = this.tokenCache.get(key);\n    console.log(\"key\", key);\n    if (!address) {\n      throw new Error(`Token ${symbolOrName} not found`);\n    }\n\n    return address;\n  }\n\n  public async getPoolAddress(pairSymbol: string): Promise<string> {\n    await this.refreshCacheIfNeeded();\n\n    const key = pairSymbol.toLowerCase();\n    const address = this.poolCache.get(key);\n\n    if (!address) {\n      throw new Error(`Pool for pair ${pairSymbol} not found`);\n    }\n\n    return address;\n  }\n\n  async get(\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state?: State\n  ): Promise<string> {\n    try {\n      const content =\n        typeof message.content === \"string\"\n          ? message.content\n          : message.content?.text;\n\n      if (!content) {\n        throw new Error(\"No message content provided\");\n      }\n\n      // Extract token identifier\n      const tokenIdentifier = this.extractToken(content);\n      const pairIdentifier = this.extractPair(content);\n\n      console.log(\"Extracted token identifier:\", tokenIdentifier);\n      console.log(\"pair Identifier\", pairIdentifier);\n      // Early return if no token is found\n      if (pairIdentifier) {\n        // Fetch pair price\n        const poolAddress = await this.getPoolAddress(pairIdentifier);\n        const pairData = await this.fetchPairPrice(poolAddress);\n\n        return this.formatPairPriceData(pairIdentifier, pairData);\n      } else if (tokenIdentifier) {\n        // Fetch token price\n        const isAddress = /^EQ[a-zA-Z0-9_-]{48}$/.test(tokenIdentifier);\n\n        let tokenAddress: string;\n        let tokenName: string;\n\n        if (isAddress) {\n          // Direct address provided\n          tokenAddress = tokenIdentifier;\n          tokenName = await this.getTokenNameByAddress(tokenAddress);\n        } else {\n          // Name/symbol provided - resolve to address\n          tokenName = tokenIdentifier;\n          tokenAddress = await this.getTokenAddress(tokenName);\n        }\n\n        const tokenData = await this.fetchTokenPrice(tokenAddress);\n        return this.formatTokenPriceData(tokenName, tokenAddress, tokenData);\n      } else {\n        return \"No token or pair identifier found in the message.\";\n      }\n    } catch (error) {\n      console.error(\"TonTokenPriceProvider error:\", error);\n      return `Error: ${error.message}`;\n    }\n  }\n\n  private extractPair(content: string): string | null {\n    const patterns = [\n      /(?:price|value|worth|valuation|rate)\\s+(?:of|for|on)\\s+[\"']?(.+?)\\/(.+?)(?:[\"']|\\b)/i,\n      /(?:what'?s?|what is|check|show|tell me)\\s+(?:the )?(?:price|value|worth)\\s+(?:of|for|on)\\s+[\"']?(.+?)\\/(.+?)(?:[\"']|\\b)/i,\n      /(?:how (?:much|is|does)\\s+[\"']?(.+?)\\/(.+?)(?:[\"']|\\b)\\s+(?:cost|worth|value|priced))/i,\n    ];\n\n    const normalizedContent = content\n      .replace(/[.,!?;](?=\\s|$)/g, \"\") // Remove trailing punctuation\n      .replace(/\\s{2,}/g, \" \"); // Normalize whitespace\n\n    for (const pattern of patterns) {\n      const match = normalizedContent.match(pattern);\n      if (match) {\n        const token1 = match[1]?.trim();\n        const token2 = match[2]?.trim();\n        if (token1 && token2) {\n          return `${this.normalizeToken(token1)}/${this.normalizeToken(\n            token2\n          )}`;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  private extractToken(content: string): string | null {\n    const patterns = [\n      // 1. Direct address matches (TON format)\n      /\\b(EQ[a-zA-Z0-9_-]{48})\\b/i,\n\n      // 2. Explicit symbol matches\n      /(?:\\$|#|token:?|symbol:?)\\s*([a-z0-9]+(?:\\s+[a-z0-9]+)*)/i,\n\n      // 3. Price request patterns\n      /(?:price|value|worth|valuation|rate)\\s+(?:of|for|on)\\s+[\"']?(.+?)(?:[\"']|\\b)(?:\\s+token)?(?: right now| today| currently)?/i,\n      /(?:what'?s?|what is|check|show|tell me)\\s+(?:the )?(?:price|value|worth)\\s+(?:of|for|on)\\s+[\"']?(.+?)(?:[\"']|\\b)/i,\n      /(?:how (?:much|is|does)\\s+[\"']?(.+?)(?:[\"']|\\b)\\s+(?:cost|worth|value|priced))/i,\n\n      // 4. Natural language patterns\n      /(?:about|regarding|for|on)\\s+[\"']?(the\\s+)?(.+?)(?:[\"']|\\b)(?:\\s+token)?(?:\\s+price| value| worth)/i,\n      /\\b(?:looking|want)\\s+to\\s+know\\s+(?:the )?(?:price|value)\\s+(?:of|for)\\s+[\"']?(.+?)(?:[\"']|\\b)/i,\n    ];\n\n    const normalizedContent = content\n      .replace(/[.,!?;](?=\\s|$)/g, \"\") // Remove trailing punctuation\n      .replace(/\\s{2,}/g, \" \"); // Normalize whitespace\n\n    for (const pattern of patterns) {\n      const match = normalizedContent.match(pattern);\n      if (match) {\n        // Find the first non-empty capture group\n        const token = match.slice(1).find((g) => g?.trim());\n        if (token) {\n          console.log(\"token\", token);\n          const normalizedToken = token\n            .replace(/^(the|a|an)\\s+/i, \"\") // Remove articles\n            .replace(/\\s+(token|coin|currency)$/i, \"\")\n            .trim();\n          console.log(\"normalizedToken\", normalizedToken);\n          // Check if the token is in pair format (e.g., TON/NOT)\n          if (normalizedToken.includes(\"/\")) {\n            return null; // Return null for pairs\n          }\n\n          return this.normalizeToken(normalizedToken);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  private normalizeToken(token: string): string {\n    // Handle special cases and common misspellings\n    const replacements: Record<string, string> = {\n      notcoin: \"NOT\",\n      \"not coin\": \"NOT\",\n      dedust: \"DDST\",\n      \"de dust\": \"DDST\",\n      jetton: \"JETTON\",\n      toncoin: \"TON\",\n      \"the ton\": \"TON\",\n      dogscoin: \"DOGS\",\n    };\n\n    return replacements[token.toLowerCase()] || token.toUpperCase();\n  }\n\n  private async getTokenNameByAddress(address: string): Promise<string> {\n    const apiUrl = `https://tonapi.io/v2/jettons/${address}`;\n\n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`API request failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data.metadata?.name || address; // Fallback to address if name not found;\n    } catch (error) {\n      console.error(\"Token metadata fetch error:\", error);\n      return address; // Return address as fallback name\n    }\n  }\n\n  public async fetchTokenPrice(\n    tokenAddress: string\n  ): Promise<TonApiRateResponse> {\n    try {\n      // Method 1: Using node-fetch with automatic decompression\n\n      // Then fetch price using the address\n      const endpoint = `${this.TONAPI_ENDPOINT}/rates?tokens=${tokenAddress}&currencies=usd`;\n\n      const response = await fetch(endpoint, {\n        headers: {\n          Accept: \"application/json\",\n          \"Accept-Encoding\": \"gzip\",\n        },\n      });\n\n      // Get the raw buffer from the response\n      const buffer = await response.arrayBuffer();\n\n      // Convert ArrayBuffer to Buffer\n      const nodeBuffer = Buffer.from(buffer);\n\n      try {\n        // Try parsing directly first\n        const directText = new TextDecoder().decode(nodeBuffer);\n        // console.log(directText);\n        return JSON.parse(directText);\n      } catch (e) {\n        console.log(\"Direct parsing failed, trying decompression...\");\n\n        // If direct parsing fails, try decompressing\n        try {\n          const decompressed = await gunzipAsync(nodeBuffer);\n          const text = decompressed.toString(\"utf-8\");\n          return JSON.parse(text);\n        } catch (decompressError) {\n          console.error(\"Decompression failed:\", decompressError);\n          throw new Error(\"Failed to decompress response\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n  }\n\n  public async fetchPairPrice(\n    poolAddress: string\n  ): Promise<DexScreenerResponse> {\n    try {\n      const response = await fetch(\n        `${this.DEXSCREENER_API_ENDPOINT}/${poolAddress}`\n      );\n      if (!response.ok) {\n        throw new Error(`API request failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"Fetch pair price error:\", error);\n      throw error;\n    }\n  }\n\n  public formatPairPriceData(\n    pairSymbol: string,\n    data: DexScreenerResponse\n  ): string {\n    const pairData = data.pairs[0];\n    if (!pairData) {\n      throw new Error(`No price data found for pair ${pairSymbol}`);\n    }\n\n    const priceNative = pairData.priceNative;\n    const priceUsd = pairData.priceUsd;\n    const priceChange = pairData.priceChange;\n\n    return `Pair: ${pairSymbol}\n            Price (Native): ${priceNative}\n            Price (USD): ${priceUsd}\n            1h Change: ${priceChange.h1}%\n            6h Change: ${priceChange.h6}%\n            24h Change: ${priceChange.h24}%`;\n  }\n\n  public formatTokenPriceData(\n    tokenName: string,\n    tokenAddress: string,\n    data: TonApiRateResponse\n  ): string {\n    const tokenData = data.rates[tokenAddress];\n    //  console.log(\"tokenData  in function \", data.rates.tokenAddress);\n    if (!tokenData) {\n      throw new Error(`No price data found for token ${tokenName}`);\n    }\n\n    const price = tokenData.prices.USD.toFixed(6);\n    const diff24h = tokenData.diff_24h.USD;\n    const diff7d = tokenData.diff_7d.USD;\n    const diff30d = tokenData.diff_30d.USD;\n\n    return ` Current price: $${price} USD\n             24h change: ${diff24h}\n             7d change: ${diff7d}\n             30d change: ${diff30d}`;\n  }\n}\n\nexport const tonTokenPriceProvider = new TonTokenPriceProvider();\n","import type {\n    IAgentRuntime,\n    ICacheManager,\n    Memory,\n    Provider,\n    State,\n} from \"@elizaos/core\";\n\nimport {\n    TonConnect,\n    WalletInfoRemote,\n    isWalletInfoRemote,\n    UserRejectsError,\n    WalletInfo,\n    SendTransactionRequest,\n} from \"@tonconnect/sdk\";\nimport NodeCache from \"node-cache\";\nimport { CONFIG_KEYS } from \"../enviroment\";\n\nconst PROVIDER_CONFIG = {\n    BRIDGE_URL: \"https://bridge.tonapi.io/bridge\",\n    MAX_RETRIES: 3,\n    RETRY_DELAY: 2000,\n    CACHE_TTL: {\n        DEFAULT_FILE_CACHE: 86400, // 24 hours\n        DEFAULT_MEMORY_CACHE: 3600, // 1 hour\n        CONNECTION: 86400, // 24 hours\n    },\n};\n\nconst CACHE_KEYS = {\n    CACHE_KEY: \"ton/connect\",\n    CURRENT_WALLET: \"currentWallet\",\n    CONNECTOR: \"connector\",\n};\n\nexport interface ConnectorStatus {\n    status: \"Connected\" | \"Disconnected\" | \"Connecting\" | \"Disconnecting\";\n    walletInfo: WalletInfo | null;\n}\n\ninterface IStorage {\n    setItem(key: string, value: string): Promise<void>;\n    getItem(key: string): Promise<string | null>;\n    removeItem(key: string): Promise<void>;\n}\n\nclass CacheManager {\n    constructor(\n        private memoryCache: NodeCache,\n        private fileCache: ICacheManager,\n        private baseCacheKey: string,\n        private defaultTTL: number\n    ) {}\n\n    async get<T>(key: string): Promise<T | null> {\n        const cacheKey = `${this.baseCacheKey}/${key}`;\n\n        // Check memory cache first\n        const memoryCached = this.memoryCache.get<T>(cacheKey);\n        if (memoryCached) return memoryCached;\n\n        // Check file cache\n        const fileCached = await this.fileCache.get<T>(cacheKey);\n        if (fileCached) {\n            this.memoryCache.set(cacheKey, fileCached);\n            return fileCached;\n        }\n\n        return null;\n    }\n\n    async set<T>(key: string, data: T, ttl?: number): Promise<void> {\n        const cacheKey = `${this.baseCacheKey}/${key}`;\n        const expiresIn = ttl || this.defaultTTL;\n\n        // Set in memory cache\n        this.memoryCache.set(cacheKey, data, expiresIn);\n\n        // Set in file cache\n        await this.fileCache.set(cacheKey, data, {\n            expires: Date.now() + expiresIn * 1000,\n        });\n    }\n\n    async delete(key: string): Promise<void> {\n        const cacheKey = `${this.baseCacheKey}/${key}`;\n        this.memoryCache.del(cacheKey);\n        await this.fileCache.delete(cacheKey);\n    }\n\n    async clear(): Promise<void> {\n        this.memoryCache.flushAll();\n        await this.fileCache.delete(`${this.baseCacheKey}/*`);\n    }\n}\n\nclass TonConnectStorage implements IStorage {\n    constructor(private cacheManager: ICacheManager) {}\n\n    async setItem(key: string, value: string): Promise<void> {\n        await this.cacheManager.set(key, value, {\n            expires: Date.now() + PROVIDER_CONFIG.CACHE_TTL.CONNECTION * 1000,\n        });\n    }\n\n    async getItem(key: string): Promise<string | null> {\n        return await this.cacheManager.get<string>(key);\n    }\n\n    async removeItem(key: string): Promise<void> {\n        await this.cacheManager.delete(key);\n    }\n}\n\nexport class TonConnectProvider {\n    private static instance: TonConnectProvider | null = null;\n    private connector: TonConnect;\n    private cacheManager: CacheManager;\n    private unsubscribe: (() => void) | null = null;\n    private bridgeUrl: string;\n    private manifestUrl: string;\n    private initialized: boolean = false;\n    private connected: boolean = false;\n    private constructor() {\n        this.cacheManager = {} as CacheManager; // Temporary initialization\n        this.connector = {} as TonConnect; // Temporary init\n    }\n\n    public static getInstance(): TonConnectProvider {\n        if (!TonConnectProvider.instance) {\n            TonConnectProvider.instance = new TonConnectProvider();\n        }\n        return TonConnectProvider.instance;\n    }\n\n    public async initialize(\n        manifestUrl: string,\n        bridgeUrl: string,\n        fileCache: ICacheManager\n    ): Promise<void> {\n        if (this.initialized) return;\n\n        this.validateManifestUrl(manifestUrl);\n        this.validateBridgeUrl(bridgeUrl);\n\n        const memoryCache = new NodeCache({\n            stdTTL: PROVIDER_CONFIG.CACHE_TTL.DEFAULT_MEMORY_CACHE,\n            checkperiod: 60,\n        });\n\n        this.cacheManager = new CacheManager(\n            memoryCache,\n            fileCache,\n            CACHE_KEYS.CACHE_KEY,\n            PROVIDER_CONFIG.CACHE_TTL.DEFAULT_FILE_CACHE\n        );\n\n        await this.initializeConnection(manifestUrl, fileCache);\n        this.initialized = true;\n        this.bridgeUrl = bridgeUrl;\n    }\n\n    private validateManifestUrl(url: string): void {\n        if (!url || !url.startsWith(\"http\")) {\n            throw new Error(\"Invalid manifest URL provided\");\n        }\n    }\n\n    private validateBridgeUrl(url: string): void {\n        if (!url || !url.startsWith(\"http\")) {\n            throw new Error(\"Invalid bridge URL provided\");\n        }\n    }\n\n    private async initializeConnection(\n        manifestUrl: string,\n        fileCache: ICacheManager\n    ): Promise<void> {\n        try {\n            const storage = new TonConnectStorage(fileCache);\n\n            this.connector = new TonConnect({ manifestUrl, storage });\n            this.setupEventListeners();\n        } catch (error) {\n            console.error(\"Failed to initialize connection:\", error);\n        }\n    }\n\n    private setupEventListeners(): void {\n        this.unsubscribe = null;\n        this.unsubscribe = this.connector.onStatusChange((wallet) => {\n            if (wallet) {\n                this.connected = true;\n                this.setCachedData(CACHE_KEYS.CURRENT_WALLET, wallet);\n            } else {\n                this.connected = false;\n                this.deleteCachedData(CACHE_KEYS.CURRENT_WALLET);\n            }\n        });\n    }\n\n    private async fetchWithRetry<T>(\n        operation: () => Promise<T>,\n        retries = PROVIDER_CONFIG.MAX_RETRIES\n    ): Promise<T> {\n        for (let i = 0; i < retries; i++) {\n            try {\n                return await operation();\n            } catch (error) {\n                if (i === retries - 1) throw error;\n                const delay = PROVIDER_CONFIG.RETRY_DELAY * Math.pow(2, i);\n                await new Promise((resolve) => setTimeout(resolve, delay));\n            }\n        }\n        throw new Error(\"Operation failed after max retries\");\n    }\n\n    async getWalletInfoList(): Promise<WalletInfo[]> {\n        const walletsList = await this.fetchWithRetry(() =>\n            this.connector.getWallets()\n        );\n        return walletsList;\n    }\n\n    async connect(walletName?: string): Promise<string | null> {\n        try {\n            const walletsList = await this.fetchWithRetry(() =>\n                this.connector.getWallets()\n            );\n            const remoteWallets = walletsList.filter(\n                isWalletInfoRemote\n            ) as WalletInfoRemote[];\n\n            if (remoteWallets.length === 0) {\n                throw new Error(\"No remote wallets available\");\n            }\n\n            const walletUniversalLink = walletName\n                ? remoteWallets.find((wallet) => wallet.name === walletName)\n                      ?.universalLink\n                : null;\n\n            const walletConnectionSource = {\n                universalLink: walletUniversalLink,\n                bridgeUrl: this.bridgeUrl,\n            };\n\n            const universalLink = this.connector.connect(\n                walletConnectionSource\n            );\n\n            return universalLink;\n        } catch (error) {\n            this.handleError(\"Connection error\", error);\n            return null;\n        }\n    }\n\n    private async getCachedData<T>(key: string): Promise<T | null> {\n        return await this.cacheManager.get<T>(key);\n    }\n\n    private async setCachedData<T>(\n        key: string,\n        data: T,\n        ttl?: number\n    ): Promise<void> {\n        await this.cacheManager.set(key, data, ttl);\n    }\n\n    private async deleteCachedData(key: string): Promise<void> {\n        await this.cacheManager.delete(key);\n    }\n\n    private async clearCache(): Promise<void> {\n        await this.cacheManager.clear();\n    }\n\n    private handleError(context: string, error: any): void {\n        if (error instanceof UserRejectsError) {\n            console.warn(`${context}: User rejected the operation`);\n        } else {\n            console.error(`${context}:`, error);\n        }\n    }\n\n    async disconnect(): Promise<void> {\n        try {\n            if (this.connector.connected) {\n                await this.connector.disconnect();\n            }\n            if (this.unsubscribe) {\n                this.unsubscribe();\n                this.unsubscribe = null;\n            }\n            await this.clearCache();\n        } catch (error) {\n            this.handleError(\"Disconnection error\", error);\n        }\n    }\n\n    async formatConnectionStatus(\n        runtime: IAgentRuntime\n    ): Promise<ConnectorStatus> {\n        const wallet = await this.getCachedData<WalletInfo>(\n            CACHE_KEYS.CURRENT_WALLET\n        );\n\n        if (!this.isConnected() || !wallet) {\n            return {\n                status: \"Disconnected\",\n                walletInfo: null,\n            };\n        }\n\n        return {\n            status: \"Connected\",\n            walletInfo: wallet,\n        };\n    }\n\n    async sendTransaction(transaction: SendTransactionRequest): Promise<any> {\n        if (!this.connector.connected) {\n            throw new Error(\"Wallet not connected\");\n        }\n\n        return await this.fetchWithRetry(async () => {\n            try {\n                return await this.connector.sendTransaction(transaction);\n            } catch (error) {\n                if (error instanceof UserRejectsError) {\n                    throw new Error(\"Transaction rejected by user\");\n                }\n                throw error;\n            }\n        });\n    }\n\n    isConnected = (): boolean => this.connected;\n    getWalletInfo = () => this.connector.wallet;\n}\n\nexport const initTonConnectProvider = async (runtime: IAgentRuntime) => {\n    const manifestUrl =\n        runtime.getSetting(CONFIG_KEYS.TON_MANIFEST_URL) ?? null;\n    if (!manifestUrl) {\n        throw new Error(\"TON_MANIFEST_URL is not set\");\n    }\n\n    const bridgeUrl =\n        runtime.getSetting(CONFIG_KEYS.TON_BRIDGE_URL) ??\n        PROVIDER_CONFIG.BRIDGE_URL;\n\n    const provider = TonConnectProvider.getInstance();\n    await provider.initialize(manifestUrl, bridgeUrl, runtime.cacheManager);\n    return provider;\n};\n\nexport const tonConnectProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        message: Memory,\n        state?: State\n    ): Promise<ConnectorStatus | string> {\n\n        // exit if TONCONNECT is not used\n        if (!runtime.getSetting(CONFIG_KEYS.TON_MANIFEST_URL)) {\n            return \"TONCONNECT is not enabled.\";\n        }\n\n        try {\n            const provider = await initTonConnectProvider(runtime);\n            return provider.formatConnectionStatus(runtime);\n        } catch (error) {\n            console.error(\"TON Connect provider error:\", error);\n            return \"Unable to connect to TON wallet. Please try again later.\";\n        }\n    },\n};\n","import {\n    Action,\n    elizaLogger,\n    GoalStatus,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n  } from \"@elizaos/core\";\n\n  import {\n    initTonConnectProvider,\n    tonConnectProvider as connectStatusProvider,\n  } from \"../providers/tonConnect\";\n  import QRCode from \"qrcode\";\n  import { toUserFriendlyAddress } from \"@tonconnect/sdk\";\n  interface ActionOptions {\n    [key: string]: unknown;\n  }\n\n  async function getOrCreateTonConnectGoal(\n    runtime: IAgentRuntime,\n    message: Memory\n  ) {\n    const existingGoals = await runtime.databaseAdapter.getGoals({\n      agentId: runtime.agentId,\n      roomId: message.roomId,\n      userId: message.userId,\n      onlyInProgress: true,\n    });\n\n    const existingGoal = existingGoals.find(\n      (g) => g.name === \"TON_CONNECT_WALLET\"\n    );\n    if (existingGoal) {\n      return existingGoal;\n    }\n\n    const newGoal = await runtime.databaseAdapter.createGoal({\n      roomId: message.roomId,\n      userId: message.userId,\n      name: \"TON_CONNECT_WALLET\",\n      status: GoalStatus.IN_PROGRESS,\n      objectives: [\n        {\n          id: \"init_connection\",\n          description: \"Initialize TON wallet connection\",\n          completed: false,\n        },\n        {\n          id: \"wait_user_approval\",\n          description: \"Wait for user to approve connection\",\n          completed: false,\n        },\n        {\n          id: \"verify_connection\",\n          description: \"Verify wallet connection and get details\",\n          completed: false,\n        },\n      ],\n    });\n\n    return newGoal;\n  }\n\n  export const connectAction: Action = {\n    name: \"TON_CONNECT\",\n    similes: [\n      \"TON_CONNECT\",\n      \"USE_TON_CONNECT\",\n      \"CONNECT_TON_WALLET\",\n      \"TON_CONNECT_WALLET\",\n    ],\n    description: \"connect to ton wallet with tonconnect\",\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n\n      // exit if TONCONNECT is not used\n      if (!runtime.getSetting('TON_MANIFEST_URL')) {\n          return false\n      }\n\n      // Validation logic\n      const existingGoals = await runtime.databaseAdapter.getGoals({\n        agentId: runtime.agentId,\n        roomId: message.roomId,\n        userId: message.userId,\n        onlyInProgress: true,\n      });\n\n      const tonConnectGoal = existingGoals.find(\n        (g) => g.name === \"TON_CONNECT_WALLET\"\n      );\n\n      if (tonConnectGoal) {\n        return [\"FAILED\", \"COMPLETED\"].includes(tonConnectGoal.status);\n      }\n      const tonConnectProvider = await initTonConnectProvider(runtime);\n      return !!tonConnectProvider;\n    },\n    handler: async (\n      runtime: IAgentRuntime,\n      message: Memory,\n      state: State,\n      _options: ActionOptions,\n      callback?: HandlerCallback\n    ) => {\n\n      // exit if TONCONNECT is not used\n      if (!runtime.getSetting('TON_MANIFEST_URL')) {\n          return false\n      }\n\n      // Implementation\n      // Initialize or update state\n      if (!state) {\n        state = (await runtime.composeState(message)) as State;\n      } else {\n        state = await runtime.updateRecentMessageState(state);\n      }\n      elizaLogger.log(\"Starting TON_CONNECT handler...\");\n\n      const connectorStatus = await connectStatusProvider.get(\n        runtime,\n        message,\n        state\n      );\n\n      if (!connectorStatus) {\n        callback?.({\n          text: \"Error connecting to TON wallet. Please try again later.\",\n        });\n        return true;\n      }\n\n      state.connectorStatus = connectorStatus;\n\n      const { status, walletInfo } = connectorStatus;\n\n      const tonConnectProvider = await initTonConnectProvider(runtime);\n\n      if (status === \"Connected\" && walletInfo) {\n        callback?.({\n          text:\n            `Current wallet status: Connected\\n` +\n            `Address: ${toUserFriendlyAddress(walletInfo.account.address)}\\n` +\n            `Raw Address: ${walletInfo.account.address}\\n` +\n            `Chain: ${walletInfo.account.chain}\\n` +\n            `Platform: ${walletInfo.device.platform}\\n` +\n            `App: ${walletInfo.device.appName || \"Unknown\"}`,\n        });\n        return true;\n      }\n\n      if (status === \"Disconnected\" && tonConnectProvider) {\n        const unified = await tonConnectProvider.connect();\n        const qrCodeData = await QRCode.toDataURL(unified);\n        callback?.({\n          text: `Please connect your TON wallet using this link:\\n${unified}`,\n          attachments: [\n            {\n              id: crypto.randomUUID(),\n              url: qrCodeData,\n              title: \"TON Wallet Connect QR Code\",\n              source: \"tonConnect\",\n              description: \"Scan this QR code with your TON wallet\",\n              contentType: \"image/png\",\n              text: \"Scan this QR code with your TON wallet\",\n            },\n          ],\n        });\n\n        return true;\n      }\n\n      if (status === \"Connecting\") {\n        callback?.({\n          text: \"Connecting to TON wallet...\",\n        });\n        return true;\n      }\n\n      return true;\n    },\n    examples: [\n      // Example 1: Initial connection request\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Connect my TON wallet\",\n            action: \"TON_CONNECT\",\n          },\n        },\n        {\n          user: \"{{user2}}\",\n          content: {\n            text: \"Please connect your TON wallet using this link:\\nhttps://app.tonkeeper.com/connect/example-universal-link\",\n          },\n        },\n      ],\n      // Example 2: Successful connection\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Check my TON wallet connection\",\n            action: \"TON_CONNECT\",\n          },\n        },\n        {\n          user: \"{{user2}}\",\n          content: {\n            text: \"Connected to TON wallet:\\nAddress: EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\\nChain: mainnet\\nPlatform: web\",\n          },\n        },\n      ],\n      // Example 3: Connection in progress\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Link TON wallet\",\n            action: \"TON_CONNECT\",\n          },\n        },\n        {\n          user: \"{{user2}}\",\n          content: {\n            text: \"Connecting to TON wallet...\",\n          },\n        },\n      ],\n      // Example 4: Error case\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Connect wallet\",\n            action: \"TON_CONNECT\",\n          },\n        },\n        {\n          user: \"{{user2}}\",\n          content: {\n            text: \"Error connecting to TON wallet. Please try again later.\",\n          },\n        },\n      ],\n    ],\n  };\n\n  export const disconnectAction: Action = {\n    name: \"TON_DISCONNECT\",\n    similes: [\n      \"TON_DISCONNECT\",\n      \"DISCONNECT_TON_WALLET\",\n      \"DISCONNECT_WALLET\",\n      \"LOGOUT_TON_WALLET\",\n    ],\n    description: \"disconnect from connected ton wallet\",\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n\n      // exit if TONCONNECT is not used\n      if (!runtime.getSetting('TON_MANIFEST_URL')) {\n          return false\n      }\n\n      const tonConnectProvider = await initTonConnectProvider(runtime);\n      if (!tonConnectProvider) return false;\n\n      return tonConnectProvider.isConnected();\n    },\n    handler: async (\n      runtime: IAgentRuntime,\n      message: Memory,\n      state: State,\n      _options: ActionOptions,\n      callback?: HandlerCallback\n    ) => {\n\n      // exit if TONCONNECT is not used\n      if (!runtime.getSetting('TON_MANIFEST_URL')) {\n          return false\n      }\n\n      if (!state) {\n        state = (await runtime.composeState(message)) as State;\n      } else {\n        state = await runtime.updateRecentMessageState(state);\n      }\n      elizaLogger.log(\"Starting TON_DISCONNECT handler...\");\n\n      const tonConnectProvider = await initTonConnectProvider(runtime);\n      if (!tonConnectProvider) {\n        callback?.({\n          text: \"Error disconnecting from TON wallet. Wallet provider not initialized.\",\n        });\n        return true;\n      }\n\n      try {\n        await tonConnectProvider.disconnect();\n        callback?.({\n          text: \"Successfully disconnected from TON wallet.\",\n        });\n      } catch (error) {\n        callback?.({\n          text: \"Error disconnecting from TON wallet. Please try again later.\",\n        });\n      }\n\n      return true;\n    },\n    examples: [\n      // Example 1: Successful disconnection\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Disconnect my TON wallet\",\n            action: \"TON_DISCONNECT\",\n          },\n        },\n        {\n          user: \"{{user2}}\",\n          content: {\n            text: \"Successfully disconnected from TON wallet.\",\n          },\n        },\n      ],\n      // Example 2: Error case\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Disconnect wallet\",\n            action: \"TON_DISCONNECT\",\n          },\n        },\n        {\n          user: \"{{user2}}\",\n          content: {\n            text: \"Error disconnecting from TON wallet. Please try again later.\",\n          },\n        },\n      ],\n    ],\n  };\n\n  export const showConnectionStatusAction: Action = {\n    name: \"TON_CONNECTION_STATUS\",\n    similes: [\n      \"TON_STATUS\",\n      \"WALLET_STATUS\",\n      \"CHECK_TON_CONNECTION\",\n      \"SHOW_WALLET_STATUS\",\n    ],\n    description: \"show current TON wallet connection status\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n\n      // exit if TONCONNECT is not used\n      if (!runtime.getSetting('TON_MANIFEST_URL')) {\n          return false\n      }\n\n      const tonConnectProvider = await initTonConnectProvider(runtime);\n      return !!tonConnectProvider;\n    },\n    handler: async (\n      runtime: IAgentRuntime,\n      message: Memory,\n      state: State,\n      _options: ActionOptions,\n      callback?: HandlerCallback\n    ) => {\n      if (!state) {\n        state = (await runtime.composeState(message)) as State;\n      } else {\n        state = await runtime.updateRecentMessageState(state);\n      }\n      elizaLogger.log(\"Starting TON_CONNECTION_STATUS handler...\");\n\n      const connectorStatus = await connectStatusProvider.get(\n        runtime,\n        message,\n        state\n      );\n\n      if (!connectorStatus) {\n        callback?.({\n          text: \"Unable to fetch wallet connection status.\",\n        });\n        return true;\n      }\n\n      const { status, walletInfo } = connectorStatus;\n\n      switch (status) {\n        case \"Connected\":\n          if (walletInfo) {\n            callback?.({\n              text:\n                `Current wallet status: Connected\\n` +\n                `Address: ${toUserFriendlyAddress(\n                  walletInfo.account.address\n                )}\\n` +\n                `Raw Address: ${walletInfo.account.address}\\n` +\n                `Chain: ${walletInfo.account.chain}\\n` +\n                `Platform: ${walletInfo.device.platform}\\n` +\n                `App: ${walletInfo.device.appName || \"Unknown\"}`,\n            });\n          }\n          break;\n        case \"Connecting\":\n          callback?.({\n            text: \"Wallet status: Connection in progress...\",\n          });\n          break;\n        case \"Disconnected\":\n          callback?.({\n            text: \"Wallet status: Not connected\\nUse TON_CONNECT to connect your wallet.\",\n          });\n          break;\n        default:\n          callback?.({\n            text: `Wallet status: ${status}`,\n          });\n      }\n\n      return true;\n    },\n    examples: [\n      // Example 1: Connected wallet status\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Show my wallet status\",\n            action: \"TON_CONNECTION_STATUS\",\n          },\n        },\n        {\n          user: \"{{user2}}\",\n          content: {\n            text:\n              \"Current wallet status: Connected\\n\" +\n              \"Address: EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\\n\" +\n              \"Chain: mainnet\\n\" +\n              \"Platform: web\\n\" +\n              \"App: Tonkeeper\",\n          },\n        },\n      ],\n      // Example 2: Disconnected status\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Check wallet connection\",\n            action: \"TON_CONNECTION_STATUS\",\n          },\n        },\n        {\n          user: \"{{user2}}\",\n          content: {\n            text: \"Wallet status: Not connected\\nUse TON_CONNECT to connect your wallet.\",\n          },\n        },\n      ],\n      // Example 3: Connecting status\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"What's my wallet status\",\n            action: \"TON_CONNECTION_STATUS\",\n          },\n        },\n        {\n          user: \"{{user2}}\",\n          content: {\n            text: \"Wallet status: Connection in progress...\",\n          },\n        },\n      ],\n    ],\n  };\n","import {\n    elizaLogger,\n    composeContext,\n    type Content,\n    type HandlerCallback,\n    ModelClass,\n    generateObject,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { z } from \"zod\";\nimport {\n    initTonConnectProvider,\n    TonConnectProvider,\n} from \"../providers/tonConnect\";\nimport {\n    CHAIN,\n    SendTransactionRequest,\n    UserRejectsError,\n} from \"@tonconnect/sdk\";\n\nexport interface TonConnectSendTransactionContent extends Content {\n    validUntil?: number;\n    network?: CHAIN;\n    from?: string;\n    messages: {\n        address: string;\n        amount: string;\n        stateInit?: string;\n        payload?: string;\n    }[];\n}\n\nfunction isTonConnectSendTransactionContent(\n    content: Content\n): content is TonConnectSendTransactionContent {\n    console.log(\"Content for TonConnect transaction\", content);\n    if (!content.messages || !Array.isArray(content.messages)) {\n        return false;\n    }\n\n    return content.messages.every(\n        (message) =>\n            typeof message.address === \"string\" &&\n            typeof message.amount === \"string\"\n    );\n}\n\nconst tonConnectSendTransactionTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"validUntil\": 1234567890,\n    \"network\": \"MAINNET\",\n    \"from\": \"0:abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\",\n    \"messages\": [\n        {\n            \"address\": \"EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4\",\n            \"amount\": \"1000000000\",\n            \"stateInit\": \"te6cckEBAQEAAgAAAEysuc0=\",\n            \"payload\": \"te6cckEBAQEAAgAAAEysuc0=\"\n        },\n        {\n            \"address\": \"EQDmnxDMhId6v1Ofg_h5KR5coWlFG6e86Ro3pc7Tq4CA0-Jn\",\n            \"amount\": \"2000000000\",\n            \"stateInit\": null,\n            \"payload\": null\n        }\n    ]\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested transaction:\n- List of messages with recipient addresses and amounts\n- Convert all amounts to nanotons (1 TON = 1,000,000,000 nanotons)\n- Optional stateInit (base64 encoded contract code)\n- Optional payload (base64 encoded message body)\n- Optional network specification (MAINNET or TESTNET)\n- Optional from address\n- Optional validUntil timestamp (in unix seconds)\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport class TonConnectSendTransactionAction {\n    async sendTransaction(\n        params: TonConnectSendTransactionContent,\n        provider: TonConnectProvider\n    ): Promise<string> {\n        console.log(`Sending transaction via TonConnect`);\n\n        if (!provider.isConnected()) {\n            throw new Error(\"Please connect wallet to send the transaction!\");\n        }\n\n        const transaction: SendTransactionRequest = {\n            validUntil: params.validUntil || Math.floor(Date.now() / 1000) + 60,\n            network: params.network,\n            from: params.from,\n            messages: params.messages,\n        };\n\n        try {\n            const result = await provider.sendTransaction(transaction);\n            console.log(\"Transaction sent successfully\");\n            return result.boc;\n        } catch (error) {\n            if (error instanceof UserRejectsError) {\n                throw new Error(\n                    \"You rejected the transaction. Please confirm it to send to the blockchain\"\n                );\n            }\n            throw new Error(`Unknown error happened: ${error.message}`);\n        }\n    }\n}\n\nconst buildTonConnectSendTransactionDetails = async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State\n): Promise<TonConnectSendTransactionContent> => {\n    let currentState = state;\n    if (!currentState) {\n        currentState = (await runtime.composeState(message)) as State;\n    } else {\n        currentState = await runtime.updateRecentMessageState(currentState);\n    }\n\n    const transactionSchema = z.object({\n        validUntil: z.number().optional(),\n        network: z.enum([\"MAINNET\", \"TESTNET\"]).optional(),\n        from: z.string().optional(),\n        messages: z.array(\n            z.object({\n                address: z.string(),\n                amount: z.string(),\n                stateInit: z.string().optional(),\n                payload: z.string().optional(),\n            })\n        ),\n    });\n\n    const transactionContext = composeContext({\n        state,\n        template: tonConnectSendTransactionTemplate,\n    });\n\n    const content = await generateObject({\n        runtime,\n        context: transactionContext,\n        schema: transactionSchema,\n        modelClass: ModelClass.SMALL,\n    });\n\n    return content.object as TonConnectSendTransactionContent;\n};\n\nexport default {\n    name: \"SEND_TRANSACTION_TONCONNECT\",\n    similes: [\"SEND_TX_TONCONNECT\", \"SEND_TRANSACTION_TC\"],\n    description: \"Send any transaction using TonConnect wallet integration.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting SEND_TRANSACTION_TONCONNECT handler...\");\n\n        // exit if TONCONNECT is not used\n        if (!runtime.getSetting('TON_MANIFEST_URL')) {\n            return false\n        }\n\n        try {\n            const provider = await initTonConnectProvider(runtime);\n\n            if (!provider.isConnected()) {\n                if (callback) {\n                    callback({\n                        text: \"Please connect your wallet first using the TON_CONNECT action.\",\n                        content: { error: \"Wallet not connected\" },\n                    });\n                }\n                return false;\n            }\n\n            const transactionDetails =\n                await buildTonConnectSendTransactionDetails(\n                    runtime,\n                    message,\n                    state\n                );\n\n            if (!isTonConnectSendTransactionContent(transactionDetails)) {\n                console.error(\n                    \"Invalid content for SEND_TRANSACTION_TONCONNECT action.\"\n                );\n                if (callback) {\n                    callback({\n                        text: \"Unable to process transaction request. Invalid content provided.\",\n                        content: { error: \"Invalid transaction content\" },\n                    });\n                }\n                return false;\n            }\n\n            const action = new TonConnectSendTransactionAction();\n            const boc = await action.sendTransaction(\n                transactionDetails,\n                provider\n            );\n\n            if (callback) {\n                callback({\n                    text: `Successfully sent transaction. Transaction: ${boc}`,\n                    content: {\n                        success: true,\n                        boc: boc,\n                        transaction: transactionDetails,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            console.error(\"Error during transaction:\", error);\n            if (callback) {\n                callback({\n                    text: `Error sending transaction: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    template: tonConnectSendTransactionTemplate,\n    validate: async (_runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 1 TON to EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4 with payload te6cckEBAQEAAgAAAEysuc0=\",\n                    action: \"SEND_TRANSACTION_TONCONNECT\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Processing transaction via TonConnect...\",\n                    action: \"SEND_TRANSACTION_TONCONNECT\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully sent transaction. Transaction: c8ee4a2c1bd070005e6cd31b32270aa461c69b927c3f4c28b293c80786f78b43\",\n                },\n            },\n        ],\n    ],\n};\n","import type { Action, Plugin } from \"@elizaos/core\";\nimport transferAction from \"./actions/transfer.ts\";\nimport createWalletAction from \"./actions/createWallet.ts\";\nimport loadWalletAction from \"./actions/loadWallet.ts\";\nimport borrowAction from \"./actions/evaaBorrow\";\nimport supplyAction from \"./actions/evaaSupply\";\nimport withdrawAction from \"./actions/evaaWithdraw\";\nimport repayAction from \"./actions/evaaRepay\";\nimport positionsAction from \"./actions/evaaPositions\";\nimport stakeAction from \"./actions/stake.ts\";\nimport unstakeAction from \"./actions/unstake.ts\";\nimport getPoolInfoAction from \"./actions/getPoolInfo.ts\";\nimport batchTransferAction from \"./actions/batchTransfer.ts\";\nimport auctionAction from \"./actions/auctionInteraction.ts\";\nimport createListingAction from \"./actions/createListing.ts\";\nimport buyListingAction from \"./actions/buyListing.ts\";\nimport createAuctionAction from \"./actions/createAuction.ts\";\nimport bidListingAction from \"./actions/bidListing.ts\";\nimport cancelListingAction from \"./actions/cancelListing.ts\";\nimport { WalletProvider, nativeWalletProvider } from \"./providers/wallet.ts\";\nimport transferNFTAction from \"./actions/transferNFT.ts\"\nimport mintNFTAction from \"./actions/mintNFT.ts\"\nimport getCollectionDataAction from \"./actions/getCollectionData.ts\"\nimport updateNFTMetadataAction from \"./actions/updateNFTMetadata.ts\";\nimport tokenPriceAction from \"./actions/tokenPrice.ts\";\nimport { tonTokenPriceProvider } from \"./providers/tokenProvider.ts\";\n\nexport { tokenPriceAction as GetTokenPrice };\nimport { StakingProvider, nativeStakingProvider } from \"./providers/staking.ts\";\nimport { create } from \"handlebars\";\n\nexport {\n  WalletProvider,\n  transferAction as TransferTonToken,\n  createWalletAction as CreateTonWallet,\n  loadWalletAction as LoadTonWallet,\n};\nexport {\n  StakingProvider,\n  stakeAction as StakeTonToken,\n  unstakeAction as UnstakeTonToken,\n  getPoolInfoAction as GetPoolInfoTonToken,\n};\nimport { tonConnectProvider } from \"./providers/tonConnect.ts\";\nimport {\n  connectAction,\n  disconnectAction,\n  showConnectionStatusAction,\n} from \"./actions/tonConnect.ts\";\nimport tonConnectTransactionAction from \"./actions/tonConnectTransaction.ts\";\nexport { batchTransferAction as BatchTransferTokens };\nexport { auctionAction as AuctionInteractionActionTon };\n\nexport { getCollectionDataAction as GetCollectionData ,\n  updateNFTMetadataAction as UpdateNFTMetadata,\n  mintNFTAction as MintNFT,\n  transferNFTAction as TransferNFT,\n};\n\nexport const tonPlugin: Plugin = {\n  name: \"ton\",\n  description: \"Ton Plugin for Eliza\",\n  actions: [\n    transferAction,\n    createWalletAction,\n    loadWalletAction,\n    stakeAction,\n    unstakeAction,\n    borrowAction,\n    supplyAction,\n    withdrawAction,\n    repayAction,\n    positionsAction,\n    getPoolInfoAction,\n    batchTransferAction,\n    connectAction,\n    disconnectAction,\n    showConnectionStatusAction,\n    tonConnectTransactionAction,\n    tokenPriceAction,\n    //auctionAction as Action,\n    createListingAction as Action,\n    createAuctionAction as Action,\n    bidListingAction as Action,\n    buyListingAction as Action,\n    cancelListingAction as Action,\n    auctionAction as Action,\n    transferNFTAction as Action,\n    mintNFTAction as Action,\n    updateNFTMetadataAction as Action,\n    getCollectionDataAction as Action,\n  ],\n  evaluators: [],\n  providers: [\n    nativeWalletProvider,\n    nativeStakingProvider,\n    tonConnectProvider,\n    tonTokenPriceProvider,\n  ],\n};\n\nexport default tonPlugin;\n"],"mappings":"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","names":["util","objectUtil","path","errorUtil","path","errorMap","ctx","result","issues","elements","processed","ZodFirstPartyTypeKind","crypto","internal","path","path","internal","elizaLogger","ModelClass","generateObject","composeContext","composeContext","generateObject","ModelClass","elizaLogger","elizaLogger","composeContext","generateObject","ModelClass","composeContext","generateObject","ModelClass","elizaLogger","elizaLogger","ModelClass","composeContext","generateObject","BigNumber","Cell","beginCell","internal","SendMode","elizaLogger","BigNumber","Cell","internal","SendMode","beginCell","composeContext","generateObject","ModelClass","elizaLogger","ModelClass","generateObject","composeContext","BigNumber","evaaPkg","Cell","toNano","beginCell","storeMessage","internal","external","SendMode","Evaa","FEES","TON_TESTNET","TESTNET_POOL_CONFIG","JUSDC_TESTNET","JUSDT_TESTNET","UserDataActive","AssetData","BalanceChangeType","calculatePresentValue","calculateCurrentRates","MasterConstants","AssetConfig","ExtendedAssetData","PoolAssetConfig","mulFactor","predictAPY","PricesCollector","evaaPkg","elizaLogger","BigNumber","toNano","Cell","internal","SendMode","beginCell","storeMessage","external","composeContext","generateObject","ModelClass","elizaLogger","ModelClass","generateObject","composeContext","BigNumber","evaaPkg","Cell","toNano","beginCell","storeMessage","internal","external","SendMode","Evaa","FEES","TON_TESTNET","TESTNET_POOL_CONFIG","JUSDC_TESTNET","JUSDT_TESTNET","UserDataActive","AssetData","BalanceChangeType","calculatePresentValue","calculateCurrentRates","MasterConstants","AssetConfig","ExtendedAssetData","PoolAssetConfig","mulFactor","predictAPY","PricesCollector","evaaPkg","elizaLogger","BigNumber","toNano","Cell","internal","SendMode","beginCell","storeMessage","external","composeContext","generateObject","ModelClass","elizaLogger","ModelClass","generateObject","composeContext","BigNumber","evaaPkg","Cell","toNano","beginCell","storeMessage","internal","external","SendMode","Evaa","FEES","TON_TESTNET","TESTNET_POOL_CONFIG","JUSDC_TESTNET","JUSDT_TESTNET","UserDataActive","AssetData","BalanceChangeType","calculatePresentValue","calculateCurrentRates","MasterConstants","AssetConfig","ExtendedAssetData","PoolAssetConfig","mulFactor","predictAPY","PricesCollector","evaaPkg","elizaLogger","BigNumber","toNano","Cell","internal","SendMode","beginCell","storeMessage","external","composeContext","generateObject","ModelClass","elizaLogger","generateObject","composeContext","ModelClass","evaaPkg","Evaa","FEES","TON_TESTNET","TESTNET_POOL_CONFIG","JUSDC_TESTNET","JUSDT_TESTNET","UserDataActive","AssetData","BalanceChangeType","calculatePresentValue","calculateCurrentRates","MasterConstants","AssetConfig","ExtendedAssetData","PoolAssetConfig","mulFactor","predictAPY","PricesCollector","evaaPkg","Evaa","TESTNET_POOL_CONFIG","JUSDT_TESTNET","JUSDC_TESTNET","TON_TESTNET","calculatePresentValue","mulFactor","elizaLogger","predictAPY","BalanceChangeType","PricesCollector","calculateCurrentRates","composeContext","generateObject","ModelClass","elizaLogger","composeContext","ModelClass","generateObject","Address","SendMode","elizaLogger","Address","Address","elizaLogger","Address","beginCell","Dictionary","toNano","internal","member","Address","beginCell","fromNano","toNano","internal","Address","beginCell","beginCell","Dictionary","beginCell","Dictionary","Dictionary","toNano","fromNano","beginCell","internal","Address","fromNano","Address","SendMode","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","ModelClass","generateObject","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","ModelClass","generateObject","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","Address","beginCell","internal","SendMode","toNano","Builder","internal","Address","toNano","beginCell","Builder","elizaLogger","SendMode","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","Address","internal","SendMode","toNano","Builder","Address","beginCell","Cell","toNano","Cell","beginCell","Address","toNano","composeContext","generateObject","ModelClass","Address","elizaLogger","internal","toNano","SendMode","Builder","marketplaceAddress","marketplaceFeeAddress","elizaLogger","composeContext","generateObject","ModelClass","Address","internal","SendMode","toNano","composeContext","generateObject","ModelClass","toNano","Address","internal","SendMode","elizaLogger","elizaLogger","composeContext","generateObject","ModelClass","beginCell","internal","SendMode","toNano","Address","beginCell","internal","SendMode","toNano","internal","SendMode","beginCell","composeContext","generateObject","ModelClass","elizaLogger","elizaLogger","composeContext","generateObject","ModelClass","Address","internal","SendMode","toNano","CONFIG","composeContext","generateObject","ModelClass","elizaLogger","toNano","Address","internal","SendMode","elizaLogger","composeContext","generateObject","ModelClass","toNano","composeContext","generateObject","ModelClass","elizaLogger","elizaLogger","composeContext","generateObject","ModelClass","composeContext","generateObject","ModelClass","elizaLogger","elizaLogger","composeContext","generateObject","ModelClass","Address","beginCell","internal","toNano","beginCell","elizaLogger","Address","internal","toNano","composeContext","generateObject","ModelClass","safeStringify","elizaLogger","composeContext","generateObject","ModelClass","Address","toNano","path","beginCell","Cell","internal","SendMode","Cell","beginCell","internal","SendMode","elizaLogger","composeContext","generateObject","ModelClass","toNano","Address","path","elizaLogger","composeContext","generateObject","ModelClass","Address","Address","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","Address","beginCell","internal","toNano","path","composeContext","generateObject","ModelClass","elizaLogger","Address","beginCell","internal","toNano","elizaLogger","elizaLogger","NodeCache","PROVIDER_CONFIG","NodeCache","elizaLogger","tonConnectProvider","elizaLogger","elizaLogger","composeContext","ModelClass","generateObject","UserRejectsError","composeContext","generateObject","ModelClass","elizaLogger"]}